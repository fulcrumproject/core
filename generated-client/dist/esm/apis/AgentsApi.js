/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { AgentCreateResFromJSON, AgentReqToJSON, AgentResFromJSON, AgentTypeResFromJSON, AgentTypesGet200ResponseFromJSON, AgentsGet200ResponseFromJSON, AgentsMeStatusPutRequestToJSON, } from '../models/index';
/**
 *
 */
export class AgentsApi extends runtime.BaseAPI {
    /**
     * Retrieves a paginated list of agent types
     * List agent types
     */
    agentTypesGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['pageSize'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/agent-types`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AgentTypesGet200ResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves a paginated list of agent types
     * List agent types
     */
    agentTypesGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.agentTypesGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves a specific agent type by ID
     * Get an agent type
     */
    agentTypesIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling agentTypesIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/agent-types/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AgentTypeResFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves a specific agent type by ID
     * Get an agent type
     */
    agentTypesIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.agentTypesIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves a paginated list of agents
     * List agents
     */
    agentsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['pageSize'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/agents`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AgentsGet200ResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves a paginated list of agents
     * List agents
     */
    agentsGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.agentsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deletes an agent by ID
     * Delete an agent
     */
    agentsIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling agentsIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/agents/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Deletes an agent by ID
     * Delete an agent
     */
    agentsIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.agentsIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Retrieves a specific agent by ID
     * Get an agent
     */
    agentsIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling agentsIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/agents/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AgentResFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves a specific agent by ID
     * Get an agent
     */
    agentsIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.agentsIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Updates an existing agent
     * Update an agent
     */
    agentsIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling agentsIdPatch().');
            }
            if (requestParameters['agentReq'] == null) {
                throw new runtime.RequiredError('agentReq', 'Required parameter "agentReq" was null or undefined when calling agentsIdPatch().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/agents/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: AgentReqToJSON(requestParameters['agentReq']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AgentResFromJSON(jsonValue));
        });
    }
    /**
     * Updates an existing agent
     * Update an agent
     */
    agentsIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.agentsIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves information about the currently authenticated agent
     * Get current agent
     */
    agentsMeGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/agents/me`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AgentResFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves information about the currently authenticated agent
     * Get current agent
     */
    agentsMeGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.agentsMeGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Updates the status of the authenticated agent
     * Update agent status
     */
    agentsMeStatusPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['agentsMeStatusPutRequest'] == null) {
                throw new runtime.RequiredError('agentsMeStatusPutRequest', 'Required parameter "agentsMeStatusPutRequest" was null or undefined when calling agentsMeStatusPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/agents/me/status`;
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: AgentsMeStatusPutRequestToJSON(requestParameters['agentsMeStatusPutRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AgentResFromJSON(jsonValue));
        });
    }
    /**
     * Updates the status of the authenticated agent
     * Update agent status
     */
    agentsMeStatusPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.agentsMeStatusPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new agent and returns the agent data with an authentication token
     * Create an agent
     */
    agentsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['agentReq'] == null) {
                throw new runtime.RequiredError('agentReq', 'Required parameter "agentReq" was null or undefined when calling agentsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/agents`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AgentReqToJSON(requestParameters['agentReq']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AgentCreateResFromJSON(jsonValue));
        });
    }
    /**
     * Creates a new agent and returns the agent data with an authentication token
     * Create an agent
     */
    agentsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.agentsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
