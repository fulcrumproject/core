/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { TokenReqToJSON, TokenResFromJSON, TokensGet200ResponseFromJSON, TokensIdPatchRequestToJSON, } from '../models/index';
/**
 *
 */
export class TokensApi extends runtime.BaseAPI {
    /**
     * Retrieves a paginated list of tokens
     * List tokens
     */
    tokensGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['pageSize'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/tokens`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TokensGet200ResponseFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves a paginated list of tokens
     * List tokens
     */
    tokensGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.tokensGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deletes a token by ID
     * Delete a token
     */
    tokensIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling tokensIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/tokens/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Deletes a token by ID
     * Delete a token
     */
    tokensIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.tokensIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Retrieves a specific token by ID. Note that the plain token value is not returned in this endpoint.
     * Get a token
     */
    tokensIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling tokensIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/tokens/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TokenResFromJSON(jsonValue));
        });
    }
    /**
     * Retrieves a specific token by ID. Note that the plain token value is not returned in this endpoint.
     * Get a token
     */
    tokensIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tokensIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Updates an existing token
     * Update a token
     */
    tokensIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling tokensIdPatch().');
            }
            if (requestParameters['tokensIdPatchRequest'] == null) {
                throw new runtime.RequiredError('tokensIdPatchRequest', 'Required parameter "tokensIdPatchRequest" was null or undefined when calling tokensIdPatch().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/tokens/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: TokensIdPatchRequestToJSON(requestParameters['tokensIdPatchRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TokenResFromJSON(jsonValue));
        });
    }
    /**
     * Updates an existing token
     * Update a token
     */
    tokensIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tokensIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Regenerates the value for an existing token. The new plain token value is returned in the response and cannot be retrieved later.
     * Regenerate token value
     */
    tokensIdRegeneratePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling tokensIdRegeneratePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/tokens/{id}/regenerate`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TokenResFromJSON(jsonValue));
        });
    }
    /**
     * Regenerates the value for an existing token. The new plain token value is returned in the response and cannot be retrieved later.
     * Regenerate token value
     */
    tokensIdRegeneratePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tokensIdRegeneratePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new authentication token. The plain token value is only returned in this response and cannot be retrieved later.
     * Create a token
     */
    tokensPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tokenReq'] == null) {
                throw new runtime.RequiredError('tokenReq', 'Required parameter "tokenReq" was null or undefined when calling tokensPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/tokens`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: TokenReqToJSON(requestParameters['tokenReq']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TokenResFromJSON(jsonValue));
        });
    }
    /**
     * Creates a new authentication token. The plain token value is only returned in this response and cannot be retrieved later.
     * Create a token
     */
    tokensPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tokensPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
