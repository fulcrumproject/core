/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { EventAckReq, EventAckRes, EventLeaseReq, EventLeaseRes, EventsGet200Response } from '../models/index';
export interface EventsAckPostRequest {
    eventAckReq: EventAckReq;
}
export interface EventsGetRequest {
    page?: number;
    pageSize?: number;
}
export interface EventsLeasePostRequest {
    eventLeaseReq: EventLeaseReq;
}
/**
 * EventApi - interface
 *
 * @export
 * @interface EventApiInterface
 */
export interface EventApiInterface {
    /**
     * Acknowledge processed events and update progress (Option B - does not renew lease)
     * @summary Acknowledge processed events
     * @param {EventAckReq} eventAckReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    eventsAckPostRaw(requestParameters: EventsAckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventAckRes>>;
    /**
     * Acknowledge processed events and update progress (Option B - does not renew lease)
     * Acknowledge processed events
     */
    eventsAckPost(requestParameters: EventsAckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventAckRes>;
    /**
     * Retrieves a paginated list of events
     * @summary List events
     * @param {number} [page]
     * @param {number} [pageSize]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    eventsGetRaw(requestParameters: EventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsGet200Response>>;
    /**
     * Retrieves a paginated list of events
     * List events
     */
    eventsGet(requestParameters: EventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsGet200Response>;
    /**
     * Acquire or renew a lease for event processing and fetch events in chronological order
     * @summary Acquire event lease and fetch events
     * @param {EventLeaseReq} eventLeaseReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    eventsLeasePostRaw(requestParameters: EventsLeasePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventLeaseRes>>;
    /**
     * Acquire or renew a lease for event processing and fetch events in chronological order
     * Acquire event lease and fetch events
     */
    eventsLeasePost(requestParameters: EventsLeasePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventLeaseRes>;
}
/**
 *
 */
export declare class EventApi extends runtime.BaseAPI implements EventApiInterface {
    /**
     * Acknowledge processed events and update progress (Option B - does not renew lease)
     * Acknowledge processed events
     */
    eventsAckPostRaw(requestParameters: EventsAckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventAckRes>>;
    /**
     * Acknowledge processed events and update progress (Option B - does not renew lease)
     * Acknowledge processed events
     */
    eventsAckPost(requestParameters: EventsAckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventAckRes>;
    /**
     * Retrieves a paginated list of events
     * List events
     */
    eventsGetRaw(requestParameters: EventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsGet200Response>>;
    /**
     * Retrieves a paginated list of events
     * List events
     */
    eventsGet(requestParameters?: EventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsGet200Response>;
    /**
     * Acquire or renew a lease for event processing and fetch events in chronological order
     * Acquire event lease and fetch events
     */
    eventsLeasePostRaw(requestParameters: EventsLeasePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventLeaseRes>>;
    /**
     * Acquire or renew a lease for event processing and fetch events in chronological order
     * Acquire event lease and fetch events
     */
    eventsLeasePost(requestParameters: EventsLeasePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventLeaseRes>;
}
