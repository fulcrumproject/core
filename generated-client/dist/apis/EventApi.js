"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class EventApi extends runtime.BaseAPI {
    /**
     * Acknowledge processed events and update progress (Option B - does not renew lease)
     * Acknowledge processed events
     */
    eventsAckPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['eventAckReq'] == null) {
                throw new runtime.RequiredError('eventAckReq', 'Required parameter "eventAckReq" was null or undefined when calling eventsAckPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/events/ack`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EventAckReqToJSON)(requestParameters['eventAckReq']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventAckResFromJSON)(jsonValue));
        });
    }
    /**
     * Acknowledge processed events and update progress (Option B - does not renew lease)
     * Acknowledge processed events
     */
    eventsAckPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsAckPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves a paginated list of events
     * List events
     */
    eventsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['pageSize'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/events`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventsGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a paginated list of events
     * List events
     */
    eventsGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.eventsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Acquire or renew a lease for event processing and fetch events in chronological order
     * Acquire event lease and fetch events
     */
    eventsLeasePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['eventLeaseReq'] == null) {
                throw new runtime.RequiredError('eventLeaseReq', 'Required parameter "eventLeaseReq" was null or undefined when calling eventsLeasePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/events/lease`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.EventLeaseReqToJSON)(requestParameters['eventLeaseReq']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.EventLeaseResFromJSON)(jsonValue));
        });
    }
    /**
     * Acquire or renew a lease for event processing and fetch events in chronological order
     * Acquire event lease and fetch events
     */
    eventsLeasePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsLeasePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.EventApi = EventApi;
