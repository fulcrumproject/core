"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServicesApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class ServicesApi extends runtime.BaseAPI {
    /**
     * Retrieves a paginated list of service groups
     * List service groups
     */
    serviceGroupsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['pageSize'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/service-groups`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceGroupsGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a paginated list of service groups
     * List service groups
     */
    serviceGroupsGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.serviceGroupsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deletes a service group by ID
     * Delete a service group
     */
    serviceGroupsIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling serviceGroupsIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/service-groups/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Deletes a service group by ID
     * Delete a service group
     */
    serviceGroupsIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.serviceGroupsIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Retrieves a specific service group by ID
     * Get a service group
     */
    serviceGroupsIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling serviceGroupsIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/service-groups/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceGroupResFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a specific service group by ID
     * Get a service group
     */
    serviceGroupsIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.serviceGroupsIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Updates an existing service group
     * Update a service group
     */
    serviceGroupsIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling serviceGroupsIdPatch().');
            }
            if (requestParameters['serviceGroupReq'] == null) {
                throw new runtime.RequiredError('serviceGroupReq', 'Required parameter "serviceGroupReq" was null or undefined when calling serviceGroupsIdPatch().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/service-groups/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ServiceGroupReqToJSON)(requestParameters['serviceGroupReq']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceGroupResFromJSON)(jsonValue));
        });
    }
    /**
     * Updates an existing service group
     * Update a service group
     */
    serviceGroupsIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.serviceGroupsIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new service group
     * Create a service group
     */
    serviceGroupsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['serviceGroupReq'] == null) {
                throw new runtime.RequiredError('serviceGroupReq', 'Required parameter "serviceGroupReq" was null or undefined when calling serviceGroupsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/service-groups`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ServiceGroupReqToJSON)(requestParameters['serviceGroupReq']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceGroupResFromJSON)(jsonValue));
        });
    }
    /**
     * Creates a new service group
     * Create a service group
     */
    serviceGroupsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.serviceGroupsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves a paginated list of service types
     * List service types
     */
    serviceTypesGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['pageSize'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/service-types`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceTypesGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a paginated list of service types
     * List service types
     */
    serviceTypesGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.serviceTypesGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves a specific service type by ID
     * Get a service type
     */
    serviceTypesIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling serviceTypesIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/service-types/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceTypeResFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a specific service type by ID
     * Get a service type
     */
    serviceTypesIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.serviceTypesIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Validates service properties against the service type\'s property schema
     * Validate service properties
     */
    serviceTypesIdValidatePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling serviceTypesIdValidatePost().');
            }
            if (requestParameters['validatePropertiesReq'] == null) {
                throw new runtime.RequiredError('validatePropertiesReq', 'Required parameter "validatePropertiesReq" was null or undefined when calling serviceTypesIdValidatePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/service-types/{id}/validate`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ValidatePropertiesReqToJSON)(requestParameters['validatePropertiesReq']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ValidatePropertiesResFromJSON)(jsonValue));
        });
    }
    /**
     * Validates service properties against the service type\'s property schema
     * Validate service properties
     */
    serviceTypesIdValidatePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.serviceTypesIdValidatePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves a paginated list of services
     * List services
     */
    servicesGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['pageSize'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/services`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServicesGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a paginated list of services
     * List services
     */
    servicesGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.servicesGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deletes a service by ID
     * Delete a service
     */
    servicesIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling servicesIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/services/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Deletes a service by ID
     * Delete a service
     */
    servicesIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.servicesIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Retrieves a specific service by ID
     * Get a service
     */
    servicesIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling servicesIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/services/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceResFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a specific service by ID
     * Get a service
     */
    servicesIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.servicesIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Updates an existing service
     * Update a service
     */
    servicesIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling servicesIdPatch().');
            }
            if (requestParameters['servicesIdPatchRequest'] == null) {
                throw new runtime.RequiredError('servicesIdPatchRequest', 'Required parameter "servicesIdPatchRequest" was null or undefined when calling servicesIdPatch().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/services/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ServicesIdPatchRequestToJSON)(requestParameters['servicesIdPatchRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceResFromJSON)(jsonValue));
        });
    }
    /**
     * Updates an existing service
     * Update a service
     */
    servicesIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.servicesIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retries the last failed operation on a service
     * Retry a failed service operation
     */
    servicesIdRetryPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling servicesIdRetryPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/services/{id}/retry`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Retries the last failed operation on a service
     * Retry a failed service operation
     */
    servicesIdRetryPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.servicesIdRetryPostRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Starts a service by ID
     * Start a service
     */
    servicesIdStartPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling servicesIdStartPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/services/{id}/start`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Starts a service by ID
     * Start a service
     */
    servicesIdStartPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.servicesIdStartPostRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Stops a service by ID
     * Stop a service
     */
    servicesIdStopPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling servicesIdStopPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/services/{id}/stop`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Stops a service by ID
     * Stop a service
     */
    servicesIdStopPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.servicesIdStopPostRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Creates a new service
     * Create a service
     */
    servicesPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['serviceReq'] == null) {
                throw new runtime.RequiredError('serviceReq', 'Required parameter "serviceReq" was null or undefined when calling servicesPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/services`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ServiceReqToJSON)(requestParameters['serviceReq']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ServiceResFromJSON)(jsonValue));
        });
    }
    /**
     * Creates a new service
     * Create a service
     */
    servicesPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.servicesPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ServicesApi = ServicesApi;
