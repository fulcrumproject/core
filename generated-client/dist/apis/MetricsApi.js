"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class MetricsApi extends runtime.BaseAPI {
    /**
     * Retrieves a paginated list of metric entries
     * List metric entries
     */
    metricEntriesGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['pageSize'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/metric-entries`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MetricEntriesGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a paginated list of metric entries
     * List metric entries
     */
    metricEntriesGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.metricEntriesGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new metric entry
     * Create a metric entry
     */
    metricEntriesPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['metricEntryReq'] == null) {
                throw new runtime.RequiredError('metricEntryReq', 'Required parameter "metricEntryReq" was null or undefined when calling metricEntriesPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/metric-entries`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MetricEntryReqToJSON)(requestParameters['metricEntryReq']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MetricEntryResFromJSON)(jsonValue));
        });
    }
    /**
     * Creates a new metric entry
     * Create a metric entry
     */
    metricEntriesPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.metricEntriesPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves a paginated list of metric types
     * List metric types
     */
    metricTypesGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['pageSize'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/metric-types`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MetricTypesGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a paginated list of metric types
     * List metric types
     */
    metricTypesGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.metricTypesGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Deletes a metric type by ID
     * Delete a metric type
     */
    metricTypesIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling metricTypesIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/metric-types/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Deletes a metric type by ID
     * Delete a metric type
     */
    metricTypesIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.metricTypesIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Retrieves a specific metric type by ID
     * Get a metric type
     */
    metricTypesIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling metricTypesIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/metric-types/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MetricTypeResFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a specific metric type by ID
     * Get a metric type
     */
    metricTypesIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.metricTypesIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Updates an existing metric type
     * Update a metric type
     */
    metricTypesIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling metricTypesIdPatch().');
            }
            if (requestParameters['metricTypesIdPatchRequest'] == null) {
                throw new runtime.RequiredError('metricTypesIdPatchRequest', 'Required parameter "metricTypesIdPatchRequest" was null or undefined when calling metricTypesIdPatch().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/metric-types/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MetricTypesIdPatchRequestToJSON)(requestParameters['metricTypesIdPatchRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MetricTypeResFromJSON)(jsonValue));
        });
    }
    /**
     * Updates an existing metric type
     * Update a metric type
     */
    metricTypesIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.metricTypesIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Creates a new metric type
     * Create a metric type
     */
    metricTypesPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['metricTypeReq'] == null) {
                throw new runtime.RequiredError('metricTypeReq', 'Required parameter "metricTypeReq" was null or undefined when calling metricTypesPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/metric-types`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MetricTypeReqToJSON)(requestParameters['metricTypeReq']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MetricTypeResFromJSON)(jsonValue));
        });
    }
    /**
     * Creates a new metric type
     * Create a metric type
     */
    metricTypesPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.metricTypesPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.MetricsApi = MetricsApi;
