"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobsApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class JobsApi extends runtime.BaseAPI {
    /**
     * Retrieves a paginated list of jobs (admin route)
     * List jobs
     */
    jobsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['pageSize'] != null) {
                queryParameters['pageSize'] = requestParameters['pageSize'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/jobs`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.JobsGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a paginated list of jobs (admin route)
     * List jobs
     */
    jobsGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.jobsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Claims a job for processing by the authenticated agent
     * Claim a job
     */
    jobsIdClaimPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling jobsIdClaimPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/jobs/{id}/claim`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Claims a job for processing by the authenticated agent
     * Claim a job
     */
    jobsIdClaimPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.jobsIdClaimPostRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Marks a job as completed with results
     * Complete a job
     */
    jobsIdCompletePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling jobsIdCompletePost().');
            }
            if (requestParameters['completeJobReq'] == null) {
                throw new runtime.RequiredError('completeJobReq', 'Required parameter "completeJobReq" was null or undefined when calling jobsIdCompletePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/jobs/{id}/complete`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.CompleteJobReqToJSON)(requestParameters['completeJobReq']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Marks a job as completed with results
     * Complete a job
     */
    jobsIdCompletePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.jobsIdCompletePostRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Marks a job as failed with an error message
     * Fail a job
     */
    jobsIdFailPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling jobsIdFailPost().');
            }
            if (requestParameters['failJobReq'] == null) {
                throw new runtime.RequiredError('failJobReq', 'Required parameter "failJobReq" was null or undefined when calling jobsIdFailPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/jobs/{id}/fail`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FailJobReqToJSON)(requestParameters['failJobReq']),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Marks a job as failed with an error message
     * Fail a job
     */
    jobsIdFailPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.jobsIdFailPostRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Retrieves a specific job by ID (admin route)
     * Get a job
     */
    jobsIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling jobsIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/jobs/{id}`;
            urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.JobResFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves a specific job by ID (admin route)
     * Get a job
     */
    jobsIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.jobsIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves a list of pending jobs for the authenticated agent
     * Get pending jobs
     */
    jobsPendingGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                // oauth required
                headerParameters["Authorization"] = yield this.configuration.accessToken("BearerAuth", []);
            }
            let urlPath = `/jobs/pending`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.JobResFromJSON));
        });
    }
    /**
     * Retrieves a list of pending jobs for the authenticated agent
     * Get pending jobs
     */
    jobsPendingGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.jobsPendingGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.JobsApi = JobsApi;
