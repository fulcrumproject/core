/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthRole } from './AuthRole';
import {
    AuthRoleFromJSON,
    AuthRoleFromJSONTyped,
    AuthRoleToJSON,
    AuthRoleToJSONTyped,
} from './AuthRole';

/**
 * 
 * @export
 * @interface TokensIdPatchRequest
 */
export interface TokensIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof TokensIdPatchRequest
     */
    name?: string;
    /**
     * 
     * @type {AuthRole}
     * @memberof TokensIdPatchRequest
     */
    role?: AuthRole;
    /**
     * 
     * @type {Date}
     * @memberof TokensIdPatchRequest
     */
    expireAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof TokensIdPatchRequest
     */
    scopeId?: string;
}



/**
 * Check if a given object implements the TokensIdPatchRequest interface.
 */
export function instanceOfTokensIdPatchRequest(value: object): value is TokensIdPatchRequest {
    return true;
}

export function TokensIdPatchRequestFromJSON(json: any): TokensIdPatchRequest {
    return TokensIdPatchRequestFromJSONTyped(json, false);
}

export function TokensIdPatchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokensIdPatchRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'role': json['role'] == null ? undefined : AuthRoleFromJSON(json['role']),
        'expireAt': json['expireAt'] == null ? undefined : (new Date(json['expireAt'])),
        'scopeId': json['scopeId'] == null ? undefined : json['scopeId'],
    };
}

export function TokensIdPatchRequestToJSON(json: any): TokensIdPatchRequest {
    return TokensIdPatchRequestToJSONTyped(json, false);
}

export function TokensIdPatchRequestToJSONTyped(value?: TokensIdPatchRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'role': AuthRoleToJSON(value['role']),
        'expireAt': value['expireAt'] == null ? undefined : ((value['expireAt']).toISOString()),
        'scopeId': value['scopeId'],
    };
}

