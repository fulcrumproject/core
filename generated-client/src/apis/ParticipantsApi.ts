/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorRes,
  ParticipantReq,
  ParticipantRes,
  ParticipantsGet200Response,
} from '../models/index';
import {
    ErrorResFromJSON,
    ErrorResToJSON,
    ParticipantReqFromJSON,
    ParticipantReqToJSON,
    ParticipantResFromJSON,
    ParticipantResToJSON,
    ParticipantsGet200ResponseFromJSON,
    ParticipantsGet200ResponseToJSON,
} from '../models/index';

export interface ParticipantsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ParticipantsIdDeleteRequest {
    id: string;
}

export interface ParticipantsIdGetRequest {
    id: string;
}

export interface ParticipantsIdPatchRequest {
    id: string;
    participantReq: ParticipantReq;
}

export interface ParticipantsPostRequest {
    participantReq: ParticipantReq;
}

/**
 * ParticipantsApi - interface
 * 
 * @export
 * @interface ParticipantsApiInterface
 */
export interface ParticipantsApiInterface {
    /**
     * Retrieves a paginated list of participants
     * @summary List participants
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    participantsGetRaw(requestParameters: ParticipantsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantsGet200Response>>;

    /**
     * Retrieves a paginated list of participants
     * List participants
     */
    participantsGet(requestParameters: ParticipantsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantsGet200Response>;

    /**
     * Deletes a participant by ID
     * @summary Delete a participant
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    participantsIdDeleteRaw(requestParameters: ParticipantsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a participant by ID
     * Delete a participant
     */
    participantsIdDelete(requestParameters: ParticipantsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a specific participant by ID
     * @summary Get a participant
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    participantsIdGetRaw(requestParameters: ParticipantsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantRes>>;

    /**
     * Retrieves a specific participant by ID
     * Get a participant
     */
    participantsIdGet(requestParameters: ParticipantsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantRes>;

    /**
     * Updates an existing participant
     * @summary Update a participant
     * @param {string} id 
     * @param {ParticipantReq} participantReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    participantsIdPatchRaw(requestParameters: ParticipantsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantRes>>;

    /**
     * Updates an existing participant
     * Update a participant
     */
    participantsIdPatch(requestParameters: ParticipantsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantRes>;

    /**
     * Creates a new participant
     * @summary Create a participant
     * @param {ParticipantReq} participantReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParticipantsApiInterface
     */
    participantsPostRaw(requestParameters: ParticipantsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantRes>>;

    /**
     * Creates a new participant
     * Create a participant
     */
    participantsPost(requestParameters: ParticipantsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantRes>;

}

/**
 * 
 */
export class ParticipantsApi extends runtime.BaseAPI implements ParticipantsApiInterface {

    /**
     * Retrieves a paginated list of participants
     * List participants
     */
    async participantsGetRaw(requestParameters: ParticipantsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/participants`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParticipantsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of participants
     * List participants
     */
    async participantsGet(requestParameters: ParticipantsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantsGet200Response> {
        const response = await this.participantsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a participant by ID
     * Delete a participant
     */
    async participantsIdDeleteRaw(requestParameters: ParticipantsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling participantsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/participants/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a participant by ID
     * Delete a participant
     */
    async participantsIdDelete(requestParameters: ParticipantsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.participantsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific participant by ID
     * Get a participant
     */
    async participantsIdGetRaw(requestParameters: ParticipantsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling participantsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/participants/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParticipantResFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific participant by ID
     * Get a participant
     */
    async participantsIdGet(requestParameters: ParticipantsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantRes> {
        const response = await this.participantsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing participant
     * Update a participant
     */
    async participantsIdPatchRaw(requestParameters: ParticipantsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling participantsIdPatch().'
            );
        }

        if (requestParameters['participantReq'] == null) {
            throw new runtime.RequiredError(
                'participantReq',
                'Required parameter "participantReq" was null or undefined when calling participantsIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/participants/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ParticipantReqToJSON(requestParameters['participantReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParticipantResFromJSON(jsonValue));
    }

    /**
     * Updates an existing participant
     * Update a participant
     */
    async participantsIdPatch(requestParameters: ParticipantsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantRes> {
        const response = await this.participantsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new participant
     * Create a participant
     */
    async participantsPostRaw(requestParameters: ParticipantsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ParticipantRes>> {
        if (requestParameters['participantReq'] == null) {
            throw new runtime.RequiredError(
                'participantReq',
                'Required parameter "participantReq" was null or undefined when calling participantsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/participants`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParticipantReqToJSON(requestParameters['participantReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ParticipantResFromJSON(jsonValue));
    }

    /**
     * Creates a new participant
     * Create a participant
     */
    async participantsPost(requestParameters: ParticipantsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ParticipantRes> {
        const response = await this.participantsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
