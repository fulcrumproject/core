/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CompleteJobReq,
  ErrorRes,
  FailJobReq,
  JobRes,
  JobsGet200Response,
} from '../models/index';
import {
    CompleteJobReqFromJSON,
    CompleteJobReqToJSON,
    ErrorResFromJSON,
    ErrorResToJSON,
    FailJobReqFromJSON,
    FailJobReqToJSON,
    JobResFromJSON,
    JobResToJSON,
    JobsGet200ResponseFromJSON,
    JobsGet200ResponseToJSON,
} from '../models/index';

export interface JobsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface JobsIdClaimPostRequest {
    id: string;
}

export interface JobsIdCompletePostRequest {
    id: string;
    completeJobReq: CompleteJobReq;
}

export interface JobsIdFailPostRequest {
    id: string;
    failJobReq: FailJobReq;
}

export interface JobsIdGetRequest {
    id: string;
}

export interface JobsPendingGetRequest {
    limit?: number;
}

/**
 * JobsApi - interface
 * 
 * @export
 * @interface JobsApiInterface
 */
export interface JobsApiInterface {
    /**
     * Retrieves a paginated list of jobs (admin route)
     * @summary List jobs
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    jobsGetRaw(requestParameters: JobsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobsGet200Response>>;

    /**
     * Retrieves a paginated list of jobs (admin route)
     * List jobs
     */
    jobsGet(requestParameters: JobsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobsGet200Response>;

    /**
     * Claims a job for processing by the authenticated agent
     * @summary Claim a job
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    jobsIdClaimPostRaw(requestParameters: JobsIdClaimPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Claims a job for processing by the authenticated agent
     * Claim a job
     */
    jobsIdClaimPost(requestParameters: JobsIdClaimPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Marks a job as completed with results
     * @summary Complete a job
     * @param {string} id 
     * @param {CompleteJobReq} completeJobReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    jobsIdCompletePostRaw(requestParameters: JobsIdCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Marks a job as completed with results
     * Complete a job
     */
    jobsIdCompletePost(requestParameters: JobsIdCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Marks a job as failed with an error message
     * @summary Fail a job
     * @param {string} id 
     * @param {FailJobReq} failJobReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    jobsIdFailPostRaw(requestParameters: JobsIdFailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Marks a job as failed with an error message
     * Fail a job
     */
    jobsIdFailPost(requestParameters: JobsIdFailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a specific job by ID (admin route)
     * @summary Get a job
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    jobsIdGetRaw(requestParameters: JobsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobRes>>;

    /**
     * Retrieves a specific job by ID (admin route)
     * Get a job
     */
    jobsIdGet(requestParameters: JobsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobRes>;

    /**
     * Retrieves a list of pending jobs for the authenticated agent
     * @summary Get pending jobs
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    jobsPendingGetRaw(requestParameters: JobsPendingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobRes>>>;

    /**
     * Retrieves a list of pending jobs for the authenticated agent
     * Get pending jobs
     */
    jobsPendingGet(requestParameters: JobsPendingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobRes>>;

}

/**
 * 
 */
export class JobsApi extends runtime.BaseAPI implements JobsApiInterface {

    /**
     * Retrieves a paginated list of jobs (admin route)
     * List jobs
     */
    async jobsGetRaw(requestParameters: JobsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/jobs`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of jobs (admin route)
     * List jobs
     */
    async jobsGet(requestParameters: JobsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobsGet200Response> {
        const response = await this.jobsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Claims a job for processing by the authenticated agent
     * Claim a job
     */
    async jobsIdClaimPostRaw(requestParameters: JobsIdClaimPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling jobsIdClaimPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/jobs/{id}/claim`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Claims a job for processing by the authenticated agent
     * Claim a job
     */
    async jobsIdClaimPost(requestParameters: JobsIdClaimPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobsIdClaimPostRaw(requestParameters, initOverrides);
    }

    /**
     * Marks a job as completed with results
     * Complete a job
     */
    async jobsIdCompletePostRaw(requestParameters: JobsIdCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling jobsIdCompletePost().'
            );
        }

        if (requestParameters['completeJobReq'] == null) {
            throw new runtime.RequiredError(
                'completeJobReq',
                'Required parameter "completeJobReq" was null or undefined when calling jobsIdCompletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/jobs/{id}/complete`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompleteJobReqToJSON(requestParameters['completeJobReq']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Marks a job as completed with results
     * Complete a job
     */
    async jobsIdCompletePost(requestParameters: JobsIdCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobsIdCompletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Marks a job as failed with an error message
     * Fail a job
     */
    async jobsIdFailPostRaw(requestParameters: JobsIdFailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling jobsIdFailPost().'
            );
        }

        if (requestParameters['failJobReq'] == null) {
            throw new runtime.RequiredError(
                'failJobReq',
                'Required parameter "failJobReq" was null or undefined when calling jobsIdFailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/jobs/{id}/fail`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FailJobReqToJSON(requestParameters['failJobReq']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Marks a job as failed with an error message
     * Fail a job
     */
    async jobsIdFailPost(requestParameters: JobsIdFailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobsIdFailPostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific job by ID (admin route)
     * Get a job
     */
    async jobsIdGetRaw(requestParameters: JobsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling jobsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/jobs/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobResFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific job by ID (admin route)
     * Get a job
     */
    async jobsIdGet(requestParameters: JobsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobRes> {
        const response = await this.jobsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of pending jobs for the authenticated agent
     * Get pending jobs
     */
    async jobsPendingGetRaw(requestParameters: JobsPendingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobRes>>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/jobs/pending`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobResFromJSON));
    }

    /**
     * Retrieves a list of pending jobs for the authenticated agent
     * Get pending jobs
     */
    async jobsPendingGet(requestParameters: JobsPendingGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobRes>> {
        const response = await this.jobsPendingGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
