/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorRes,
  TokenReq,
  TokenRes,
  TokensGet200Response,
  TokensIdPatchRequest,
} from '../models/index';
import {
    ErrorResFromJSON,
    ErrorResToJSON,
    TokenReqFromJSON,
    TokenReqToJSON,
    TokenResFromJSON,
    TokenResToJSON,
    TokensGet200ResponseFromJSON,
    TokensGet200ResponseToJSON,
    TokensIdPatchRequestFromJSON,
    TokensIdPatchRequestToJSON,
} from '../models/index';

export interface TokensGetRequest {
    page?: number;
    pageSize?: number;
}

export interface TokensIdDeleteRequest {
    id: string;
}

export interface TokensIdGetRequest {
    id: string;
}

export interface TokensIdPatchOperationRequest {
    id: string;
    tokensIdPatchRequest: TokensIdPatchRequest;
}

export interface TokensIdRegeneratePostRequest {
    id: string;
}

export interface TokensPostRequest {
    tokenReq: TokenReq;
}

/**
 * TokensApi - interface
 * 
 * @export
 * @interface TokensApiInterface
 */
export interface TokensApiInterface {
    /**
     * Retrieves a paginated list of tokens
     * @summary List tokens
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    tokensGetRaw(requestParameters: TokensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokensGet200Response>>;

    /**
     * Retrieves a paginated list of tokens
     * List tokens
     */
    tokensGet(requestParameters: TokensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokensGet200Response>;

    /**
     * Deletes a token by ID
     * @summary Delete a token
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    tokensIdDeleteRaw(requestParameters: TokensIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a token by ID
     * Delete a token
     */
    tokensIdDelete(requestParameters: TokensIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a specific token by ID. Note that the plain token value is not returned in this endpoint.
     * @summary Get a token
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    tokensIdGetRaw(requestParameters: TokensIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRes>>;

    /**
     * Retrieves a specific token by ID. Note that the plain token value is not returned in this endpoint.
     * Get a token
     */
    tokensIdGet(requestParameters: TokensIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRes>;

    /**
     * Updates an existing token
     * @summary Update a token
     * @param {string} id 
     * @param {TokensIdPatchRequest} tokensIdPatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    tokensIdPatchRaw(requestParameters: TokensIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRes>>;

    /**
     * Updates an existing token
     * Update a token
     */
    tokensIdPatch(requestParameters: TokensIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRes>;

    /**
     * Regenerates the value for an existing token. The new plain token value is returned in the response and cannot be retrieved later.
     * @summary Regenerate token value
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    tokensIdRegeneratePostRaw(requestParameters: TokensIdRegeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRes>>;

    /**
     * Regenerates the value for an existing token. The new plain token value is returned in the response and cannot be retrieved later.
     * Regenerate token value
     */
    tokensIdRegeneratePost(requestParameters: TokensIdRegeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRes>;

    /**
     * Creates a new authentication token. The plain token value is only returned in this response and cannot be retrieved later.
     * @summary Create a token
     * @param {TokenReq} tokenReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokensApiInterface
     */
    tokensPostRaw(requestParameters: TokensPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRes>>;

    /**
     * Creates a new authentication token. The plain token value is only returned in this response and cannot be retrieved later.
     * Create a token
     */
    tokensPost(requestParameters: TokensPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRes>;

}

/**
 * 
 */
export class TokensApi extends runtime.BaseAPI implements TokensApiInterface {

    /**
     * Retrieves a paginated list of tokens
     * List tokens
     */
    async tokensGetRaw(requestParameters: TokensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokensGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/tokens`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokensGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of tokens
     * List tokens
     */
    async tokensGet(requestParameters: TokensGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokensGet200Response> {
        const response = await this.tokensGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a token by ID
     * Delete a token
     */
    async tokensIdDeleteRaw(requestParameters: TokensIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tokensIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/tokens/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a token by ID
     * Delete a token
     */
    async tokensIdDelete(requestParameters: TokensIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tokensIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific token by ID. Note that the plain token value is not returned in this endpoint.
     * Get a token
     */
    async tokensIdGetRaw(requestParameters: TokensIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tokensIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/tokens/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific token by ID. Note that the plain token value is not returned in this endpoint.
     * Get a token
     */
    async tokensIdGet(requestParameters: TokensIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRes> {
        const response = await this.tokensIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing token
     * Update a token
     */
    async tokensIdPatchRaw(requestParameters: TokensIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tokensIdPatch().'
            );
        }

        if (requestParameters['tokensIdPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'tokensIdPatchRequest',
                'Required parameter "tokensIdPatchRequest" was null or undefined when calling tokensIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/tokens/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TokensIdPatchRequestToJSON(requestParameters['tokensIdPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResFromJSON(jsonValue));
    }

    /**
     * Updates an existing token
     * Update a token
     */
    async tokensIdPatch(requestParameters: TokensIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRes> {
        const response = await this.tokensIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Regenerates the value for an existing token. The new plain token value is returned in the response and cannot be retrieved later.
     * Regenerate token value
     */
    async tokensIdRegeneratePostRaw(requestParameters: TokensIdRegeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tokensIdRegeneratePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/tokens/{id}/regenerate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResFromJSON(jsonValue));
    }

    /**
     * Regenerates the value for an existing token. The new plain token value is returned in the response and cannot be retrieved later.
     * Regenerate token value
     */
    async tokensIdRegeneratePost(requestParameters: TokensIdRegeneratePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRes> {
        const response = await this.tokensIdRegeneratePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new authentication token. The plain token value is only returned in this response and cannot be retrieved later.
     * Create a token
     */
    async tokensPostRaw(requestParameters: TokensPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRes>> {
        if (requestParameters['tokenReq'] == null) {
            throw new runtime.RequiredError(
                'tokenReq',
                'Required parameter "tokenReq" was null or undefined when calling tokensPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/tokens`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenReqToJSON(requestParameters['tokenReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResFromJSON(jsonValue));
    }

    /**
     * Creates a new authentication token. The plain token value is only returned in this response and cannot be retrieved later.
     * Create a token
     */
    async tokensPost(requestParameters: TokensPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRes> {
        const response = await this.tokensPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
