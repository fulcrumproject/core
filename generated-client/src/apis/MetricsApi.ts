/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorRes,
  MetricEntriesGet200Response,
  MetricEntryReq,
  MetricEntryRes,
  MetricTypeReq,
  MetricTypeRes,
  MetricTypesGet200Response,
  MetricTypesIdPatchRequest,
} from '../models/index';
import {
    ErrorResFromJSON,
    ErrorResToJSON,
    MetricEntriesGet200ResponseFromJSON,
    MetricEntriesGet200ResponseToJSON,
    MetricEntryReqFromJSON,
    MetricEntryReqToJSON,
    MetricEntryResFromJSON,
    MetricEntryResToJSON,
    MetricTypeReqFromJSON,
    MetricTypeReqToJSON,
    MetricTypeResFromJSON,
    MetricTypeResToJSON,
    MetricTypesGet200ResponseFromJSON,
    MetricTypesGet200ResponseToJSON,
    MetricTypesIdPatchRequestFromJSON,
    MetricTypesIdPatchRequestToJSON,
} from '../models/index';

export interface MetricEntriesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface MetricEntriesPostRequest {
    metricEntryReq: MetricEntryReq | null;
}

export interface MetricTypesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface MetricTypesIdDeleteRequest {
    id: string;
}

export interface MetricTypesIdGetRequest {
    id: string;
}

export interface MetricTypesIdPatchOperationRequest {
    id: string;
    metricTypesIdPatchRequest: MetricTypesIdPatchRequest;
}

export interface MetricTypesPostRequest {
    metricTypeReq: MetricTypeReq;
}

/**
 * MetricsApi - interface
 * 
 * @export
 * @interface MetricsApiInterface
 */
export interface MetricsApiInterface {
    /**
     * Retrieves a paginated list of metric entries
     * @summary List metric entries
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    metricEntriesGetRaw(requestParameters: MetricEntriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricEntriesGet200Response>>;

    /**
     * Retrieves a paginated list of metric entries
     * List metric entries
     */
    metricEntriesGet(requestParameters: MetricEntriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricEntriesGet200Response>;

    /**
     * Creates a new metric entry
     * @summary Create a metric entry
     * @param {MetricEntryReq} metricEntryReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    metricEntriesPostRaw(requestParameters: MetricEntriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricEntryRes>>;

    /**
     * Creates a new metric entry
     * Create a metric entry
     */
    metricEntriesPost(requestParameters: MetricEntriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricEntryRes>;

    /**
     * Retrieves a paginated list of metric types
     * @summary List metric types
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    metricTypesGetRaw(requestParameters: MetricTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricTypesGet200Response>>;

    /**
     * Retrieves a paginated list of metric types
     * List metric types
     */
    metricTypesGet(requestParameters: MetricTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricTypesGet200Response>;

    /**
     * Deletes a metric type by ID
     * @summary Delete a metric type
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    metricTypesIdDeleteRaw(requestParameters: MetricTypesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a metric type by ID
     * Delete a metric type
     */
    metricTypesIdDelete(requestParameters: MetricTypesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a specific metric type by ID
     * @summary Get a metric type
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    metricTypesIdGetRaw(requestParameters: MetricTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricTypeRes>>;

    /**
     * Retrieves a specific metric type by ID
     * Get a metric type
     */
    metricTypesIdGet(requestParameters: MetricTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricTypeRes>;

    /**
     * Updates an existing metric type
     * @summary Update a metric type
     * @param {string} id 
     * @param {MetricTypesIdPatchRequest} metricTypesIdPatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    metricTypesIdPatchRaw(requestParameters: MetricTypesIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricTypeRes>>;

    /**
     * Updates an existing metric type
     * Update a metric type
     */
    metricTypesIdPatch(requestParameters: MetricTypesIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricTypeRes>;

    /**
     * Creates a new metric type
     * @summary Create a metric type
     * @param {MetricTypeReq} metricTypeReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    metricTypesPostRaw(requestParameters: MetricTypesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricTypeRes>>;

    /**
     * Creates a new metric type
     * Create a metric type
     */
    metricTypesPost(requestParameters: MetricTypesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricTypeRes>;

}

/**
 * 
 */
export class MetricsApi extends runtime.BaseAPI implements MetricsApiInterface {

    /**
     * Retrieves a paginated list of metric entries
     * List metric entries
     */
    async metricEntriesGetRaw(requestParameters: MetricEntriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricEntriesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/metric-entries`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricEntriesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of metric entries
     * List metric entries
     */
    async metricEntriesGet(requestParameters: MetricEntriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricEntriesGet200Response> {
        const response = await this.metricEntriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new metric entry
     * Create a metric entry
     */
    async metricEntriesPostRaw(requestParameters: MetricEntriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricEntryRes>> {
        if (requestParameters['metricEntryReq'] == null) {
            throw new runtime.RequiredError(
                'metricEntryReq',
                'Required parameter "metricEntryReq" was null or undefined when calling metricEntriesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/metric-entries`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetricEntryReqToJSON(requestParameters['metricEntryReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricEntryResFromJSON(jsonValue));
    }

    /**
     * Creates a new metric entry
     * Create a metric entry
     */
    async metricEntriesPost(requestParameters: MetricEntriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricEntryRes> {
        const response = await this.metricEntriesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of metric types
     * List metric types
     */
    async metricTypesGetRaw(requestParameters: MetricTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricTypesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/metric-types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricTypesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of metric types
     * List metric types
     */
    async metricTypesGet(requestParameters: MetricTypesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricTypesGet200Response> {
        const response = await this.metricTypesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a metric type by ID
     * Delete a metric type
     */
    async metricTypesIdDeleteRaw(requestParameters: MetricTypesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling metricTypesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/metric-types/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a metric type by ID
     * Delete a metric type
     */
    async metricTypesIdDelete(requestParameters: MetricTypesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.metricTypesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific metric type by ID
     * Get a metric type
     */
    async metricTypesIdGetRaw(requestParameters: MetricTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricTypeRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling metricTypesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/metric-types/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricTypeResFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific metric type by ID
     * Get a metric type
     */
    async metricTypesIdGet(requestParameters: MetricTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricTypeRes> {
        const response = await this.metricTypesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing metric type
     * Update a metric type
     */
    async metricTypesIdPatchRaw(requestParameters: MetricTypesIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricTypeRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling metricTypesIdPatch().'
            );
        }

        if (requestParameters['metricTypesIdPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'metricTypesIdPatchRequest',
                'Required parameter "metricTypesIdPatchRequest" was null or undefined when calling metricTypesIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/metric-types/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MetricTypesIdPatchRequestToJSON(requestParameters['metricTypesIdPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricTypeResFromJSON(jsonValue));
    }

    /**
     * Updates an existing metric type
     * Update a metric type
     */
    async metricTypesIdPatch(requestParameters: MetricTypesIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricTypeRes> {
        const response = await this.metricTypesIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new metric type
     * Create a metric type
     */
    async metricTypesPostRaw(requestParameters: MetricTypesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricTypeRes>> {
        if (requestParameters['metricTypeReq'] == null) {
            throw new runtime.RequiredError(
                'metricTypeReq',
                'Required parameter "metricTypeReq" was null or undefined when calling metricTypesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/metric-types`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetricTypeReqToJSON(requestParameters['metricTypeReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricTypeResFromJSON(jsonValue));
    }

    /**
     * Creates a new metric type
     * Create a metric type
     */
    async metricTypesPost(requestParameters: MetricTypesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricTypeRes> {
        const response = await this.metricTypesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
