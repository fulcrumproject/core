/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorRes,
  ServiceGroupReq,
  ServiceGroupRes,
  ServiceGroupsGet200Response,
  ServiceReq,
  ServiceRes,
  ServiceTypeRes,
  ServiceTypesGet200Response,
  ServicesGet200Response,
  ServicesIdPatchRequest,
  ServicesPost400Response,
  ValidatePropertiesReq,
  ValidatePropertiesRes,
} from '../models/index';
import {
    ErrorResFromJSON,
    ErrorResToJSON,
    ServiceGroupReqFromJSON,
    ServiceGroupReqToJSON,
    ServiceGroupResFromJSON,
    ServiceGroupResToJSON,
    ServiceGroupsGet200ResponseFromJSON,
    ServiceGroupsGet200ResponseToJSON,
    ServiceReqFromJSON,
    ServiceReqToJSON,
    ServiceResFromJSON,
    ServiceResToJSON,
    ServiceTypeResFromJSON,
    ServiceTypeResToJSON,
    ServiceTypesGet200ResponseFromJSON,
    ServiceTypesGet200ResponseToJSON,
    ServicesGet200ResponseFromJSON,
    ServicesGet200ResponseToJSON,
    ServicesIdPatchRequestFromJSON,
    ServicesIdPatchRequestToJSON,
    ServicesPost400ResponseFromJSON,
    ServicesPost400ResponseToJSON,
    ValidatePropertiesReqFromJSON,
    ValidatePropertiesReqToJSON,
    ValidatePropertiesResFromJSON,
    ValidatePropertiesResToJSON,
} from '../models/index';

export interface ServiceGroupsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ServiceGroupsIdDeleteRequest {
    id: string;
}

export interface ServiceGroupsIdGetRequest {
    id: string;
}

export interface ServiceGroupsIdPatchRequest {
    id: string;
    serviceGroupReq: ServiceGroupReq;
}

export interface ServiceGroupsPostRequest {
    serviceGroupReq: ServiceGroupReq;
}

export interface ServiceTypesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ServiceTypesIdGetRequest {
    id: string;
}

export interface ServiceTypesIdValidatePostRequest {
    id: string;
    validatePropertiesReq: ValidatePropertiesReq;
}

export interface ServicesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface ServicesIdDeleteRequest {
    id: string;
}

export interface ServicesIdGetRequest {
    id: string;
}

export interface ServicesIdPatchOperationRequest {
    id: string;
    servicesIdPatchRequest: ServicesIdPatchRequest;
}

export interface ServicesIdRetryPostRequest {
    id: string;
}

export interface ServicesIdStartPostRequest {
    id: string;
}

export interface ServicesIdStopPostRequest {
    id: string;
}

export interface ServicesPostRequest {
    serviceReq: ServiceReq;
}

/**
 * ServicesApi - interface
 * 
 * @export
 * @interface ServicesApiInterface
 */
export interface ServicesApiInterface {
    /**
     * Retrieves a paginated list of service groups
     * @summary List service groups
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    serviceGroupsGetRaw(requestParameters: ServiceGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupsGet200Response>>;

    /**
     * Retrieves a paginated list of service groups
     * List service groups
     */
    serviceGroupsGet(requestParameters: ServiceGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupsGet200Response>;

    /**
     * Deletes a service group by ID
     * @summary Delete a service group
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    serviceGroupsIdDeleteRaw(requestParameters: ServiceGroupsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a service group by ID
     * Delete a service group
     */
    serviceGroupsIdDelete(requestParameters: ServiceGroupsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a specific service group by ID
     * @summary Get a service group
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    serviceGroupsIdGetRaw(requestParameters: ServiceGroupsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupRes>>;

    /**
     * Retrieves a specific service group by ID
     * Get a service group
     */
    serviceGroupsIdGet(requestParameters: ServiceGroupsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupRes>;

    /**
     * Updates an existing service group
     * @summary Update a service group
     * @param {string} id 
     * @param {ServiceGroupReq} serviceGroupReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    serviceGroupsIdPatchRaw(requestParameters: ServiceGroupsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupRes>>;

    /**
     * Updates an existing service group
     * Update a service group
     */
    serviceGroupsIdPatch(requestParameters: ServiceGroupsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupRes>;

    /**
     * Creates a new service group
     * @summary Create a service group
     * @param {ServiceGroupReq} serviceGroupReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    serviceGroupsPostRaw(requestParameters: ServiceGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupRes>>;

    /**
     * Creates a new service group
     * Create a service group
     */
    serviceGroupsPost(requestParameters: ServiceGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupRes>;

    /**
     * Retrieves a paginated list of service types
     * @summary List service types
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    serviceTypesGetRaw(requestParameters: ServiceTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceTypesGet200Response>>;

    /**
     * Retrieves a paginated list of service types
     * List service types
     */
    serviceTypesGet(requestParameters: ServiceTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceTypesGet200Response>;

    /**
     * Retrieves a specific service type by ID
     * @summary Get a service type
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    serviceTypesIdGetRaw(requestParameters: ServiceTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceTypeRes>>;

    /**
     * Retrieves a specific service type by ID
     * Get a service type
     */
    serviceTypesIdGet(requestParameters: ServiceTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceTypeRes>;

    /**
     * Validates service properties against the service type\'s property schema
     * @summary Validate service properties
     * @param {string} id 
     * @param {ValidatePropertiesReq} validatePropertiesReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    serviceTypesIdValidatePostRaw(requestParameters: ServiceTypesIdValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidatePropertiesRes>>;

    /**
     * Validates service properties against the service type\'s property schema
     * Validate service properties
     */
    serviceTypesIdValidatePost(requestParameters: ServiceTypesIdValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidatePropertiesRes>;

    /**
     * Retrieves a paginated list of services
     * @summary List services
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    servicesGetRaw(requestParameters: ServicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServicesGet200Response>>;

    /**
     * Retrieves a paginated list of services
     * List services
     */
    servicesGet(requestParameters: ServicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServicesGet200Response>;

    /**
     * Deletes a service by ID
     * @summary Delete a service
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    servicesIdDeleteRaw(requestParameters: ServicesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a service by ID
     * Delete a service
     */
    servicesIdDelete(requestParameters: ServicesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a specific service by ID
     * @summary Get a service
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    servicesIdGetRaw(requestParameters: ServicesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRes>>;

    /**
     * Retrieves a specific service by ID
     * Get a service
     */
    servicesIdGet(requestParameters: ServicesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRes>;

    /**
     * Updates an existing service
     * @summary Update a service
     * @param {string} id 
     * @param {ServicesIdPatchRequest} servicesIdPatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    servicesIdPatchRaw(requestParameters: ServicesIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRes>>;

    /**
     * Updates an existing service
     * Update a service
     */
    servicesIdPatch(requestParameters: ServicesIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRes>;

    /**
     * Retries the last failed operation on a service
     * @summary Retry a failed service operation
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    servicesIdRetryPostRaw(requestParameters: ServicesIdRetryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Retries the last failed operation on a service
     * Retry a failed service operation
     */
    servicesIdRetryPost(requestParameters: ServicesIdRetryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Starts a service by ID
     * @summary Start a service
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    servicesIdStartPostRaw(requestParameters: ServicesIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Starts a service by ID
     * Start a service
     */
    servicesIdStartPost(requestParameters: ServicesIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Stops a service by ID
     * @summary Stop a service
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    servicesIdStopPostRaw(requestParameters: ServicesIdStopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Stops a service by ID
     * Stop a service
     */
    servicesIdStopPost(requestParameters: ServicesIdStopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Creates a new service
     * @summary Create a service
     * @param {ServiceReq} serviceReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApiInterface
     */
    servicesPostRaw(requestParameters: ServicesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRes>>;

    /**
     * Creates a new service
     * Create a service
     */
    servicesPost(requestParameters: ServicesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRes>;

}

/**
 * 
 */
export class ServicesApi extends runtime.BaseAPI implements ServicesApiInterface {

    /**
     * Retrieves a paginated list of service groups
     * List service groups
     */
    async serviceGroupsGetRaw(requestParameters: ServiceGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/service-groups`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceGroupsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of service groups
     * List service groups
     */
    async serviceGroupsGet(requestParameters: ServiceGroupsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupsGet200Response> {
        const response = await this.serviceGroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a service group by ID
     * Delete a service group
     */
    async serviceGroupsIdDeleteRaw(requestParameters: ServiceGroupsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceGroupsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/service-groups/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a service group by ID
     * Delete a service group
     */
    async serviceGroupsIdDelete(requestParameters: ServiceGroupsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.serviceGroupsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific service group by ID
     * Get a service group
     */
    async serviceGroupsIdGetRaw(requestParameters: ServiceGroupsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceGroupsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/service-groups/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceGroupResFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific service group by ID
     * Get a service group
     */
    async serviceGroupsIdGet(requestParameters: ServiceGroupsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupRes> {
        const response = await this.serviceGroupsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing service group
     * Update a service group
     */
    async serviceGroupsIdPatchRaw(requestParameters: ServiceGroupsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceGroupsIdPatch().'
            );
        }

        if (requestParameters['serviceGroupReq'] == null) {
            throw new runtime.RequiredError(
                'serviceGroupReq',
                'Required parameter "serviceGroupReq" was null or undefined when calling serviceGroupsIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/service-groups/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceGroupReqToJSON(requestParameters['serviceGroupReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceGroupResFromJSON(jsonValue));
    }

    /**
     * Updates an existing service group
     * Update a service group
     */
    async serviceGroupsIdPatch(requestParameters: ServiceGroupsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupRes> {
        const response = await this.serviceGroupsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new service group
     * Create a service group
     */
    async serviceGroupsPostRaw(requestParameters: ServiceGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceGroupRes>> {
        if (requestParameters['serviceGroupReq'] == null) {
            throw new runtime.RequiredError(
                'serviceGroupReq',
                'Required parameter "serviceGroupReq" was null or undefined when calling serviceGroupsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/service-groups`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceGroupReqToJSON(requestParameters['serviceGroupReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceGroupResFromJSON(jsonValue));
    }

    /**
     * Creates a new service group
     * Create a service group
     */
    async serviceGroupsPost(requestParameters: ServiceGroupsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceGroupRes> {
        const response = await this.serviceGroupsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of service types
     * List service types
     */
    async serviceTypesGetRaw(requestParameters: ServiceTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceTypesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/service-types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceTypesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of service types
     * List service types
     */
    async serviceTypesGet(requestParameters: ServiceTypesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceTypesGet200Response> {
        const response = await this.serviceTypesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific service type by ID
     * Get a service type
     */
    async serviceTypesIdGetRaw(requestParameters: ServiceTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceTypeRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceTypesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/service-types/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceTypeResFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific service type by ID
     * Get a service type
     */
    async serviceTypesIdGet(requestParameters: ServiceTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceTypeRes> {
        const response = await this.serviceTypesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates service properties against the service type\'s property schema
     * Validate service properties
     */
    async serviceTypesIdValidatePostRaw(requestParameters: ServiceTypesIdValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidatePropertiesRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling serviceTypesIdValidatePost().'
            );
        }

        if (requestParameters['validatePropertiesReq'] == null) {
            throw new runtime.RequiredError(
                'validatePropertiesReq',
                'Required parameter "validatePropertiesReq" was null or undefined when calling serviceTypesIdValidatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/service-types/{id}/validate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidatePropertiesReqToJSON(requestParameters['validatePropertiesReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatePropertiesResFromJSON(jsonValue));
    }

    /**
     * Validates service properties against the service type\'s property schema
     * Validate service properties
     */
    async serviceTypesIdValidatePost(requestParameters: ServiceTypesIdValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidatePropertiesRes> {
        const response = await this.serviceTypesIdValidatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of services
     * List services
     */
    async servicesGetRaw(requestParameters: ServicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServicesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/services`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServicesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of services
     * List services
     */
    async servicesGet(requestParameters: ServicesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServicesGet200Response> {
        const response = await this.servicesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a service by ID
     * Delete a service
     */
    async servicesIdDeleteRaw(requestParameters: ServicesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling servicesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/services/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a service by ID
     * Delete a service
     */
    async servicesIdDelete(requestParameters: ServicesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific service by ID
     * Get a service
     */
    async servicesIdGetRaw(requestParameters: ServicesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling servicesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/services/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceResFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific service by ID
     * Get a service
     */
    async servicesIdGet(requestParameters: ServicesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRes> {
        const response = await this.servicesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing service
     * Update a service
     */
    async servicesIdPatchRaw(requestParameters: ServicesIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling servicesIdPatch().'
            );
        }

        if (requestParameters['servicesIdPatchRequest'] == null) {
            throw new runtime.RequiredError(
                'servicesIdPatchRequest',
                'Required parameter "servicesIdPatchRequest" was null or undefined when calling servicesIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/services/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesIdPatchRequestToJSON(requestParameters['servicesIdPatchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceResFromJSON(jsonValue));
    }

    /**
     * Updates an existing service
     * Update a service
     */
    async servicesIdPatch(requestParameters: ServicesIdPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRes> {
        const response = await this.servicesIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retries the last failed operation on a service
     * Retry a failed service operation
     */
    async servicesIdRetryPostRaw(requestParameters: ServicesIdRetryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling servicesIdRetryPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/services/{id}/retry`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retries the last failed operation on a service
     * Retry a failed service operation
     */
    async servicesIdRetryPost(requestParameters: ServicesIdRetryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesIdRetryPostRaw(requestParameters, initOverrides);
    }

    /**
     * Starts a service by ID
     * Start a service
     */
    async servicesIdStartPostRaw(requestParameters: ServicesIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling servicesIdStartPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/services/{id}/start`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Starts a service by ID
     * Start a service
     */
    async servicesIdStartPost(requestParameters: ServicesIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesIdStartPostRaw(requestParameters, initOverrides);
    }

    /**
     * Stops a service by ID
     * Stop a service
     */
    async servicesIdStopPostRaw(requestParameters: ServicesIdStopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling servicesIdStopPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/services/{id}/stop`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Stops a service by ID
     * Stop a service
     */
    async servicesIdStopPost(requestParameters: ServicesIdStopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.servicesIdStopPostRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new service
     * Create a service
     */
    async servicesPostRaw(requestParameters: ServicesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRes>> {
        if (requestParameters['serviceReq'] == null) {
            throw new runtime.RequiredError(
                'serviceReq',
                'Required parameter "serviceReq" was null or undefined when calling servicesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/services`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceReqToJSON(requestParameters['serviceReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceResFromJSON(jsonValue));
    }

    /**
     * Creates a new service
     * Create a service
     */
    async servicesPost(requestParameters: ServicesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRes> {
        const response = await this.servicesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
