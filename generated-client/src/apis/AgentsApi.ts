/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentCreateRes,
  AgentReq,
  AgentRes,
  AgentTypeRes,
  AgentTypesGet200Response,
  AgentsGet200Response,
  AgentsMeStatusPutRequest,
  ErrorRes,
} from '../models/index';
import {
    AgentCreateResFromJSON,
    AgentCreateResToJSON,
    AgentReqFromJSON,
    AgentReqToJSON,
    AgentResFromJSON,
    AgentResToJSON,
    AgentTypeResFromJSON,
    AgentTypeResToJSON,
    AgentTypesGet200ResponseFromJSON,
    AgentTypesGet200ResponseToJSON,
    AgentsGet200ResponseFromJSON,
    AgentsGet200ResponseToJSON,
    AgentsMeStatusPutRequestFromJSON,
    AgentsMeStatusPutRequestToJSON,
    ErrorResFromJSON,
    ErrorResToJSON,
} from '../models/index';

export interface AgentTypesGetRequest {
    page?: number;
    pageSize?: number;
}

export interface AgentTypesIdGetRequest {
    id: string;
}

export interface AgentsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface AgentsIdDeleteRequest {
    id: string;
}

export interface AgentsIdGetRequest {
    id: string;
}

export interface AgentsIdPatchRequest {
    id: string;
    agentReq: AgentReq;
}

export interface AgentsMeStatusPutOperationRequest {
    agentsMeStatusPutRequest: AgentsMeStatusPutRequest;
}

export interface AgentsPostRequest {
    agentReq: AgentReq;
}

/**
 * AgentsApi - interface
 * 
 * @export
 * @interface AgentsApiInterface
 */
export interface AgentsApiInterface {
    /**
     * Retrieves a paginated list of agent types
     * @summary List agent types
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    agentTypesGetRaw(requestParameters: AgentTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentTypesGet200Response>>;

    /**
     * Retrieves a paginated list of agent types
     * List agent types
     */
    agentTypesGet(requestParameters: AgentTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentTypesGet200Response>;

    /**
     * Retrieves a specific agent type by ID
     * @summary Get an agent type
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    agentTypesIdGetRaw(requestParameters: AgentTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentTypeRes>>;

    /**
     * Retrieves a specific agent type by ID
     * Get an agent type
     */
    agentTypesIdGet(requestParameters: AgentTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentTypeRes>;

    /**
     * Retrieves a paginated list of agents
     * @summary List agents
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    agentsGetRaw(requestParameters: AgentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentsGet200Response>>;

    /**
     * Retrieves a paginated list of agents
     * List agents
     */
    agentsGet(requestParameters: AgentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentsGet200Response>;

    /**
     * Deletes an agent by ID
     * @summary Delete an agent
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    agentsIdDeleteRaw(requestParameters: AgentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes an agent by ID
     * Delete an agent
     */
    agentsIdDelete(requestParameters: AgentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a specific agent by ID
     * @summary Get an agent
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    agentsIdGetRaw(requestParameters: AgentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentRes>>;

    /**
     * Retrieves a specific agent by ID
     * Get an agent
     */
    agentsIdGet(requestParameters: AgentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentRes>;

    /**
     * Updates an existing agent
     * @summary Update an agent
     * @param {string} id 
     * @param {AgentReq} agentReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    agentsIdPatchRaw(requestParameters: AgentsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentRes>>;

    /**
     * Updates an existing agent
     * Update an agent
     */
    agentsIdPatch(requestParameters: AgentsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentRes>;

    /**
     * Retrieves information about the currently authenticated agent
     * @summary Get current agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    agentsMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentRes>>;

    /**
     * Retrieves information about the currently authenticated agent
     * Get current agent
     */
    agentsMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentRes>;

    /**
     * Updates the status of the authenticated agent
     * @summary Update agent status
     * @param {AgentsMeStatusPutRequest} agentsMeStatusPutRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    agentsMeStatusPutRaw(requestParameters: AgentsMeStatusPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentRes>>;

    /**
     * Updates the status of the authenticated agent
     * Update agent status
     */
    agentsMeStatusPut(requestParameters: AgentsMeStatusPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentRes>;

    /**
     * Creates a new agent and returns the agent data with an authentication token
     * @summary Create an agent
     * @param {AgentReq} agentReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    agentsPostRaw(requestParameters: AgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentCreateRes>>;

    /**
     * Creates a new agent and returns the agent data with an authentication token
     * Create an agent
     */
    agentsPost(requestParameters: AgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentCreateRes>;

}

/**
 * 
 */
export class AgentsApi extends runtime.BaseAPI implements AgentsApiInterface {

    /**
     * Retrieves a paginated list of agent types
     * List agent types
     */
    async agentTypesGetRaw(requestParameters: AgentTypesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentTypesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/agent-types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentTypesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of agent types
     * List agent types
     */
    async agentTypesGet(requestParameters: AgentTypesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentTypesGet200Response> {
        const response = await this.agentTypesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific agent type by ID
     * Get an agent type
     */
    async agentTypesIdGetRaw(requestParameters: AgentTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentTypeRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agentTypesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/agent-types/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentTypeResFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific agent type by ID
     * Get an agent type
     */
    async agentTypesIdGet(requestParameters: AgentTypesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentTypeRes> {
        const response = await this.agentTypesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of agents
     * List agents
     */
    async agentsGetRaw(requestParameters: AgentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/agents`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of agents
     * List agents
     */
    async agentsGet(requestParameters: AgentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentsGet200Response> {
        const response = await this.agentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an agent by ID
     * Delete an agent
     */
    async agentsIdDeleteRaw(requestParameters: AgentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agentsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/agents/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an agent by ID
     * Delete an agent
     */
    async agentsIdDelete(requestParameters: AgentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.agentsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific agent by ID
     * Get an agent
     */
    async agentsIdGetRaw(requestParameters: AgentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agentsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/agents/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific agent by ID
     * Get an agent
     */
    async agentsIdGet(requestParameters: AgentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentRes> {
        const response = await this.agentsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing agent
     * Update an agent
     */
    async agentsIdPatchRaw(requestParameters: AgentsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentRes>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling agentsIdPatch().'
            );
        }

        if (requestParameters['agentReq'] == null) {
            throw new runtime.RequiredError(
                'agentReq',
                'Required parameter "agentReq" was null or undefined when calling agentsIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/agents/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AgentReqToJSON(requestParameters['agentReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResFromJSON(jsonValue));
    }

    /**
     * Updates an existing agent
     * Update an agent
     */
    async agentsIdPatch(requestParameters: AgentsIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentRes> {
        const response = await this.agentsIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves information about the currently authenticated agent
     * Get current agent
     */
    async agentsMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentRes>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/agents/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResFromJSON(jsonValue));
    }

    /**
     * Retrieves information about the currently authenticated agent
     * Get current agent
     */
    async agentsMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentRes> {
        const response = await this.agentsMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the status of the authenticated agent
     * Update agent status
     */
    async agentsMeStatusPutRaw(requestParameters: AgentsMeStatusPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentRes>> {
        if (requestParameters['agentsMeStatusPutRequest'] == null) {
            throw new runtime.RequiredError(
                'agentsMeStatusPutRequest',
                'Required parameter "agentsMeStatusPutRequest" was null or undefined when calling agentsMeStatusPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/agents/me/status`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentsMeStatusPutRequestToJSON(requestParameters['agentsMeStatusPutRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResFromJSON(jsonValue));
    }

    /**
     * Updates the status of the authenticated agent
     * Update agent status
     */
    async agentsMeStatusPut(requestParameters: AgentsMeStatusPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentRes> {
        const response = await this.agentsMeStatusPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new agent and returns the agent data with an authentication token
     * Create an agent
     */
    async agentsPostRaw(requestParameters: AgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentCreateRes>> {
        if (requestParameters['agentReq'] == null) {
            throw new runtime.RequiredError(
                'agentReq',
                'Required parameter "agentReq" was null or undefined when calling agentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/agents`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentReqToJSON(requestParameters['agentReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentCreateResFromJSON(jsonValue));
    }

    /**
     * Creates a new agent and returns the agent data with an authentication token
     * Create an agent
     */
    async agentsPost(requestParameters: AgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentCreateRes> {
        const response = await this.agentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
