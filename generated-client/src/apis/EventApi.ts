/* tslint:disable */
/* eslint-disable */
/**
 * Fulcrum Core API
 * A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorRes,
  EventAckReq,
  EventAckRes,
  EventLeaseReq,
  EventLeaseRes,
  EventsGet200Response,
} from '../models/index';
import {
    ErrorResFromJSON,
    ErrorResToJSON,
    EventAckReqFromJSON,
    EventAckReqToJSON,
    EventAckResFromJSON,
    EventAckResToJSON,
    EventLeaseReqFromJSON,
    EventLeaseReqToJSON,
    EventLeaseResFromJSON,
    EventLeaseResToJSON,
    EventsGet200ResponseFromJSON,
    EventsGet200ResponseToJSON,
} from '../models/index';

export interface EventsAckPostRequest {
    eventAckReq: EventAckReq;
}

export interface EventsGetRequest {
    page?: number;
    pageSize?: number;
}

export interface EventsLeasePostRequest {
    eventLeaseReq: EventLeaseReq;
}

/**
 * EventApi - interface
 * 
 * @export
 * @interface EventApiInterface
 */
export interface EventApiInterface {
    /**
     * Acknowledge processed events and update progress (Option B - does not renew lease)
     * @summary Acknowledge processed events
     * @param {EventAckReq} eventAckReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    eventsAckPostRaw(requestParameters: EventsAckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventAckRes>>;

    /**
     * Acknowledge processed events and update progress (Option B - does not renew lease)
     * Acknowledge processed events
     */
    eventsAckPost(requestParameters: EventsAckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventAckRes>;

    /**
     * Retrieves a paginated list of events
     * @summary List events
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    eventsGetRaw(requestParameters: EventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsGet200Response>>;

    /**
     * Retrieves a paginated list of events
     * List events
     */
    eventsGet(requestParameters: EventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsGet200Response>;

    /**
     * Acquire or renew a lease for event processing and fetch events in chronological order
     * @summary Acquire event lease and fetch events
     * @param {EventLeaseReq} eventLeaseReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    eventsLeasePostRaw(requestParameters: EventsLeasePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventLeaseRes>>;

    /**
     * Acquire or renew a lease for event processing and fetch events in chronological order
     * Acquire event lease and fetch events
     */
    eventsLeasePost(requestParameters: EventsLeasePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventLeaseRes>;

}

/**
 * 
 */
export class EventApi extends runtime.BaseAPI implements EventApiInterface {

    /**
     * Acknowledge processed events and update progress (Option B - does not renew lease)
     * Acknowledge processed events
     */
    async eventsAckPostRaw(requestParameters: EventsAckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventAckRes>> {
        if (requestParameters['eventAckReq'] == null) {
            throw new runtime.RequiredError(
                'eventAckReq',
                'Required parameter "eventAckReq" was null or undefined when calling eventsAckPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/events/ack`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventAckReqToJSON(requestParameters['eventAckReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventAckResFromJSON(jsonValue));
    }

    /**
     * Acknowledge processed events and update progress (Option B - does not renew lease)
     * Acknowledge processed events
     */
    async eventsAckPost(requestParameters: EventsAckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventAckRes> {
        const response = await this.eventsAckPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a paginated list of events
     * List events
     */
    async eventsGetRaw(requestParameters: EventsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/events`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves a paginated list of events
     * List events
     */
    async eventsGet(requestParameters: EventsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsGet200Response> {
        const response = await this.eventsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Acquire or renew a lease for event processing and fetch events in chronological order
     * Acquire event lease and fetch events
     */
    async eventsLeasePostRaw(requestParameters: EventsLeasePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventLeaseRes>> {
        if (requestParameters['eventLeaseReq'] == null) {
            throw new runtime.RequiredError(
                'eventLeaseReq',
                'Required parameter "eventLeaseReq" was null or undefined when calling eventsLeasePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("BearerAuth", []);
        }


        let urlPath = `/events/lease`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventLeaseReqToJSON(requestParameters['eventLeaseReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventLeaseResFromJSON(jsonValue));
    }

    /**
     * Acquire or renew a lease for event processing and fetch events in chronological order
     * Acquire event lease and fetch events
     */
    async eventsLeasePost(requestParameters: EventsLeasePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventLeaseRes> {
        const response = await this.eventsLeasePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
