// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newAgent(db *gorm.DB, opts ...gen.DOOption) agent {
	_agent := agent{}

	_agent.agentDo.UseDB(db, opts...)
	_agent.agentDo.UseModel(&domain.Agent{})

	tableName := _agent.agentDo.TableName()
	_agent.ALL = field.NewAsterisk(tableName)
	_agent.ID = field.NewField(tableName, "id")
	_agent.CreatedAt = field.NewTime(tableName, "created_at")
	_agent.UpdatedAt = field.NewTime(tableName, "updated_at")
	_agent.Name = field.NewString(tableName, "name")
	_agent.Status = field.NewString(tableName, "status")
	_agent.LastStatusUpdate = field.NewTime(tableName, "last_status_update")
	_agent.Tags = field.NewField(tableName, "tags")
	_agent.Configuration = field.NewField(tableName, "configuration")
	_agent.AgentTypeID = field.NewField(tableName, "agent_type_id")
	_agent.ProviderID = field.NewField(tableName, "provider_id")
	_agent.ServicePoolSetID = field.NewField(tableName, "service_pool_set_id")
	_agent.AgentType = agentBelongsToAgentType{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AgentType", "domain.AgentType"),
		ServiceTypes: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("AgentType.ServiceTypes", "domain.ServiceType"),
		},
	}

	_agent.Provider = agentBelongsToProvider{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Provider", "domain.Participant"),
		Agents: struct {
			field.RelationField
			AgentType struct {
				field.RelationField
			}
			Provider struct {
				field.RelationField
			}
			ServicePoolSet struct {
				field.RelationField
				Provider struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Provider.Agents", "domain.Agent"),
			AgentType: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Provider.Agents.AgentType", "domain.AgentType"),
			},
			Provider: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Provider.Agents.Provider", "domain.Participant"),
			},
			ServicePoolSet: struct {
				field.RelationField
				Provider struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Provider.Agents.ServicePoolSet", "domain.ServicePoolSet"),
				Provider: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Provider.Agents.ServicePoolSet.Provider", "domain.Participant"),
				},
			},
		},
	}

	_agent.ServicePoolSet = agentBelongsToServicePoolSet{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ServicePoolSet", "domain.ServicePoolSet"),
	}

	_agent.fillFieldMap()

	return _agent
}

type agent struct {
	agentDo agentDo

	ALL              field.Asterisk
	ID               field.Field
	CreatedAt        field.Time
	UpdatedAt        field.Time
	Name             field.String
	Status           field.String
	LastStatusUpdate field.Time
	Tags             field.Field
	Configuration    field.Field
	AgentTypeID      field.Field
	ProviderID       field.Field
	ServicePoolSetID field.Field
	AgentType        agentBelongsToAgentType

	Provider agentBelongsToProvider

	ServicePoolSet agentBelongsToServicePoolSet

	fieldMap map[string]field.Expr
}

func (a agent) Table(newTableName string) *agent {
	a.agentDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agent) As(alias string) *agent {
	a.agentDo.DO = *(a.agentDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agent) updateTableName(table string) *agent {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewField(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.Name = field.NewString(table, "name")
	a.Status = field.NewString(table, "status")
	a.LastStatusUpdate = field.NewTime(table, "last_status_update")
	a.Tags = field.NewField(table, "tags")
	a.Configuration = field.NewField(table, "configuration")
	a.AgentTypeID = field.NewField(table, "agent_type_id")
	a.ProviderID = field.NewField(table, "provider_id")
	a.ServicePoolSetID = field.NewField(table, "service_pool_set_id")

	a.fillFieldMap()

	return a
}

func (a *agent) WithContext(ctx context.Context) IAgentDo { return a.agentDo.WithContext(ctx) }

func (a agent) TableName() string { return a.agentDo.TableName() }

func (a agent) Alias() string { return a.agentDo.Alias() }

func (a agent) Columns(cols ...field.Expr) gen.Columns { return a.agentDo.Columns(cols...) }

func (a *agent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agent) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["name"] = a.Name
	a.fieldMap["status"] = a.Status
	a.fieldMap["last_status_update"] = a.LastStatusUpdate
	a.fieldMap["tags"] = a.Tags
	a.fieldMap["configuration"] = a.Configuration
	a.fieldMap["agent_type_id"] = a.AgentTypeID
	a.fieldMap["provider_id"] = a.ProviderID
	a.fieldMap["service_pool_set_id"] = a.ServicePoolSetID

}

func (a agent) clone(db *gorm.DB) agent {
	a.agentDo.ReplaceConnPool(db.Statement.ConnPool)
	a.AgentType.db = db.Session(&gorm.Session{Initialized: true})
	a.AgentType.db.Statement.ConnPool = db.Statement.ConnPool
	a.Provider.db = db.Session(&gorm.Session{Initialized: true})
	a.Provider.db.Statement.ConnPool = db.Statement.ConnPool
	a.ServicePoolSet.db = db.Session(&gorm.Session{Initialized: true})
	a.ServicePoolSet.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a agent) replaceDB(db *gorm.DB) agent {
	a.agentDo.ReplaceDB(db)
	a.AgentType.db = db.Session(&gorm.Session{})
	a.Provider.db = db.Session(&gorm.Session{})
	a.ServicePoolSet.db = db.Session(&gorm.Session{})
	return a
}

type agentBelongsToAgentType struct {
	db *gorm.DB

	field.RelationField

	ServiceTypes struct {
		field.RelationField
	}
}

func (a agentBelongsToAgentType) Where(conds ...field.Expr) *agentBelongsToAgentType {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a agentBelongsToAgentType) WithContext(ctx context.Context) *agentBelongsToAgentType {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a agentBelongsToAgentType) Session(session *gorm.Session) *agentBelongsToAgentType {
	a.db = a.db.Session(session)
	return &a
}

func (a agentBelongsToAgentType) Model(m *domain.Agent) *agentBelongsToAgentTypeTx {
	return &agentBelongsToAgentTypeTx{a.db.Model(m).Association(a.Name())}
}

func (a agentBelongsToAgentType) Unscoped() *agentBelongsToAgentType {
	a.db = a.db.Unscoped()
	return &a
}

type agentBelongsToAgentTypeTx struct{ tx *gorm.Association }

func (a agentBelongsToAgentTypeTx) Find() (result *domain.AgentType, err error) {
	return result, a.tx.Find(&result)
}

func (a agentBelongsToAgentTypeTx) Append(values ...*domain.AgentType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a agentBelongsToAgentTypeTx) Replace(values ...*domain.AgentType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a agentBelongsToAgentTypeTx) Delete(values ...*domain.AgentType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a agentBelongsToAgentTypeTx) Clear() error {
	return a.tx.Clear()
}

func (a agentBelongsToAgentTypeTx) Count() int64 {
	return a.tx.Count()
}

func (a agentBelongsToAgentTypeTx) Unscoped() *agentBelongsToAgentTypeTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type agentBelongsToProvider struct {
	db *gorm.DB

	field.RelationField

	Agents struct {
		field.RelationField
		AgentType struct {
			field.RelationField
		}
		Provider struct {
			field.RelationField
		}
		ServicePoolSet struct {
			field.RelationField
			Provider struct {
				field.RelationField
			}
		}
	}
}

func (a agentBelongsToProvider) Where(conds ...field.Expr) *agentBelongsToProvider {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a agentBelongsToProvider) WithContext(ctx context.Context) *agentBelongsToProvider {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a agentBelongsToProvider) Session(session *gorm.Session) *agentBelongsToProvider {
	a.db = a.db.Session(session)
	return &a
}

func (a agentBelongsToProvider) Model(m *domain.Agent) *agentBelongsToProviderTx {
	return &agentBelongsToProviderTx{a.db.Model(m).Association(a.Name())}
}

func (a agentBelongsToProvider) Unscoped() *agentBelongsToProvider {
	a.db = a.db.Unscoped()
	return &a
}

type agentBelongsToProviderTx struct{ tx *gorm.Association }

func (a agentBelongsToProviderTx) Find() (result *domain.Participant, err error) {
	return result, a.tx.Find(&result)
}

func (a agentBelongsToProviderTx) Append(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a agentBelongsToProviderTx) Replace(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a agentBelongsToProviderTx) Delete(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a agentBelongsToProviderTx) Clear() error {
	return a.tx.Clear()
}

func (a agentBelongsToProviderTx) Count() int64 {
	return a.tx.Count()
}

func (a agentBelongsToProviderTx) Unscoped() *agentBelongsToProviderTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type agentBelongsToServicePoolSet struct {
	db *gorm.DB

	field.RelationField
}

func (a agentBelongsToServicePoolSet) Where(conds ...field.Expr) *agentBelongsToServicePoolSet {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a agentBelongsToServicePoolSet) WithContext(ctx context.Context) *agentBelongsToServicePoolSet {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a agentBelongsToServicePoolSet) Session(session *gorm.Session) *agentBelongsToServicePoolSet {
	a.db = a.db.Session(session)
	return &a
}

func (a agentBelongsToServicePoolSet) Model(m *domain.Agent) *agentBelongsToServicePoolSetTx {
	return &agentBelongsToServicePoolSetTx{a.db.Model(m).Association(a.Name())}
}

func (a agentBelongsToServicePoolSet) Unscoped() *agentBelongsToServicePoolSet {
	a.db = a.db.Unscoped()
	return &a
}

type agentBelongsToServicePoolSetTx struct{ tx *gorm.Association }

func (a agentBelongsToServicePoolSetTx) Find() (result *domain.ServicePoolSet, err error) {
	return result, a.tx.Find(&result)
}

func (a agentBelongsToServicePoolSetTx) Append(values ...*domain.ServicePoolSet) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a agentBelongsToServicePoolSetTx) Replace(values ...*domain.ServicePoolSet) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a agentBelongsToServicePoolSetTx) Delete(values ...*domain.ServicePoolSet) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a agentBelongsToServicePoolSetTx) Clear() error {
	return a.tx.Clear()
}

func (a agentBelongsToServicePoolSetTx) Count() int64 {
	return a.tx.Count()
}

func (a agentBelongsToServicePoolSetTx) Unscoped() *agentBelongsToServicePoolSetTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type agentDo struct{ gen.DO }

type IAgentDo interface {
	gen.SubQuery
	Debug() IAgentDo
	WithContext(ctx context.Context) IAgentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentDo
	WriteDB() IAgentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentDo
	Not(conds ...gen.Condition) IAgentDo
	Or(conds ...gen.Condition) IAgentDo
	Select(conds ...field.Expr) IAgentDo
	Where(conds ...gen.Condition) IAgentDo
	Order(conds ...field.Expr) IAgentDo
	Distinct(cols ...field.Expr) IAgentDo
	Omit(cols ...field.Expr) IAgentDo
	Join(table schema.Tabler, on ...field.Expr) IAgentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentDo
	Group(cols ...field.Expr) IAgentDo
	Having(conds ...gen.Condition) IAgentDo
	Limit(limit int) IAgentDo
	Offset(offset int) IAgentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentDo
	Unscoped() IAgentDo
	Create(values ...*domain.Agent) error
	CreateInBatches(values []*domain.Agent, batchSize int) error
	Save(values ...*domain.Agent) error
	First() (*domain.Agent, error)
	Take() (*domain.Agent, error)
	Last() (*domain.Agent, error)
	Find() ([]*domain.Agent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Agent, err error)
	FindInBatches(result *[]*domain.Agent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.Agent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentDo
	Assign(attrs ...field.AssignExpr) IAgentDo
	Joins(fields ...field.RelationField) IAgentDo
	Preload(fields ...field.RelationField) IAgentDo
	FirstOrInit() (*domain.Agent, error)
	FirstOrCreate() (*domain.Agent, error)
	FindByPage(offset int, limit int) (result []*domain.Agent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentDo) Debug() IAgentDo {
	return a.withDO(a.DO.Debug())
}

func (a agentDo) WithContext(ctx context.Context) IAgentDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentDo) ReadDB() IAgentDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentDo) WriteDB() IAgentDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentDo) Session(config *gorm.Session) IAgentDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentDo) Clauses(conds ...clause.Expression) IAgentDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentDo) Returning(value interface{}, columns ...string) IAgentDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentDo) Not(conds ...gen.Condition) IAgentDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentDo) Or(conds ...gen.Condition) IAgentDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentDo) Select(conds ...field.Expr) IAgentDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentDo) Where(conds ...gen.Condition) IAgentDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentDo) Order(conds ...field.Expr) IAgentDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentDo) Distinct(cols ...field.Expr) IAgentDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentDo) Omit(cols ...field.Expr) IAgentDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentDo) Join(table schema.Tabler, on ...field.Expr) IAgentDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentDo) Group(cols ...field.Expr) IAgentDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentDo) Having(conds ...gen.Condition) IAgentDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentDo) Limit(limit int) IAgentDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentDo) Offset(offset int) IAgentDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentDo) Unscoped() IAgentDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentDo) Create(values ...*domain.Agent) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentDo) CreateInBatches(values []*domain.Agent, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentDo) Save(values ...*domain.Agent) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentDo) First() (*domain.Agent, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Agent), nil
	}
}

func (a agentDo) Take() (*domain.Agent, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Agent), nil
	}
}

func (a agentDo) Last() (*domain.Agent, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Agent), nil
	}
}

func (a agentDo) Find() ([]*domain.Agent, error) {
	result, err := a.DO.Find()
	return result.([]*domain.Agent), err
}

func (a agentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Agent, err error) {
	buf := make([]*domain.Agent, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentDo) FindInBatches(result *[]*domain.Agent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentDo) Attrs(attrs ...field.AssignExpr) IAgentDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentDo) Assign(attrs ...field.AssignExpr) IAgentDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentDo) Joins(fields ...field.RelationField) IAgentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentDo) Preload(fields ...field.RelationField) IAgentDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentDo) FirstOrInit() (*domain.Agent, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Agent), nil
	}
}

func (a agentDo) FirstOrCreate() (*domain.Agent, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Agent), nil
	}
}

func (a agentDo) FindByPage(offset int, limit int) (result []*domain.Agent, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentDo) Delete(models ...*domain.Agent) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentDo) withDO(do gen.Dao) *agentDo {
	a.DO = *do.(*gen.DO)
	return a
}
