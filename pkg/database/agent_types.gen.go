// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newAgentType(db *gorm.DB, opts ...gen.DOOption) agentType {
	_agentType := agentType{}

	_agentType.agentTypeDo.UseDB(db, opts...)
	_agentType.agentTypeDo.UseModel(&domain.AgentType{})

	tableName := _agentType.agentTypeDo.TableName()
	_agentType.ALL = field.NewAsterisk(tableName)
	_agentType.ID = field.NewField(tableName, "id")
	_agentType.CreatedAt = field.NewTime(tableName, "created_at")
	_agentType.UpdatedAt = field.NewTime(tableName, "updated_at")
	_agentType.Name = field.NewString(tableName, "name")
	_agentType.ConfigurationSchema = field.NewField(tableName, "configuration_schema")
	_agentType.ServiceTypes = agentTypeManyToManyServiceTypes{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ServiceTypes", "domain.ServiceType"),
	}

	_agentType.fillFieldMap()

	return _agentType
}

type agentType struct {
	agentTypeDo agentTypeDo

	ALL                 field.Asterisk
	ID                  field.Field
	CreatedAt           field.Time
	UpdatedAt           field.Time
	Name                field.String
	ConfigurationSchema field.Field
	ServiceTypes        agentTypeManyToManyServiceTypes

	fieldMap map[string]field.Expr
}

func (a agentType) Table(newTableName string) *agentType {
	a.agentTypeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentType) As(alias string) *agentType {
	a.agentTypeDo.DO = *(a.agentTypeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentType) updateTableName(table string) *agentType {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewField(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.Name = field.NewString(table, "name")
	a.ConfigurationSchema = field.NewField(table, "configuration_schema")

	a.fillFieldMap()

	return a
}

func (a *agentType) WithContext(ctx context.Context) IAgentTypeDo {
	return a.agentTypeDo.WithContext(ctx)
}

func (a agentType) TableName() string { return a.agentTypeDo.TableName() }

func (a agentType) Alias() string { return a.agentTypeDo.Alias() }

func (a agentType) Columns(cols ...field.Expr) gen.Columns { return a.agentTypeDo.Columns(cols...) }

func (a *agentType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentType) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["name"] = a.Name
	a.fieldMap["configuration_schema"] = a.ConfigurationSchema

}

func (a agentType) clone(db *gorm.DB) agentType {
	a.agentTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	a.ServiceTypes.db = db.Session(&gorm.Session{Initialized: true})
	a.ServiceTypes.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a agentType) replaceDB(db *gorm.DB) agentType {
	a.agentTypeDo.ReplaceDB(db)
	a.ServiceTypes.db = db.Session(&gorm.Session{})
	return a
}

type agentTypeManyToManyServiceTypes struct {
	db *gorm.DB

	field.RelationField
}

func (a agentTypeManyToManyServiceTypes) Where(conds ...field.Expr) *agentTypeManyToManyServiceTypes {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a agentTypeManyToManyServiceTypes) WithContext(ctx context.Context) *agentTypeManyToManyServiceTypes {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a agentTypeManyToManyServiceTypes) Session(session *gorm.Session) *agentTypeManyToManyServiceTypes {
	a.db = a.db.Session(session)
	return &a
}

func (a agentTypeManyToManyServiceTypes) Model(m *domain.AgentType) *agentTypeManyToManyServiceTypesTx {
	return &agentTypeManyToManyServiceTypesTx{a.db.Model(m).Association(a.Name())}
}

func (a agentTypeManyToManyServiceTypes) Unscoped() *agentTypeManyToManyServiceTypes {
	a.db = a.db.Unscoped()
	return &a
}

type agentTypeManyToManyServiceTypesTx struct{ tx *gorm.Association }

func (a agentTypeManyToManyServiceTypesTx) Find() (result []*domain.ServiceType, err error) {
	return result, a.tx.Find(&result)
}

func (a agentTypeManyToManyServiceTypesTx) Append(values ...*domain.ServiceType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a agentTypeManyToManyServiceTypesTx) Replace(values ...*domain.ServiceType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a agentTypeManyToManyServiceTypesTx) Delete(values ...*domain.ServiceType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a agentTypeManyToManyServiceTypesTx) Clear() error {
	return a.tx.Clear()
}

func (a agentTypeManyToManyServiceTypesTx) Count() int64 {
	return a.tx.Count()
}

func (a agentTypeManyToManyServiceTypesTx) Unscoped() *agentTypeManyToManyServiceTypesTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type agentTypeDo struct{ gen.DO }

type IAgentTypeDo interface {
	gen.SubQuery
	Debug() IAgentTypeDo
	WithContext(ctx context.Context) IAgentTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentTypeDo
	WriteDB() IAgentTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentTypeDo
	Not(conds ...gen.Condition) IAgentTypeDo
	Or(conds ...gen.Condition) IAgentTypeDo
	Select(conds ...field.Expr) IAgentTypeDo
	Where(conds ...gen.Condition) IAgentTypeDo
	Order(conds ...field.Expr) IAgentTypeDo
	Distinct(cols ...field.Expr) IAgentTypeDo
	Omit(cols ...field.Expr) IAgentTypeDo
	Join(table schema.Tabler, on ...field.Expr) IAgentTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentTypeDo
	Group(cols ...field.Expr) IAgentTypeDo
	Having(conds ...gen.Condition) IAgentTypeDo
	Limit(limit int) IAgentTypeDo
	Offset(offset int) IAgentTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentTypeDo
	Unscoped() IAgentTypeDo
	Create(values ...*domain.AgentType) error
	CreateInBatches(values []*domain.AgentType, batchSize int) error
	Save(values ...*domain.AgentType) error
	First() (*domain.AgentType, error)
	Take() (*domain.AgentType, error)
	Last() (*domain.AgentType, error)
	Find() ([]*domain.AgentType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.AgentType, err error)
	FindInBatches(result *[]*domain.AgentType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.AgentType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentTypeDo
	Assign(attrs ...field.AssignExpr) IAgentTypeDo
	Joins(fields ...field.RelationField) IAgentTypeDo
	Preload(fields ...field.RelationField) IAgentTypeDo
	FirstOrInit() (*domain.AgentType, error)
	FirstOrCreate() (*domain.AgentType, error)
	FindByPage(offset int, limit int) (result []*domain.AgentType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentTypeDo) Debug() IAgentTypeDo {
	return a.withDO(a.DO.Debug())
}

func (a agentTypeDo) WithContext(ctx context.Context) IAgentTypeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentTypeDo) ReadDB() IAgentTypeDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentTypeDo) WriteDB() IAgentTypeDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentTypeDo) Session(config *gorm.Session) IAgentTypeDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentTypeDo) Clauses(conds ...clause.Expression) IAgentTypeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentTypeDo) Returning(value interface{}, columns ...string) IAgentTypeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentTypeDo) Not(conds ...gen.Condition) IAgentTypeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentTypeDo) Or(conds ...gen.Condition) IAgentTypeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentTypeDo) Select(conds ...field.Expr) IAgentTypeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentTypeDo) Where(conds ...gen.Condition) IAgentTypeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentTypeDo) Order(conds ...field.Expr) IAgentTypeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentTypeDo) Distinct(cols ...field.Expr) IAgentTypeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentTypeDo) Omit(cols ...field.Expr) IAgentTypeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentTypeDo) Join(table schema.Tabler, on ...field.Expr) IAgentTypeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentTypeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentTypeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentTypeDo) Group(cols ...field.Expr) IAgentTypeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentTypeDo) Having(conds ...gen.Condition) IAgentTypeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentTypeDo) Limit(limit int) IAgentTypeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentTypeDo) Offset(offset int) IAgentTypeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentTypeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentTypeDo) Unscoped() IAgentTypeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentTypeDo) Create(values ...*domain.AgentType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentTypeDo) CreateInBatches(values []*domain.AgentType, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentTypeDo) Save(values ...*domain.AgentType) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentTypeDo) First() (*domain.AgentType, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.AgentType), nil
	}
}

func (a agentTypeDo) Take() (*domain.AgentType, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.AgentType), nil
	}
}

func (a agentTypeDo) Last() (*domain.AgentType, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.AgentType), nil
	}
}

func (a agentTypeDo) Find() ([]*domain.AgentType, error) {
	result, err := a.DO.Find()
	return result.([]*domain.AgentType), err
}

func (a agentTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.AgentType, err error) {
	buf := make([]*domain.AgentType, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentTypeDo) FindInBatches(result *[]*domain.AgentType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentTypeDo) Attrs(attrs ...field.AssignExpr) IAgentTypeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentTypeDo) Assign(attrs ...field.AssignExpr) IAgentTypeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentTypeDo) Joins(fields ...field.RelationField) IAgentTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentTypeDo) Preload(fields ...field.RelationField) IAgentTypeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentTypeDo) FirstOrInit() (*domain.AgentType, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.AgentType), nil
	}
}

func (a agentTypeDo) FirstOrCreate() (*domain.AgentType, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.AgentType), nil
	}
}

func (a agentTypeDo) FindByPage(offset int, limit int) (result []*domain.AgentType, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentTypeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentTypeDo) Delete(models ...*domain.AgentType) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentTypeDo) withDO(do gen.Dao) *agentTypeDo {
	a.DO = *do.(*gen.DO)
	return a
}
