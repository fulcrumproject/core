// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newServiceGroup(db *gorm.DB, opts ...gen.DOOption) serviceGroup {
	_serviceGroup := serviceGroup{}

	_serviceGroup.serviceGroupDo.UseDB(db, opts...)
	_serviceGroup.serviceGroupDo.UseModel(&domain.ServiceGroup{})

	tableName := _serviceGroup.serviceGroupDo.TableName()
	_serviceGroup.ALL = field.NewAsterisk(tableName)
	_serviceGroup.ID = field.NewField(tableName, "id")
	_serviceGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_serviceGroup.UpdatedAt = field.NewTime(tableName, "updated_at")
	_serviceGroup.Name = field.NewString(tableName, "name")
	_serviceGroup.ConsumerID = field.NewField(tableName, "consumer_id")
	_serviceGroup.Services = serviceGroupHasManyServices{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Services", "domain.Service"),
		Provider: struct {
			field.RelationField
			Agents struct {
				field.RelationField
				AgentType struct {
					field.RelationField
					ServiceTypes struct {
						field.RelationField
					}
				}
				Provider struct {
					field.RelationField
				}
				ServicePoolSet struct {
					field.RelationField
					Provider struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("Services.Provider", "domain.Participant"),
			Agents: struct {
				field.RelationField
				AgentType struct {
					field.RelationField
					ServiceTypes struct {
						field.RelationField
					}
				}
				Provider struct {
					field.RelationField
				}
				ServicePoolSet struct {
					field.RelationField
					Provider struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Services.Provider.Agents", "domain.Agent"),
				AgentType: struct {
					field.RelationField
					ServiceTypes struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Services.Provider.Agents.AgentType", "domain.AgentType"),
					ServiceTypes: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Services.Provider.Agents.AgentType.ServiceTypes", "domain.ServiceType"),
					},
				},
				Provider: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Services.Provider.Agents.Provider", "domain.Participant"),
				},
				ServicePoolSet: struct {
					field.RelationField
					Provider struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Services.Provider.Agents.ServicePoolSet", "domain.ServicePoolSet"),
					Provider: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Services.Provider.Agents.ServicePoolSet.Provider", "domain.Participant"),
					},
				},
			},
		},
		Consumer: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Services.Consumer", "domain.Participant"),
		},
		Group: struct {
			field.RelationField
			Participant struct {
				field.RelationField
			}
			Services struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Services.Group", "domain.ServiceGroup"),
			Participant: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Services.Group.Participant", "domain.Participant"),
			},
			Services: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Services.Group.Services", "domain.Service"),
			},
		},
		Agent: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Services.Agent", "domain.Agent"),
		},
		ServiceType: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Services.ServiceType", "domain.ServiceType"),
		},
	}

	_serviceGroup.Participant = serviceGroupBelongsToParticipant{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Participant", "domain.Participant"),
	}

	_serviceGroup.fillFieldMap()

	return _serviceGroup
}

type serviceGroup struct {
	serviceGroupDo serviceGroupDo

	ALL        field.Asterisk
	ID         field.Field
	CreatedAt  field.Time
	UpdatedAt  field.Time
	Name       field.String
	ConsumerID field.Field
	Services   serviceGroupHasManyServices

	Participant serviceGroupBelongsToParticipant

	fieldMap map[string]field.Expr
}

func (s serviceGroup) Table(newTableName string) *serviceGroup {
	s.serviceGroupDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceGroup) As(alias string) *serviceGroup {
	s.serviceGroupDo.DO = *(s.serviceGroupDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceGroup) updateTableName(table string) *serviceGroup {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Name = field.NewString(table, "name")
	s.ConsumerID = field.NewField(table, "consumer_id")

	s.fillFieldMap()

	return s
}

func (s *serviceGroup) WithContext(ctx context.Context) IServiceGroupDo {
	return s.serviceGroupDo.WithContext(ctx)
}

func (s serviceGroup) TableName() string { return s.serviceGroupDo.TableName() }

func (s serviceGroup) Alias() string { return s.serviceGroupDo.Alias() }

func (s serviceGroup) Columns(cols ...field.Expr) gen.Columns {
	return s.serviceGroupDo.Columns(cols...)
}

func (s *serviceGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceGroup) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["consumer_id"] = s.ConsumerID

}

func (s serviceGroup) clone(db *gorm.DB) serviceGroup {
	s.serviceGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	s.Services.db = db.Session(&gorm.Session{Initialized: true})
	s.Services.db.Statement.ConnPool = db.Statement.ConnPool
	s.Participant.db = db.Session(&gorm.Session{Initialized: true})
	s.Participant.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s serviceGroup) replaceDB(db *gorm.DB) serviceGroup {
	s.serviceGroupDo.ReplaceDB(db)
	s.Services.db = db.Session(&gorm.Session{})
	s.Participant.db = db.Session(&gorm.Session{})
	return s
}

type serviceGroupHasManyServices struct {
	db *gorm.DB

	field.RelationField

	Provider struct {
		field.RelationField
		Agents struct {
			field.RelationField
			AgentType struct {
				field.RelationField
				ServiceTypes struct {
					field.RelationField
				}
			}
			Provider struct {
				field.RelationField
			}
			ServicePoolSet struct {
				field.RelationField
				Provider struct {
					field.RelationField
				}
			}
		}
	}
	Consumer struct {
		field.RelationField
	}
	Group struct {
		field.RelationField
		Participant struct {
			field.RelationField
		}
		Services struct {
			field.RelationField
		}
	}
	Agent struct {
		field.RelationField
	}
	ServiceType struct {
		field.RelationField
	}
}

func (a serviceGroupHasManyServices) Where(conds ...field.Expr) *serviceGroupHasManyServices {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a serviceGroupHasManyServices) WithContext(ctx context.Context) *serviceGroupHasManyServices {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a serviceGroupHasManyServices) Session(session *gorm.Session) *serviceGroupHasManyServices {
	a.db = a.db.Session(session)
	return &a
}

func (a serviceGroupHasManyServices) Model(m *domain.ServiceGroup) *serviceGroupHasManyServicesTx {
	return &serviceGroupHasManyServicesTx{a.db.Model(m).Association(a.Name())}
}

func (a serviceGroupHasManyServices) Unscoped() *serviceGroupHasManyServices {
	a.db = a.db.Unscoped()
	return &a
}

type serviceGroupHasManyServicesTx struct{ tx *gorm.Association }

func (a serviceGroupHasManyServicesTx) Find() (result []*domain.Service, err error) {
	return result, a.tx.Find(&result)
}

func (a serviceGroupHasManyServicesTx) Append(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a serviceGroupHasManyServicesTx) Replace(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a serviceGroupHasManyServicesTx) Delete(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a serviceGroupHasManyServicesTx) Clear() error {
	return a.tx.Clear()
}

func (a serviceGroupHasManyServicesTx) Count() int64 {
	return a.tx.Count()
}

func (a serviceGroupHasManyServicesTx) Unscoped() *serviceGroupHasManyServicesTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type serviceGroupBelongsToParticipant struct {
	db *gorm.DB

	field.RelationField
}

func (a serviceGroupBelongsToParticipant) Where(conds ...field.Expr) *serviceGroupBelongsToParticipant {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a serviceGroupBelongsToParticipant) WithContext(ctx context.Context) *serviceGroupBelongsToParticipant {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a serviceGroupBelongsToParticipant) Session(session *gorm.Session) *serviceGroupBelongsToParticipant {
	a.db = a.db.Session(session)
	return &a
}

func (a serviceGroupBelongsToParticipant) Model(m *domain.ServiceGroup) *serviceGroupBelongsToParticipantTx {
	return &serviceGroupBelongsToParticipantTx{a.db.Model(m).Association(a.Name())}
}

func (a serviceGroupBelongsToParticipant) Unscoped() *serviceGroupBelongsToParticipant {
	a.db = a.db.Unscoped()
	return &a
}

type serviceGroupBelongsToParticipantTx struct{ tx *gorm.Association }

func (a serviceGroupBelongsToParticipantTx) Find() (result *domain.Participant, err error) {
	return result, a.tx.Find(&result)
}

func (a serviceGroupBelongsToParticipantTx) Append(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a serviceGroupBelongsToParticipantTx) Replace(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a serviceGroupBelongsToParticipantTx) Delete(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a serviceGroupBelongsToParticipantTx) Clear() error {
	return a.tx.Clear()
}

func (a serviceGroupBelongsToParticipantTx) Count() int64 {
	return a.tx.Count()
}

func (a serviceGroupBelongsToParticipantTx) Unscoped() *serviceGroupBelongsToParticipantTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type serviceGroupDo struct{ gen.DO }

type IServiceGroupDo interface {
	gen.SubQuery
	Debug() IServiceGroupDo
	WithContext(ctx context.Context) IServiceGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceGroupDo
	WriteDB() IServiceGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceGroupDo
	Not(conds ...gen.Condition) IServiceGroupDo
	Or(conds ...gen.Condition) IServiceGroupDo
	Select(conds ...field.Expr) IServiceGroupDo
	Where(conds ...gen.Condition) IServiceGroupDo
	Order(conds ...field.Expr) IServiceGroupDo
	Distinct(cols ...field.Expr) IServiceGroupDo
	Omit(cols ...field.Expr) IServiceGroupDo
	Join(table schema.Tabler, on ...field.Expr) IServiceGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceGroupDo
	Group(cols ...field.Expr) IServiceGroupDo
	Having(conds ...gen.Condition) IServiceGroupDo
	Limit(limit int) IServiceGroupDo
	Offset(offset int) IServiceGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceGroupDo
	Unscoped() IServiceGroupDo
	Create(values ...*domain.ServiceGroup) error
	CreateInBatches(values []*domain.ServiceGroup, batchSize int) error
	Save(values ...*domain.ServiceGroup) error
	First() (*domain.ServiceGroup, error)
	Take() (*domain.ServiceGroup, error)
	Last() (*domain.ServiceGroup, error)
	Find() ([]*domain.ServiceGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServiceGroup, err error)
	FindInBatches(result *[]*domain.ServiceGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.ServiceGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceGroupDo
	Assign(attrs ...field.AssignExpr) IServiceGroupDo
	Joins(fields ...field.RelationField) IServiceGroupDo
	Preload(fields ...field.RelationField) IServiceGroupDo
	FirstOrInit() (*domain.ServiceGroup, error)
	FirstOrCreate() (*domain.ServiceGroup, error)
	FindByPage(offset int, limit int) (result []*domain.ServiceGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceGroupDo) Debug() IServiceGroupDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceGroupDo) WithContext(ctx context.Context) IServiceGroupDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceGroupDo) ReadDB() IServiceGroupDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceGroupDo) WriteDB() IServiceGroupDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceGroupDo) Session(config *gorm.Session) IServiceGroupDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceGroupDo) Clauses(conds ...clause.Expression) IServiceGroupDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceGroupDo) Returning(value interface{}, columns ...string) IServiceGroupDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceGroupDo) Not(conds ...gen.Condition) IServiceGroupDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceGroupDo) Or(conds ...gen.Condition) IServiceGroupDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceGroupDo) Select(conds ...field.Expr) IServiceGroupDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceGroupDo) Where(conds ...gen.Condition) IServiceGroupDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceGroupDo) Order(conds ...field.Expr) IServiceGroupDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceGroupDo) Distinct(cols ...field.Expr) IServiceGroupDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceGroupDo) Omit(cols ...field.Expr) IServiceGroupDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceGroupDo) Join(table schema.Tabler, on ...field.Expr) IServiceGroupDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceGroupDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceGroupDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceGroupDo) Group(cols ...field.Expr) IServiceGroupDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceGroupDo) Having(conds ...gen.Condition) IServiceGroupDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceGroupDo) Limit(limit int) IServiceGroupDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceGroupDo) Offset(offset int) IServiceGroupDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceGroupDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceGroupDo) Unscoped() IServiceGroupDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceGroupDo) Create(values ...*domain.ServiceGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceGroupDo) CreateInBatches(values []*domain.ServiceGroup, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceGroupDo) Save(values ...*domain.ServiceGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceGroupDo) First() (*domain.ServiceGroup, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceGroup), nil
	}
}

func (s serviceGroupDo) Take() (*domain.ServiceGroup, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceGroup), nil
	}
}

func (s serviceGroupDo) Last() (*domain.ServiceGroup, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceGroup), nil
	}
}

func (s serviceGroupDo) Find() ([]*domain.ServiceGroup, error) {
	result, err := s.DO.Find()
	return result.([]*domain.ServiceGroup), err
}

func (s serviceGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServiceGroup, err error) {
	buf := make([]*domain.ServiceGroup, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceGroupDo) FindInBatches(result *[]*domain.ServiceGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceGroupDo) Attrs(attrs ...field.AssignExpr) IServiceGroupDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceGroupDo) Assign(attrs ...field.AssignExpr) IServiceGroupDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceGroupDo) Joins(fields ...field.RelationField) IServiceGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceGroupDo) Preload(fields ...field.RelationField) IServiceGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceGroupDo) FirstOrInit() (*domain.ServiceGroup, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceGroup), nil
	}
}

func (s serviceGroupDo) FirstOrCreate() (*domain.ServiceGroup, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceGroup), nil
	}
}

func (s serviceGroupDo) FindByPage(offset int, limit int) (result []*domain.ServiceGroup, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceGroupDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceGroupDo) Delete(models ...*domain.ServiceGroup) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceGroupDo) withDO(do gen.Dao) *serviceGroupDo {
	s.DO = *do.(*gen.DO)
	return s
}
