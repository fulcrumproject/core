// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newServiceType(db *gorm.DB, opts ...gen.DOOption) serviceType {
	_serviceType := serviceType{}

	_serviceType.serviceTypeDo.UseDB(db, opts...)
	_serviceType.serviceTypeDo.UseModel(&domain.ServiceType{})

	tableName := _serviceType.serviceTypeDo.TableName()
	_serviceType.ALL = field.NewAsterisk(tableName)
	_serviceType.ID = field.NewField(tableName, "id")
	_serviceType.CreatedAt = field.NewTime(tableName, "created_at")
	_serviceType.UpdatedAt = field.NewTime(tableName, "updated_at")
	_serviceType.Name = field.NewString(tableName, "name")
	_serviceType.PropertySchema = field.NewField(tableName, "property_schema")
	_serviceType.LifecycleSchema = field.NewField(tableName, "lifecycle_schema")

	_serviceType.fillFieldMap()

	return _serviceType
}

type serviceType struct {
	serviceTypeDo serviceTypeDo

	ALL             field.Asterisk
	ID              field.Field
	CreatedAt       field.Time
	UpdatedAt       field.Time
	Name            field.String
	PropertySchema  field.Field
	LifecycleSchema field.Field

	fieldMap map[string]field.Expr
}

func (s serviceType) Table(newTableName string) *serviceType {
	s.serviceTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceType) As(alias string) *serviceType {
	s.serviceTypeDo.DO = *(s.serviceTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceType) updateTableName(table string) *serviceType {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Name = field.NewString(table, "name")
	s.PropertySchema = field.NewField(table, "property_schema")
	s.LifecycleSchema = field.NewField(table, "lifecycle_schema")

	s.fillFieldMap()

	return s
}

func (s *serviceType) WithContext(ctx context.Context) IServiceTypeDo {
	return s.serviceTypeDo.WithContext(ctx)
}

func (s serviceType) TableName() string { return s.serviceTypeDo.TableName() }

func (s serviceType) Alias() string { return s.serviceTypeDo.Alias() }

func (s serviceType) Columns(cols ...field.Expr) gen.Columns { return s.serviceTypeDo.Columns(cols...) }

func (s *serviceType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["property_schema"] = s.PropertySchema
	s.fieldMap["lifecycle_schema"] = s.LifecycleSchema
}

func (s serviceType) clone(db *gorm.DB) serviceType {
	s.serviceTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serviceType) replaceDB(db *gorm.DB) serviceType {
	s.serviceTypeDo.ReplaceDB(db)
	return s
}

type serviceTypeDo struct{ gen.DO }

type IServiceTypeDo interface {
	gen.SubQuery
	Debug() IServiceTypeDo
	WithContext(ctx context.Context) IServiceTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceTypeDo
	WriteDB() IServiceTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceTypeDo
	Not(conds ...gen.Condition) IServiceTypeDo
	Or(conds ...gen.Condition) IServiceTypeDo
	Select(conds ...field.Expr) IServiceTypeDo
	Where(conds ...gen.Condition) IServiceTypeDo
	Order(conds ...field.Expr) IServiceTypeDo
	Distinct(cols ...field.Expr) IServiceTypeDo
	Omit(cols ...field.Expr) IServiceTypeDo
	Join(table schema.Tabler, on ...field.Expr) IServiceTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceTypeDo
	Group(cols ...field.Expr) IServiceTypeDo
	Having(conds ...gen.Condition) IServiceTypeDo
	Limit(limit int) IServiceTypeDo
	Offset(offset int) IServiceTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceTypeDo
	Unscoped() IServiceTypeDo
	Create(values ...*domain.ServiceType) error
	CreateInBatches(values []*domain.ServiceType, batchSize int) error
	Save(values ...*domain.ServiceType) error
	First() (*domain.ServiceType, error)
	Take() (*domain.ServiceType, error)
	Last() (*domain.ServiceType, error)
	Find() ([]*domain.ServiceType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServiceType, err error)
	FindInBatches(result *[]*domain.ServiceType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.ServiceType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceTypeDo
	Assign(attrs ...field.AssignExpr) IServiceTypeDo
	Joins(fields ...field.RelationField) IServiceTypeDo
	Preload(fields ...field.RelationField) IServiceTypeDo
	FirstOrInit() (*domain.ServiceType, error)
	FirstOrCreate() (*domain.ServiceType, error)
	FindByPage(offset int, limit int) (result []*domain.ServiceType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceTypeDo) Debug() IServiceTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceTypeDo) WithContext(ctx context.Context) IServiceTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceTypeDo) ReadDB() IServiceTypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceTypeDo) WriteDB() IServiceTypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceTypeDo) Session(config *gorm.Session) IServiceTypeDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceTypeDo) Clauses(conds ...clause.Expression) IServiceTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceTypeDo) Returning(value interface{}, columns ...string) IServiceTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceTypeDo) Not(conds ...gen.Condition) IServiceTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceTypeDo) Or(conds ...gen.Condition) IServiceTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceTypeDo) Select(conds ...field.Expr) IServiceTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceTypeDo) Where(conds ...gen.Condition) IServiceTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceTypeDo) Order(conds ...field.Expr) IServiceTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceTypeDo) Distinct(cols ...field.Expr) IServiceTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceTypeDo) Omit(cols ...field.Expr) IServiceTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceTypeDo) Join(table schema.Tabler, on ...field.Expr) IServiceTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceTypeDo) Group(cols ...field.Expr) IServiceTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceTypeDo) Having(conds ...gen.Condition) IServiceTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceTypeDo) Limit(limit int) IServiceTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceTypeDo) Offset(offset int) IServiceTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceTypeDo) Unscoped() IServiceTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceTypeDo) Create(values ...*domain.ServiceType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceTypeDo) CreateInBatches(values []*domain.ServiceType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceTypeDo) Save(values ...*domain.ServiceType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceTypeDo) First() (*domain.ServiceType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceType), nil
	}
}

func (s serviceTypeDo) Take() (*domain.ServiceType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceType), nil
	}
}

func (s serviceTypeDo) Last() (*domain.ServiceType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceType), nil
	}
}

func (s serviceTypeDo) Find() ([]*domain.ServiceType, error) {
	result, err := s.DO.Find()
	return result.([]*domain.ServiceType), err
}

func (s serviceTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServiceType, err error) {
	buf := make([]*domain.ServiceType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceTypeDo) FindInBatches(result *[]*domain.ServiceType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceTypeDo) Attrs(attrs ...field.AssignExpr) IServiceTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceTypeDo) Assign(attrs ...field.AssignExpr) IServiceTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceTypeDo) Joins(fields ...field.RelationField) IServiceTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceTypeDo) Preload(fields ...field.RelationField) IServiceTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceTypeDo) FirstOrInit() (*domain.ServiceType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceType), nil
	}
}

func (s serviceTypeDo) FirstOrCreate() (*domain.ServiceType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceType), nil
	}
}

func (s serviceTypeDo) FindByPage(offset int, limit int) (result []*domain.ServiceType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceTypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceTypeDo) Delete(models ...*domain.ServiceType) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceTypeDo) withDO(do gen.Dao) *serviceTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
