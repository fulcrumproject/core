// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newJob(db *gorm.DB, opts ...gen.DOOption) job {
	_job := job{}

	_job.jobDo.UseDB(db, opts...)
	_job.jobDo.UseModel(&domain.Job{})

	tableName := _job.jobDo.TableName()
	_job.ALL = field.NewAsterisk(tableName)
	_job.ID = field.NewField(tableName, "id")
	_job.CreatedAt = field.NewTime(tableName, "created_at")
	_job.UpdatedAt = field.NewTime(tableName, "updated_at")
	_job.Action = field.NewString(tableName, "action")
	_job.Params = field.NewField(tableName, "params")
	_job.Priority = field.NewInt(tableName, "priority")
	_job.Status = field.NewString(tableName, "status")
	_job.ErrorMessage = field.NewString(tableName, "error_message")
	_job.ClaimedAt = field.NewTime(tableName, "claimed_at")
	_job.CompletedAt = field.NewTime(tableName, "completed_at")
	_job.AgentID = field.NewField(tableName, "agent_id")
	_job.ServiceID = field.NewField(tableName, "service_id")
	_job.ProviderID = field.NewField(tableName, "provider_id")
	_job.ConsumerID = field.NewField(tableName, "consumer_id")
	_job.Agent = jobBelongsToAgent{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Agent", "domain.Agent"),
		AgentType: struct {
			field.RelationField
			ServiceTypes struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Agent.AgentType", "domain.AgentType"),
			ServiceTypes: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Agent.AgentType.ServiceTypes", "domain.ServiceType"),
			},
		},
		Provider: struct {
			field.RelationField
			Agents struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Agent.Provider", "domain.Participant"),
			Agents: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Agent.Provider.Agents", "domain.Agent"),
			},
		},
		ServicePoolSet: struct {
			field.RelationField
			Provider struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Agent.ServicePoolSet", "domain.ServicePoolSet"),
			Provider: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Agent.ServicePoolSet.Provider", "domain.Participant"),
			},
		},
	}

	_job.Service = jobBelongsToService{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Service", "domain.Service"),
		Provider: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.Provider", "domain.Participant"),
		},
		Consumer: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.Consumer", "domain.Participant"),
		},
		Group: struct {
			field.RelationField
			Participant struct {
				field.RelationField
			}
			Services struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Service.Group", "domain.ServiceGroup"),
			Participant: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Service.Group.Participant", "domain.Participant"),
			},
			Services: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Service.Group.Services", "domain.Service"),
			},
		},
		Agent: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.Agent", "domain.Agent"),
		},
		ServiceType: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.ServiceType", "domain.ServiceType"),
		},
	}

	_job.Provider = jobBelongsToProvider{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Provider", "domain.Participant"),
	}

	_job.Consumer = jobBelongsToConsumer{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Consumer", "domain.Participant"),
	}

	_job.fillFieldMap()

	return _job
}

type job struct {
	jobDo jobDo

	ALL          field.Asterisk
	ID           field.Field
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Action       field.String
	Params       field.Field
	Priority     field.Int
	Status       field.String
	ErrorMessage field.String
	ClaimedAt    field.Time
	CompletedAt  field.Time
	AgentID      field.Field
	ServiceID    field.Field
	ProviderID   field.Field
	ConsumerID   field.Field
	Agent        jobBelongsToAgent

	Service jobBelongsToService

	Provider jobBelongsToProvider

	Consumer jobBelongsToConsumer

	fieldMap map[string]field.Expr
}

func (j job) Table(newTableName string) *job {
	j.jobDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j job) As(alias string) *job {
	j.jobDo.DO = *(j.jobDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *job) updateTableName(table string) *job {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewField(table, "id")
	j.CreatedAt = field.NewTime(table, "created_at")
	j.UpdatedAt = field.NewTime(table, "updated_at")
	j.Action = field.NewString(table, "action")
	j.Params = field.NewField(table, "params")
	j.Priority = field.NewInt(table, "priority")
	j.Status = field.NewString(table, "status")
	j.ErrorMessage = field.NewString(table, "error_message")
	j.ClaimedAt = field.NewTime(table, "claimed_at")
	j.CompletedAt = field.NewTime(table, "completed_at")
	j.AgentID = field.NewField(table, "agent_id")
	j.ServiceID = field.NewField(table, "service_id")
	j.ProviderID = field.NewField(table, "provider_id")
	j.ConsumerID = field.NewField(table, "consumer_id")

	j.fillFieldMap()

	return j
}

func (j *job) WithContext(ctx context.Context) IJobDo { return j.jobDo.WithContext(ctx) }

func (j job) TableName() string { return j.jobDo.TableName() }

func (j job) Alias() string { return j.jobDo.Alias() }

func (j job) Columns(cols ...field.Expr) gen.Columns { return j.jobDo.Columns(cols...) }

func (j *job) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *job) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 18)
	j.fieldMap["id"] = j.ID
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["updated_at"] = j.UpdatedAt
	j.fieldMap["action"] = j.Action
	j.fieldMap["params"] = j.Params
	j.fieldMap["priority"] = j.Priority
	j.fieldMap["status"] = j.Status
	j.fieldMap["error_message"] = j.ErrorMessage
	j.fieldMap["claimed_at"] = j.ClaimedAt
	j.fieldMap["completed_at"] = j.CompletedAt
	j.fieldMap["agent_id"] = j.AgentID
	j.fieldMap["service_id"] = j.ServiceID
	j.fieldMap["provider_id"] = j.ProviderID
	j.fieldMap["consumer_id"] = j.ConsumerID

}

func (j job) clone(db *gorm.DB) job {
	j.jobDo.ReplaceConnPool(db.Statement.ConnPool)
	j.Agent.db = db.Session(&gorm.Session{Initialized: true})
	j.Agent.db.Statement.ConnPool = db.Statement.ConnPool
	j.Service.db = db.Session(&gorm.Session{Initialized: true})
	j.Service.db.Statement.ConnPool = db.Statement.ConnPool
	j.Provider.db = db.Session(&gorm.Session{Initialized: true})
	j.Provider.db.Statement.ConnPool = db.Statement.ConnPool
	j.Consumer.db = db.Session(&gorm.Session{Initialized: true})
	j.Consumer.db.Statement.ConnPool = db.Statement.ConnPool
	return j
}

func (j job) replaceDB(db *gorm.DB) job {
	j.jobDo.ReplaceDB(db)
	j.Agent.db = db.Session(&gorm.Session{})
	j.Service.db = db.Session(&gorm.Session{})
	j.Provider.db = db.Session(&gorm.Session{})
	j.Consumer.db = db.Session(&gorm.Session{})
	return j
}

type jobBelongsToAgent struct {
	db *gorm.DB

	field.RelationField

	AgentType struct {
		field.RelationField
		ServiceTypes struct {
			field.RelationField
		}
	}
	Provider struct {
		field.RelationField
		Agents struct {
			field.RelationField
		}
	}
	ServicePoolSet struct {
		field.RelationField
		Provider struct {
			field.RelationField
		}
	}
}

func (a jobBelongsToAgent) Where(conds ...field.Expr) *jobBelongsToAgent {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a jobBelongsToAgent) WithContext(ctx context.Context) *jobBelongsToAgent {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a jobBelongsToAgent) Session(session *gorm.Session) *jobBelongsToAgent {
	a.db = a.db.Session(session)
	return &a
}

func (a jobBelongsToAgent) Model(m *domain.Job) *jobBelongsToAgentTx {
	return &jobBelongsToAgentTx{a.db.Model(m).Association(a.Name())}
}

func (a jobBelongsToAgent) Unscoped() *jobBelongsToAgent {
	a.db = a.db.Unscoped()
	return &a
}

type jobBelongsToAgentTx struct{ tx *gorm.Association }

func (a jobBelongsToAgentTx) Find() (result *domain.Agent, err error) {
	return result, a.tx.Find(&result)
}

func (a jobBelongsToAgentTx) Append(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a jobBelongsToAgentTx) Replace(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a jobBelongsToAgentTx) Delete(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a jobBelongsToAgentTx) Clear() error {
	return a.tx.Clear()
}

func (a jobBelongsToAgentTx) Count() int64 {
	return a.tx.Count()
}

func (a jobBelongsToAgentTx) Unscoped() *jobBelongsToAgentTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type jobBelongsToService struct {
	db *gorm.DB

	field.RelationField

	Provider struct {
		field.RelationField
	}
	Consumer struct {
		field.RelationField
	}
	Group struct {
		field.RelationField
		Participant struct {
			field.RelationField
		}
		Services struct {
			field.RelationField
		}
	}
	Agent struct {
		field.RelationField
	}
	ServiceType struct {
		field.RelationField
	}
}

func (a jobBelongsToService) Where(conds ...field.Expr) *jobBelongsToService {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a jobBelongsToService) WithContext(ctx context.Context) *jobBelongsToService {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a jobBelongsToService) Session(session *gorm.Session) *jobBelongsToService {
	a.db = a.db.Session(session)
	return &a
}

func (a jobBelongsToService) Model(m *domain.Job) *jobBelongsToServiceTx {
	return &jobBelongsToServiceTx{a.db.Model(m).Association(a.Name())}
}

func (a jobBelongsToService) Unscoped() *jobBelongsToService {
	a.db = a.db.Unscoped()
	return &a
}

type jobBelongsToServiceTx struct{ tx *gorm.Association }

func (a jobBelongsToServiceTx) Find() (result *domain.Service, err error) {
	return result, a.tx.Find(&result)
}

func (a jobBelongsToServiceTx) Append(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a jobBelongsToServiceTx) Replace(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a jobBelongsToServiceTx) Delete(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a jobBelongsToServiceTx) Clear() error {
	return a.tx.Clear()
}

func (a jobBelongsToServiceTx) Count() int64 {
	return a.tx.Count()
}

func (a jobBelongsToServiceTx) Unscoped() *jobBelongsToServiceTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type jobBelongsToProvider struct {
	db *gorm.DB

	field.RelationField
}

func (a jobBelongsToProvider) Where(conds ...field.Expr) *jobBelongsToProvider {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a jobBelongsToProvider) WithContext(ctx context.Context) *jobBelongsToProvider {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a jobBelongsToProvider) Session(session *gorm.Session) *jobBelongsToProvider {
	a.db = a.db.Session(session)
	return &a
}

func (a jobBelongsToProvider) Model(m *domain.Job) *jobBelongsToProviderTx {
	return &jobBelongsToProviderTx{a.db.Model(m).Association(a.Name())}
}

func (a jobBelongsToProvider) Unscoped() *jobBelongsToProvider {
	a.db = a.db.Unscoped()
	return &a
}

type jobBelongsToProviderTx struct{ tx *gorm.Association }

func (a jobBelongsToProviderTx) Find() (result *domain.Participant, err error) {
	return result, a.tx.Find(&result)
}

func (a jobBelongsToProviderTx) Append(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a jobBelongsToProviderTx) Replace(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a jobBelongsToProviderTx) Delete(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a jobBelongsToProviderTx) Clear() error {
	return a.tx.Clear()
}

func (a jobBelongsToProviderTx) Count() int64 {
	return a.tx.Count()
}

func (a jobBelongsToProviderTx) Unscoped() *jobBelongsToProviderTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type jobBelongsToConsumer struct {
	db *gorm.DB

	field.RelationField
}

func (a jobBelongsToConsumer) Where(conds ...field.Expr) *jobBelongsToConsumer {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a jobBelongsToConsumer) WithContext(ctx context.Context) *jobBelongsToConsumer {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a jobBelongsToConsumer) Session(session *gorm.Session) *jobBelongsToConsumer {
	a.db = a.db.Session(session)
	return &a
}

func (a jobBelongsToConsumer) Model(m *domain.Job) *jobBelongsToConsumerTx {
	return &jobBelongsToConsumerTx{a.db.Model(m).Association(a.Name())}
}

func (a jobBelongsToConsumer) Unscoped() *jobBelongsToConsumer {
	a.db = a.db.Unscoped()
	return &a
}

type jobBelongsToConsumerTx struct{ tx *gorm.Association }

func (a jobBelongsToConsumerTx) Find() (result *domain.Participant, err error) {
	return result, a.tx.Find(&result)
}

func (a jobBelongsToConsumerTx) Append(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a jobBelongsToConsumerTx) Replace(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a jobBelongsToConsumerTx) Delete(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a jobBelongsToConsumerTx) Clear() error {
	return a.tx.Clear()
}

func (a jobBelongsToConsumerTx) Count() int64 {
	return a.tx.Count()
}

func (a jobBelongsToConsumerTx) Unscoped() *jobBelongsToConsumerTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type jobDo struct{ gen.DO }

type IJobDo interface {
	gen.SubQuery
	Debug() IJobDo
	WithContext(ctx context.Context) IJobDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJobDo
	WriteDB() IJobDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJobDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJobDo
	Not(conds ...gen.Condition) IJobDo
	Or(conds ...gen.Condition) IJobDo
	Select(conds ...field.Expr) IJobDo
	Where(conds ...gen.Condition) IJobDo
	Order(conds ...field.Expr) IJobDo
	Distinct(cols ...field.Expr) IJobDo
	Omit(cols ...field.Expr) IJobDo
	Join(table schema.Tabler, on ...field.Expr) IJobDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJobDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJobDo
	Group(cols ...field.Expr) IJobDo
	Having(conds ...gen.Condition) IJobDo
	Limit(limit int) IJobDo
	Offset(offset int) IJobDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJobDo
	Unscoped() IJobDo
	Create(values ...*domain.Job) error
	CreateInBatches(values []*domain.Job, batchSize int) error
	Save(values ...*domain.Job) error
	First() (*domain.Job, error)
	Take() (*domain.Job, error)
	Last() (*domain.Job, error)
	Find() ([]*domain.Job, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Job, err error)
	FindInBatches(result *[]*domain.Job, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.Job) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJobDo
	Assign(attrs ...field.AssignExpr) IJobDo
	Joins(fields ...field.RelationField) IJobDo
	Preload(fields ...field.RelationField) IJobDo
	FirstOrInit() (*domain.Job, error)
	FirstOrCreate() (*domain.Job, error)
	FindByPage(offset int, limit int) (result []*domain.Job, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJobDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (j jobDo) Debug() IJobDo {
	return j.withDO(j.DO.Debug())
}

func (j jobDo) WithContext(ctx context.Context) IJobDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jobDo) ReadDB() IJobDo {
	return j.Clauses(dbresolver.Read)
}

func (j jobDo) WriteDB() IJobDo {
	return j.Clauses(dbresolver.Write)
}

func (j jobDo) Session(config *gorm.Session) IJobDo {
	return j.withDO(j.DO.Session(config))
}

func (j jobDo) Clauses(conds ...clause.Expression) IJobDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jobDo) Returning(value interface{}, columns ...string) IJobDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jobDo) Not(conds ...gen.Condition) IJobDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jobDo) Or(conds ...gen.Condition) IJobDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jobDo) Select(conds ...field.Expr) IJobDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jobDo) Where(conds ...gen.Condition) IJobDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jobDo) Order(conds ...field.Expr) IJobDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jobDo) Distinct(cols ...field.Expr) IJobDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jobDo) Omit(cols ...field.Expr) IJobDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jobDo) Join(table schema.Tabler, on ...field.Expr) IJobDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jobDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJobDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jobDo) RightJoin(table schema.Tabler, on ...field.Expr) IJobDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jobDo) Group(cols ...field.Expr) IJobDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jobDo) Having(conds ...gen.Condition) IJobDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jobDo) Limit(limit int) IJobDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jobDo) Offset(offset int) IJobDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJobDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jobDo) Unscoped() IJobDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jobDo) Create(values ...*domain.Job) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jobDo) CreateInBatches(values []*domain.Job, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jobDo) Save(values ...*domain.Job) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jobDo) First() (*domain.Job, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Job), nil
	}
}

func (j jobDo) Take() (*domain.Job, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Job), nil
	}
}

func (j jobDo) Last() (*domain.Job, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Job), nil
	}
}

func (j jobDo) Find() ([]*domain.Job, error) {
	result, err := j.DO.Find()
	return result.([]*domain.Job), err
}

func (j jobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Job, err error) {
	buf := make([]*domain.Job, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jobDo) FindInBatches(result *[]*domain.Job, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jobDo) Attrs(attrs ...field.AssignExpr) IJobDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jobDo) Assign(attrs ...field.AssignExpr) IJobDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jobDo) Joins(fields ...field.RelationField) IJobDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jobDo) Preload(fields ...field.RelationField) IJobDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jobDo) FirstOrInit() (*domain.Job, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Job), nil
	}
}

func (j jobDo) FirstOrCreate() (*domain.Job, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Job), nil
	}
}

func (j jobDo) FindByPage(offset int, limit int) (result []*domain.Job, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jobDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jobDo) Delete(models ...*domain.Job) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jobDo) withDO(do gen.Dao) *jobDo {
	j.DO = *do.(*gen.DO)
	return j
}
