// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newServiceOption(db *gorm.DB, opts ...gen.DOOption) serviceOption {
	_serviceOption := serviceOption{}

	_serviceOption.serviceOptionDo.UseDB(db, opts...)
	_serviceOption.serviceOptionDo.UseModel(&domain.ServiceOption{})

	tableName := _serviceOption.serviceOptionDo.TableName()
	_serviceOption.ALL = field.NewAsterisk(tableName)
	_serviceOption.ID = field.NewField(tableName, "id")
	_serviceOption.CreatedAt = field.NewTime(tableName, "created_at")
	_serviceOption.UpdatedAt = field.NewTime(tableName, "updated_at")
	_serviceOption.ProviderID = field.NewField(tableName, "provider_id")
	_serviceOption.ServiceOptionTypeID = field.NewField(tableName, "service_option_type_id")
	_serviceOption.Name = field.NewString(tableName, "name")
	_serviceOption.Value = field.NewField(tableName, "value")
	_serviceOption.Enabled = field.NewBool(tableName, "enabled")
	_serviceOption.DisplayOrder = field.NewInt(tableName, "display_order")

	_serviceOption.fillFieldMap()

	return _serviceOption
}

type serviceOption struct {
	serviceOptionDo serviceOptionDo

	ALL                 field.Asterisk
	ID                  field.Field
	CreatedAt           field.Time
	UpdatedAt           field.Time
	ProviderID          field.Field
	ServiceOptionTypeID field.Field
	Name                field.String
	Value               field.Field
	Enabled             field.Bool
	DisplayOrder        field.Int

	fieldMap map[string]field.Expr
}

func (s serviceOption) Table(newTableName string) *serviceOption {
	s.serviceOptionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceOption) As(alias string) *serviceOption {
	s.serviceOptionDo.DO = *(s.serviceOptionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceOption) updateTableName(table string) *serviceOption {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.ProviderID = field.NewField(table, "provider_id")
	s.ServiceOptionTypeID = field.NewField(table, "service_option_type_id")
	s.Name = field.NewString(table, "name")
	s.Value = field.NewField(table, "value")
	s.Enabled = field.NewBool(table, "enabled")
	s.DisplayOrder = field.NewInt(table, "display_order")

	s.fillFieldMap()

	return s
}

func (s *serviceOption) WithContext(ctx context.Context) IServiceOptionDo {
	return s.serviceOptionDo.WithContext(ctx)
}

func (s serviceOption) TableName() string { return s.serviceOptionDo.TableName() }

func (s serviceOption) Alias() string { return s.serviceOptionDo.Alias() }

func (s serviceOption) Columns(cols ...field.Expr) gen.Columns {
	return s.serviceOptionDo.Columns(cols...)
}

func (s *serviceOption) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceOption) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["provider_id"] = s.ProviderID
	s.fieldMap["service_option_type_id"] = s.ServiceOptionTypeID
	s.fieldMap["name"] = s.Name
	s.fieldMap["value"] = s.Value
	s.fieldMap["enabled"] = s.Enabled
	s.fieldMap["display_order"] = s.DisplayOrder
}

func (s serviceOption) clone(db *gorm.DB) serviceOption {
	s.serviceOptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serviceOption) replaceDB(db *gorm.DB) serviceOption {
	s.serviceOptionDo.ReplaceDB(db)
	return s
}

type serviceOptionDo struct{ gen.DO }

type IServiceOptionDo interface {
	gen.SubQuery
	Debug() IServiceOptionDo
	WithContext(ctx context.Context) IServiceOptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceOptionDo
	WriteDB() IServiceOptionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceOptionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceOptionDo
	Not(conds ...gen.Condition) IServiceOptionDo
	Or(conds ...gen.Condition) IServiceOptionDo
	Select(conds ...field.Expr) IServiceOptionDo
	Where(conds ...gen.Condition) IServiceOptionDo
	Order(conds ...field.Expr) IServiceOptionDo
	Distinct(cols ...field.Expr) IServiceOptionDo
	Omit(cols ...field.Expr) IServiceOptionDo
	Join(table schema.Tabler, on ...field.Expr) IServiceOptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceOptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceOptionDo
	Group(cols ...field.Expr) IServiceOptionDo
	Having(conds ...gen.Condition) IServiceOptionDo
	Limit(limit int) IServiceOptionDo
	Offset(offset int) IServiceOptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceOptionDo
	Unscoped() IServiceOptionDo
	Create(values ...*domain.ServiceOption) error
	CreateInBatches(values []*domain.ServiceOption, batchSize int) error
	Save(values ...*domain.ServiceOption) error
	First() (*domain.ServiceOption, error)
	Take() (*domain.ServiceOption, error)
	Last() (*domain.ServiceOption, error)
	Find() ([]*domain.ServiceOption, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServiceOption, err error)
	FindInBatches(result *[]*domain.ServiceOption, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.ServiceOption) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceOptionDo
	Assign(attrs ...field.AssignExpr) IServiceOptionDo
	Joins(fields ...field.RelationField) IServiceOptionDo
	Preload(fields ...field.RelationField) IServiceOptionDo
	FirstOrInit() (*domain.ServiceOption, error)
	FirstOrCreate() (*domain.ServiceOption, error)
	FindByPage(offset int, limit int) (result []*domain.ServiceOption, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceOptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceOptionDo) Debug() IServiceOptionDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceOptionDo) WithContext(ctx context.Context) IServiceOptionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceOptionDo) ReadDB() IServiceOptionDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceOptionDo) WriteDB() IServiceOptionDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceOptionDo) Session(config *gorm.Session) IServiceOptionDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceOptionDo) Clauses(conds ...clause.Expression) IServiceOptionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceOptionDo) Returning(value interface{}, columns ...string) IServiceOptionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceOptionDo) Not(conds ...gen.Condition) IServiceOptionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceOptionDo) Or(conds ...gen.Condition) IServiceOptionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceOptionDo) Select(conds ...field.Expr) IServiceOptionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceOptionDo) Where(conds ...gen.Condition) IServiceOptionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceOptionDo) Order(conds ...field.Expr) IServiceOptionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceOptionDo) Distinct(cols ...field.Expr) IServiceOptionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceOptionDo) Omit(cols ...field.Expr) IServiceOptionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceOptionDo) Join(table schema.Tabler, on ...field.Expr) IServiceOptionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceOptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceOptionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceOptionDo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceOptionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceOptionDo) Group(cols ...field.Expr) IServiceOptionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceOptionDo) Having(conds ...gen.Condition) IServiceOptionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceOptionDo) Limit(limit int) IServiceOptionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceOptionDo) Offset(offset int) IServiceOptionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceOptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceOptionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceOptionDo) Unscoped() IServiceOptionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceOptionDo) Create(values ...*domain.ServiceOption) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceOptionDo) CreateInBatches(values []*domain.ServiceOption, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceOptionDo) Save(values ...*domain.ServiceOption) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceOptionDo) First() (*domain.ServiceOption, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceOption), nil
	}
}

func (s serviceOptionDo) Take() (*domain.ServiceOption, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceOption), nil
	}
}

func (s serviceOptionDo) Last() (*domain.ServiceOption, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceOption), nil
	}
}

func (s serviceOptionDo) Find() ([]*domain.ServiceOption, error) {
	result, err := s.DO.Find()
	return result.([]*domain.ServiceOption), err
}

func (s serviceOptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServiceOption, err error) {
	buf := make([]*domain.ServiceOption, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceOptionDo) FindInBatches(result *[]*domain.ServiceOption, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceOptionDo) Attrs(attrs ...field.AssignExpr) IServiceOptionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceOptionDo) Assign(attrs ...field.AssignExpr) IServiceOptionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceOptionDo) Joins(fields ...field.RelationField) IServiceOptionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceOptionDo) Preload(fields ...field.RelationField) IServiceOptionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceOptionDo) FirstOrInit() (*domain.ServiceOption, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceOption), nil
	}
}

func (s serviceOptionDo) FirstOrCreate() (*domain.ServiceOption, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceOption), nil
	}
}

func (s serviceOptionDo) FindByPage(offset int, limit int) (result []*domain.ServiceOption, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceOptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceOptionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceOptionDo) Delete(models ...*domain.ServiceOption) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceOptionDo) withDO(do gen.Dao) *serviceOptionDo {
	s.DO = *do.(*gen.DO)
	return s
}
