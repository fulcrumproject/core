// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                 = new(Query)
	Agent             *agent
	AgentType         *agentType
	Event             *event
	EventSubscription *eventSubscription
	Job               *job
	MetricEntry       *metricEntry
	MetricType        *metricType
	Participant       *participant
	Service           *service
	ServiceGroup      *serviceGroup
	ServiceOption     *serviceOption
	ServiceOptionType *serviceOptionType
	ServicePool       *servicePool
	ServicePoolSet    *servicePoolSet
	ServicePoolValue  *servicePoolValue
	ServiceType       *serviceType
	Token             *token
	VaultSecret       *vaultSecret
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Agent = &Q.Agent
	AgentType = &Q.AgentType
	Event = &Q.Event
	EventSubscription = &Q.EventSubscription
	Job = &Q.Job
	MetricEntry = &Q.MetricEntry
	MetricType = &Q.MetricType
	Participant = &Q.Participant
	Service = &Q.Service
	ServiceGroup = &Q.ServiceGroup
	ServiceOption = &Q.ServiceOption
	ServiceOptionType = &Q.ServiceOptionType
	ServicePool = &Q.ServicePool
	ServicePoolSet = &Q.ServicePoolSet
	ServicePoolValue = &Q.ServicePoolValue
	ServiceType = &Q.ServiceType
	Token = &Q.Token
	VaultSecret = &Q.VaultSecret
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		Agent:             newAgent(db, opts...),
		AgentType:         newAgentType(db, opts...),
		Event:             newEvent(db, opts...),
		EventSubscription: newEventSubscription(db, opts...),
		Job:               newJob(db, opts...),
		MetricEntry:       newMetricEntry(db, opts...),
		MetricType:        newMetricType(db, opts...),
		Participant:       newParticipant(db, opts...),
		Service:           newService(db, opts...),
		ServiceGroup:      newServiceGroup(db, opts...),
		ServiceOption:     newServiceOption(db, opts...),
		ServiceOptionType: newServiceOptionType(db, opts...),
		ServicePool:       newServicePool(db, opts...),
		ServicePoolSet:    newServicePoolSet(db, opts...),
		ServicePoolValue:  newServicePoolValue(db, opts...),
		ServiceType:       newServiceType(db, opts...),
		Token:             newToken(db, opts...),
		VaultSecret:       newVaultSecret(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Agent             agent
	AgentType         agentType
	Event             event
	EventSubscription eventSubscription
	Job               job
	MetricEntry       metricEntry
	MetricType        metricType
	Participant       participant
	Service           service
	ServiceGroup      serviceGroup
	ServiceOption     serviceOption
	ServiceOptionType serviceOptionType
	ServicePool       servicePool
	ServicePoolSet    servicePoolSet
	ServicePoolValue  servicePoolValue
	ServiceType       serviceType
	Token             token
	VaultSecret       vaultSecret
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Agent:             q.Agent.clone(db),
		AgentType:         q.AgentType.clone(db),
		Event:             q.Event.clone(db),
		EventSubscription: q.EventSubscription.clone(db),
		Job:               q.Job.clone(db),
		MetricEntry:       q.MetricEntry.clone(db),
		MetricType:        q.MetricType.clone(db),
		Participant:       q.Participant.clone(db),
		Service:           q.Service.clone(db),
		ServiceGroup:      q.ServiceGroup.clone(db),
		ServiceOption:     q.ServiceOption.clone(db),
		ServiceOptionType: q.ServiceOptionType.clone(db),
		ServicePool:       q.ServicePool.clone(db),
		ServicePoolSet:    q.ServicePoolSet.clone(db),
		ServicePoolValue:  q.ServicePoolValue.clone(db),
		ServiceType:       q.ServiceType.clone(db),
		Token:             q.Token.clone(db),
		VaultSecret:       q.VaultSecret.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Agent:             q.Agent.replaceDB(db),
		AgentType:         q.AgentType.replaceDB(db),
		Event:             q.Event.replaceDB(db),
		EventSubscription: q.EventSubscription.replaceDB(db),
		Job:               q.Job.replaceDB(db),
		MetricEntry:       q.MetricEntry.replaceDB(db),
		MetricType:        q.MetricType.replaceDB(db),
		Participant:       q.Participant.replaceDB(db),
		Service:           q.Service.replaceDB(db),
		ServiceGroup:      q.ServiceGroup.replaceDB(db),
		ServiceOption:     q.ServiceOption.replaceDB(db),
		ServiceOptionType: q.ServiceOptionType.replaceDB(db),
		ServicePool:       q.ServicePool.replaceDB(db),
		ServicePoolSet:    q.ServicePoolSet.replaceDB(db),
		ServicePoolValue:  q.ServicePoolValue.replaceDB(db),
		ServiceType:       q.ServiceType.replaceDB(db),
		Token:             q.Token.replaceDB(db),
		VaultSecret:       q.VaultSecret.replaceDB(db),
	}
}

type queryCtx struct {
	Agent             IAgentDo
	AgentType         IAgentTypeDo
	Event             IEventDo
	EventSubscription IEventSubscriptionDo
	Job               IJobDo
	MetricEntry       IMetricEntryDo
	MetricType        IMetricTypeDo
	Participant       IParticipantDo
	Service           IServiceDo
	ServiceGroup      IServiceGroupDo
	ServiceOption     IServiceOptionDo
	ServiceOptionType IServiceOptionTypeDo
	ServicePool       IServicePoolDo
	ServicePoolSet    IServicePoolSetDo
	ServicePoolValue  IServicePoolValueDo
	ServiceType       IServiceTypeDo
	Token             ITokenDo
	VaultSecret       IVaultSecretDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Agent:             q.Agent.WithContext(ctx),
		AgentType:         q.AgentType.WithContext(ctx),
		Event:             q.Event.WithContext(ctx),
		EventSubscription: q.EventSubscription.WithContext(ctx),
		Job:               q.Job.WithContext(ctx),
		MetricEntry:       q.MetricEntry.WithContext(ctx),
		MetricType:        q.MetricType.WithContext(ctx),
		Participant:       q.Participant.WithContext(ctx),
		Service:           q.Service.WithContext(ctx),
		ServiceGroup:      q.ServiceGroup.WithContext(ctx),
		ServiceOption:     q.ServiceOption.WithContext(ctx),
		ServiceOptionType: q.ServiceOptionType.WithContext(ctx),
		ServicePool:       q.ServicePool.WithContext(ctx),
		ServicePoolSet:    q.ServicePoolSet.WithContext(ctx),
		ServicePoolValue:  q.ServicePoolValue.WithContext(ctx),
		ServiceType:       q.ServiceType.WithContext(ctx),
		Token:             q.Token.WithContext(ctx),
		VaultSecret:       q.VaultSecret.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
