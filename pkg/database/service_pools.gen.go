// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newServicePool(db *gorm.DB, opts ...gen.DOOption) servicePool {
	_servicePool := servicePool{}

	_servicePool.servicePoolDo.UseDB(db, opts...)
	_servicePool.servicePoolDo.UseModel(&domain.ServicePool{})

	tableName := _servicePool.servicePoolDo.TableName()
	_servicePool.ALL = field.NewAsterisk(tableName)
	_servicePool.ID = field.NewField(tableName, "id")
	_servicePool.CreatedAt = field.NewTime(tableName, "created_at")
	_servicePool.UpdatedAt = field.NewTime(tableName, "updated_at")
	_servicePool.Name = field.NewString(tableName, "name")
	_servicePool.Type = field.NewString(tableName, "type")
	_servicePool.PropertyType = field.NewString(tableName, "property_type")
	_servicePool.GeneratorType = field.NewString(tableName, "generator_type")
	_servicePool.GeneratorConfig = field.NewField(tableName, "generator_config")
	_servicePool.ServicePoolSetID = field.NewField(tableName, "service_pool_set_id")
	_servicePool.ServicePoolSet = servicePoolBelongsToServicePoolSet{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ServicePoolSet", "domain.ServicePoolSet"),
		Provider: struct {
			field.RelationField
			Agents struct {
				field.RelationField
				AgentType struct {
					field.RelationField
					ServiceTypes struct {
						field.RelationField
					}
				}
				Provider struct {
					field.RelationField
				}
				ServicePoolSet struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("ServicePoolSet.Provider", "domain.Participant"),
			Agents: struct {
				field.RelationField
				AgentType struct {
					field.RelationField
					ServiceTypes struct {
						field.RelationField
					}
				}
				Provider struct {
					field.RelationField
				}
				ServicePoolSet struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("ServicePoolSet.Provider.Agents", "domain.Agent"),
				AgentType: struct {
					field.RelationField
					ServiceTypes struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("ServicePoolSet.Provider.Agents.AgentType", "domain.AgentType"),
					ServiceTypes: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("ServicePoolSet.Provider.Agents.AgentType.ServiceTypes", "domain.ServiceType"),
					},
				},
				Provider: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("ServicePoolSet.Provider.Agents.Provider", "domain.Participant"),
				},
				ServicePoolSet: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("ServicePoolSet.Provider.Agents.ServicePoolSet", "domain.ServicePoolSet"),
				},
			},
		},
	}

	_servicePool.fillFieldMap()

	return _servicePool
}

type servicePool struct {
	servicePoolDo servicePoolDo

	ALL              field.Asterisk
	ID               field.Field
	CreatedAt        field.Time
	UpdatedAt        field.Time
	Name             field.String
	Type             field.String
	PropertyType     field.String
	GeneratorType    field.String
	GeneratorConfig  field.Field
	ServicePoolSetID field.Field
	ServicePoolSet   servicePoolBelongsToServicePoolSet

	fieldMap map[string]field.Expr
}

func (s servicePool) Table(newTableName string) *servicePool {
	s.servicePoolDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s servicePool) As(alias string) *servicePool {
	s.servicePoolDo.DO = *(s.servicePoolDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *servicePool) updateTableName(table string) *servicePool {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Name = field.NewString(table, "name")
	s.Type = field.NewString(table, "type")
	s.PropertyType = field.NewString(table, "property_type")
	s.GeneratorType = field.NewString(table, "generator_type")
	s.GeneratorConfig = field.NewField(table, "generator_config")
	s.ServicePoolSetID = field.NewField(table, "service_pool_set_id")

	s.fillFieldMap()

	return s
}

func (s *servicePool) WithContext(ctx context.Context) IServicePoolDo {
	return s.servicePoolDo.WithContext(ctx)
}

func (s servicePool) TableName() string { return s.servicePoolDo.TableName() }

func (s servicePool) Alias() string { return s.servicePoolDo.Alias() }

func (s servicePool) Columns(cols ...field.Expr) gen.Columns { return s.servicePoolDo.Columns(cols...) }

func (s *servicePool) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *servicePool) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["type"] = s.Type
	s.fieldMap["property_type"] = s.PropertyType
	s.fieldMap["generator_type"] = s.GeneratorType
	s.fieldMap["generator_config"] = s.GeneratorConfig
	s.fieldMap["service_pool_set_id"] = s.ServicePoolSetID

}

func (s servicePool) clone(db *gorm.DB) servicePool {
	s.servicePoolDo.ReplaceConnPool(db.Statement.ConnPool)
	s.ServicePoolSet.db = db.Session(&gorm.Session{Initialized: true})
	s.ServicePoolSet.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s servicePool) replaceDB(db *gorm.DB) servicePool {
	s.servicePoolDo.ReplaceDB(db)
	s.ServicePoolSet.db = db.Session(&gorm.Session{})
	return s
}

type servicePoolBelongsToServicePoolSet struct {
	db *gorm.DB

	field.RelationField

	Provider struct {
		field.RelationField
		Agents struct {
			field.RelationField
			AgentType struct {
				field.RelationField
				ServiceTypes struct {
					field.RelationField
				}
			}
			Provider struct {
				field.RelationField
			}
			ServicePoolSet struct {
				field.RelationField
			}
		}
	}
}

func (a servicePoolBelongsToServicePoolSet) Where(conds ...field.Expr) *servicePoolBelongsToServicePoolSet {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a servicePoolBelongsToServicePoolSet) WithContext(ctx context.Context) *servicePoolBelongsToServicePoolSet {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a servicePoolBelongsToServicePoolSet) Session(session *gorm.Session) *servicePoolBelongsToServicePoolSet {
	a.db = a.db.Session(session)
	return &a
}

func (a servicePoolBelongsToServicePoolSet) Model(m *domain.ServicePool) *servicePoolBelongsToServicePoolSetTx {
	return &servicePoolBelongsToServicePoolSetTx{a.db.Model(m).Association(a.Name())}
}

func (a servicePoolBelongsToServicePoolSet) Unscoped() *servicePoolBelongsToServicePoolSet {
	a.db = a.db.Unscoped()
	return &a
}

type servicePoolBelongsToServicePoolSetTx struct{ tx *gorm.Association }

func (a servicePoolBelongsToServicePoolSetTx) Find() (result *domain.ServicePoolSet, err error) {
	return result, a.tx.Find(&result)
}

func (a servicePoolBelongsToServicePoolSetTx) Append(values ...*domain.ServicePoolSet) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a servicePoolBelongsToServicePoolSetTx) Replace(values ...*domain.ServicePoolSet) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a servicePoolBelongsToServicePoolSetTx) Delete(values ...*domain.ServicePoolSet) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a servicePoolBelongsToServicePoolSetTx) Clear() error {
	return a.tx.Clear()
}

func (a servicePoolBelongsToServicePoolSetTx) Count() int64 {
	return a.tx.Count()
}

func (a servicePoolBelongsToServicePoolSetTx) Unscoped() *servicePoolBelongsToServicePoolSetTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type servicePoolDo struct{ gen.DO }

type IServicePoolDo interface {
	gen.SubQuery
	Debug() IServicePoolDo
	WithContext(ctx context.Context) IServicePoolDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServicePoolDo
	WriteDB() IServicePoolDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServicePoolDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServicePoolDo
	Not(conds ...gen.Condition) IServicePoolDo
	Or(conds ...gen.Condition) IServicePoolDo
	Select(conds ...field.Expr) IServicePoolDo
	Where(conds ...gen.Condition) IServicePoolDo
	Order(conds ...field.Expr) IServicePoolDo
	Distinct(cols ...field.Expr) IServicePoolDo
	Omit(cols ...field.Expr) IServicePoolDo
	Join(table schema.Tabler, on ...field.Expr) IServicePoolDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServicePoolDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServicePoolDo
	Group(cols ...field.Expr) IServicePoolDo
	Having(conds ...gen.Condition) IServicePoolDo
	Limit(limit int) IServicePoolDo
	Offset(offset int) IServicePoolDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServicePoolDo
	Unscoped() IServicePoolDo
	Create(values ...*domain.ServicePool) error
	CreateInBatches(values []*domain.ServicePool, batchSize int) error
	Save(values ...*domain.ServicePool) error
	First() (*domain.ServicePool, error)
	Take() (*domain.ServicePool, error)
	Last() (*domain.ServicePool, error)
	Find() ([]*domain.ServicePool, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServicePool, err error)
	FindInBatches(result *[]*domain.ServicePool, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.ServicePool) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServicePoolDo
	Assign(attrs ...field.AssignExpr) IServicePoolDo
	Joins(fields ...field.RelationField) IServicePoolDo
	Preload(fields ...field.RelationField) IServicePoolDo
	FirstOrInit() (*domain.ServicePool, error)
	FirstOrCreate() (*domain.ServicePool, error)
	FindByPage(offset int, limit int) (result []*domain.ServicePool, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServicePoolDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s servicePoolDo) Debug() IServicePoolDo {
	return s.withDO(s.DO.Debug())
}

func (s servicePoolDo) WithContext(ctx context.Context) IServicePoolDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s servicePoolDo) ReadDB() IServicePoolDo {
	return s.Clauses(dbresolver.Read)
}

func (s servicePoolDo) WriteDB() IServicePoolDo {
	return s.Clauses(dbresolver.Write)
}

func (s servicePoolDo) Session(config *gorm.Session) IServicePoolDo {
	return s.withDO(s.DO.Session(config))
}

func (s servicePoolDo) Clauses(conds ...clause.Expression) IServicePoolDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s servicePoolDo) Returning(value interface{}, columns ...string) IServicePoolDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s servicePoolDo) Not(conds ...gen.Condition) IServicePoolDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s servicePoolDo) Or(conds ...gen.Condition) IServicePoolDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s servicePoolDo) Select(conds ...field.Expr) IServicePoolDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s servicePoolDo) Where(conds ...gen.Condition) IServicePoolDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s servicePoolDo) Order(conds ...field.Expr) IServicePoolDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s servicePoolDo) Distinct(cols ...field.Expr) IServicePoolDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s servicePoolDo) Omit(cols ...field.Expr) IServicePoolDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s servicePoolDo) Join(table schema.Tabler, on ...field.Expr) IServicePoolDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s servicePoolDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServicePoolDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s servicePoolDo) RightJoin(table schema.Tabler, on ...field.Expr) IServicePoolDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s servicePoolDo) Group(cols ...field.Expr) IServicePoolDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s servicePoolDo) Having(conds ...gen.Condition) IServicePoolDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s servicePoolDo) Limit(limit int) IServicePoolDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s servicePoolDo) Offset(offset int) IServicePoolDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s servicePoolDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServicePoolDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s servicePoolDo) Unscoped() IServicePoolDo {
	return s.withDO(s.DO.Unscoped())
}

func (s servicePoolDo) Create(values ...*domain.ServicePool) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s servicePoolDo) CreateInBatches(values []*domain.ServicePool, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s servicePoolDo) Save(values ...*domain.ServicePool) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s servicePoolDo) First() (*domain.ServicePool, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePool), nil
	}
}

func (s servicePoolDo) Take() (*domain.ServicePool, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePool), nil
	}
}

func (s servicePoolDo) Last() (*domain.ServicePool, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePool), nil
	}
}

func (s servicePoolDo) Find() ([]*domain.ServicePool, error) {
	result, err := s.DO.Find()
	return result.([]*domain.ServicePool), err
}

func (s servicePoolDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServicePool, err error) {
	buf := make([]*domain.ServicePool, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s servicePoolDo) FindInBatches(result *[]*domain.ServicePool, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s servicePoolDo) Attrs(attrs ...field.AssignExpr) IServicePoolDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s servicePoolDo) Assign(attrs ...field.AssignExpr) IServicePoolDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s servicePoolDo) Joins(fields ...field.RelationField) IServicePoolDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s servicePoolDo) Preload(fields ...field.RelationField) IServicePoolDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s servicePoolDo) FirstOrInit() (*domain.ServicePool, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePool), nil
	}
}

func (s servicePoolDo) FirstOrCreate() (*domain.ServicePool, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePool), nil
	}
}

func (s servicePoolDo) FindByPage(offset int, limit int) (result []*domain.ServicePool, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s servicePoolDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s servicePoolDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s servicePoolDo) Delete(models ...*domain.ServicePool) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *servicePoolDo) withDO(do gen.Dao) *servicePoolDo {
	s.DO = *do.(*gen.DO)
	return s
}
