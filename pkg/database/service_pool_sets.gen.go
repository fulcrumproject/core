// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newServicePoolSet(db *gorm.DB, opts ...gen.DOOption) servicePoolSet {
	_servicePoolSet := servicePoolSet{}

	_servicePoolSet.servicePoolSetDo.UseDB(db, opts...)
	_servicePoolSet.servicePoolSetDo.UseModel(&domain.ServicePoolSet{})

	tableName := _servicePoolSet.servicePoolSetDo.TableName()
	_servicePoolSet.ALL = field.NewAsterisk(tableName)
	_servicePoolSet.ID = field.NewField(tableName, "id")
	_servicePoolSet.CreatedAt = field.NewTime(tableName, "created_at")
	_servicePoolSet.UpdatedAt = field.NewTime(tableName, "updated_at")
	_servicePoolSet.Name = field.NewString(tableName, "name")
	_servicePoolSet.ProviderID = field.NewField(tableName, "provider_id")
	_servicePoolSet.Provider = servicePoolSetBelongsToProvider{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Provider", "domain.Participant"),
		Agents: struct {
			field.RelationField
			AgentType struct {
				field.RelationField
				ServiceTypes struct {
					field.RelationField
				}
			}
			Provider struct {
				field.RelationField
			}
			ServicePoolSet struct {
				field.RelationField
				Provider struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Provider.Agents", "domain.Agent"),
			AgentType: struct {
				field.RelationField
				ServiceTypes struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Provider.Agents.AgentType", "domain.AgentType"),
				ServiceTypes: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Provider.Agents.AgentType.ServiceTypes", "domain.ServiceType"),
				},
			},
			Provider: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Provider.Agents.Provider", "domain.Participant"),
			},
			ServicePoolSet: struct {
				field.RelationField
				Provider struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Provider.Agents.ServicePoolSet", "domain.ServicePoolSet"),
				Provider: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Provider.Agents.ServicePoolSet.Provider", "domain.Participant"),
				},
			},
		},
	}

	_servicePoolSet.fillFieldMap()

	return _servicePoolSet
}

type servicePoolSet struct {
	servicePoolSetDo servicePoolSetDo

	ALL        field.Asterisk
	ID         field.Field
	CreatedAt  field.Time
	UpdatedAt  field.Time
	Name       field.String
	ProviderID field.Field
	Provider   servicePoolSetBelongsToProvider

	fieldMap map[string]field.Expr
}

func (s servicePoolSet) Table(newTableName string) *servicePoolSet {
	s.servicePoolSetDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s servicePoolSet) As(alias string) *servicePoolSet {
	s.servicePoolSetDo.DO = *(s.servicePoolSetDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *servicePoolSet) updateTableName(table string) *servicePoolSet {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Name = field.NewString(table, "name")
	s.ProviderID = field.NewField(table, "provider_id")

	s.fillFieldMap()

	return s
}

func (s *servicePoolSet) WithContext(ctx context.Context) IServicePoolSetDo {
	return s.servicePoolSetDo.WithContext(ctx)
}

func (s servicePoolSet) TableName() string { return s.servicePoolSetDo.TableName() }

func (s servicePoolSet) Alias() string { return s.servicePoolSetDo.Alias() }

func (s servicePoolSet) Columns(cols ...field.Expr) gen.Columns {
	return s.servicePoolSetDo.Columns(cols...)
}

func (s *servicePoolSet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *servicePoolSet) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["provider_id"] = s.ProviderID

}

func (s servicePoolSet) clone(db *gorm.DB) servicePoolSet {
	s.servicePoolSetDo.ReplaceConnPool(db.Statement.ConnPool)
	s.Provider.db = db.Session(&gorm.Session{Initialized: true})
	s.Provider.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s servicePoolSet) replaceDB(db *gorm.DB) servicePoolSet {
	s.servicePoolSetDo.ReplaceDB(db)
	s.Provider.db = db.Session(&gorm.Session{})
	return s
}

type servicePoolSetBelongsToProvider struct {
	db *gorm.DB

	field.RelationField

	Agents struct {
		field.RelationField
		AgentType struct {
			field.RelationField
			ServiceTypes struct {
				field.RelationField
			}
		}
		Provider struct {
			field.RelationField
		}
		ServicePoolSet struct {
			field.RelationField
			Provider struct {
				field.RelationField
			}
		}
	}
}

func (a servicePoolSetBelongsToProvider) Where(conds ...field.Expr) *servicePoolSetBelongsToProvider {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a servicePoolSetBelongsToProvider) WithContext(ctx context.Context) *servicePoolSetBelongsToProvider {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a servicePoolSetBelongsToProvider) Session(session *gorm.Session) *servicePoolSetBelongsToProvider {
	a.db = a.db.Session(session)
	return &a
}

func (a servicePoolSetBelongsToProvider) Model(m *domain.ServicePoolSet) *servicePoolSetBelongsToProviderTx {
	return &servicePoolSetBelongsToProviderTx{a.db.Model(m).Association(a.Name())}
}

func (a servicePoolSetBelongsToProvider) Unscoped() *servicePoolSetBelongsToProvider {
	a.db = a.db.Unscoped()
	return &a
}

type servicePoolSetBelongsToProviderTx struct{ tx *gorm.Association }

func (a servicePoolSetBelongsToProviderTx) Find() (result *domain.Participant, err error) {
	return result, a.tx.Find(&result)
}

func (a servicePoolSetBelongsToProviderTx) Append(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a servicePoolSetBelongsToProviderTx) Replace(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a servicePoolSetBelongsToProviderTx) Delete(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a servicePoolSetBelongsToProviderTx) Clear() error {
	return a.tx.Clear()
}

func (a servicePoolSetBelongsToProviderTx) Count() int64 {
	return a.tx.Count()
}

func (a servicePoolSetBelongsToProviderTx) Unscoped() *servicePoolSetBelongsToProviderTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type servicePoolSetDo struct{ gen.DO }

type IServicePoolSetDo interface {
	gen.SubQuery
	Debug() IServicePoolSetDo
	WithContext(ctx context.Context) IServicePoolSetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServicePoolSetDo
	WriteDB() IServicePoolSetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServicePoolSetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServicePoolSetDo
	Not(conds ...gen.Condition) IServicePoolSetDo
	Or(conds ...gen.Condition) IServicePoolSetDo
	Select(conds ...field.Expr) IServicePoolSetDo
	Where(conds ...gen.Condition) IServicePoolSetDo
	Order(conds ...field.Expr) IServicePoolSetDo
	Distinct(cols ...field.Expr) IServicePoolSetDo
	Omit(cols ...field.Expr) IServicePoolSetDo
	Join(table schema.Tabler, on ...field.Expr) IServicePoolSetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServicePoolSetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServicePoolSetDo
	Group(cols ...field.Expr) IServicePoolSetDo
	Having(conds ...gen.Condition) IServicePoolSetDo
	Limit(limit int) IServicePoolSetDo
	Offset(offset int) IServicePoolSetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServicePoolSetDo
	Unscoped() IServicePoolSetDo
	Create(values ...*domain.ServicePoolSet) error
	CreateInBatches(values []*domain.ServicePoolSet, batchSize int) error
	Save(values ...*domain.ServicePoolSet) error
	First() (*domain.ServicePoolSet, error)
	Take() (*domain.ServicePoolSet, error)
	Last() (*domain.ServicePoolSet, error)
	Find() ([]*domain.ServicePoolSet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServicePoolSet, err error)
	FindInBatches(result *[]*domain.ServicePoolSet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.ServicePoolSet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServicePoolSetDo
	Assign(attrs ...field.AssignExpr) IServicePoolSetDo
	Joins(fields ...field.RelationField) IServicePoolSetDo
	Preload(fields ...field.RelationField) IServicePoolSetDo
	FirstOrInit() (*domain.ServicePoolSet, error)
	FirstOrCreate() (*domain.ServicePoolSet, error)
	FindByPage(offset int, limit int) (result []*domain.ServicePoolSet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServicePoolSetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s servicePoolSetDo) Debug() IServicePoolSetDo {
	return s.withDO(s.DO.Debug())
}

func (s servicePoolSetDo) WithContext(ctx context.Context) IServicePoolSetDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s servicePoolSetDo) ReadDB() IServicePoolSetDo {
	return s.Clauses(dbresolver.Read)
}

func (s servicePoolSetDo) WriteDB() IServicePoolSetDo {
	return s.Clauses(dbresolver.Write)
}

func (s servicePoolSetDo) Session(config *gorm.Session) IServicePoolSetDo {
	return s.withDO(s.DO.Session(config))
}

func (s servicePoolSetDo) Clauses(conds ...clause.Expression) IServicePoolSetDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s servicePoolSetDo) Returning(value interface{}, columns ...string) IServicePoolSetDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s servicePoolSetDo) Not(conds ...gen.Condition) IServicePoolSetDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s servicePoolSetDo) Or(conds ...gen.Condition) IServicePoolSetDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s servicePoolSetDo) Select(conds ...field.Expr) IServicePoolSetDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s servicePoolSetDo) Where(conds ...gen.Condition) IServicePoolSetDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s servicePoolSetDo) Order(conds ...field.Expr) IServicePoolSetDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s servicePoolSetDo) Distinct(cols ...field.Expr) IServicePoolSetDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s servicePoolSetDo) Omit(cols ...field.Expr) IServicePoolSetDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s servicePoolSetDo) Join(table schema.Tabler, on ...field.Expr) IServicePoolSetDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s servicePoolSetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServicePoolSetDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s servicePoolSetDo) RightJoin(table schema.Tabler, on ...field.Expr) IServicePoolSetDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s servicePoolSetDo) Group(cols ...field.Expr) IServicePoolSetDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s servicePoolSetDo) Having(conds ...gen.Condition) IServicePoolSetDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s servicePoolSetDo) Limit(limit int) IServicePoolSetDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s servicePoolSetDo) Offset(offset int) IServicePoolSetDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s servicePoolSetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServicePoolSetDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s servicePoolSetDo) Unscoped() IServicePoolSetDo {
	return s.withDO(s.DO.Unscoped())
}

func (s servicePoolSetDo) Create(values ...*domain.ServicePoolSet) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s servicePoolSetDo) CreateInBatches(values []*domain.ServicePoolSet, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s servicePoolSetDo) Save(values ...*domain.ServicePoolSet) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s servicePoolSetDo) First() (*domain.ServicePoolSet, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePoolSet), nil
	}
}

func (s servicePoolSetDo) Take() (*domain.ServicePoolSet, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePoolSet), nil
	}
}

func (s servicePoolSetDo) Last() (*domain.ServicePoolSet, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePoolSet), nil
	}
}

func (s servicePoolSetDo) Find() ([]*domain.ServicePoolSet, error) {
	result, err := s.DO.Find()
	return result.([]*domain.ServicePoolSet), err
}

func (s servicePoolSetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServicePoolSet, err error) {
	buf := make([]*domain.ServicePoolSet, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s servicePoolSetDo) FindInBatches(result *[]*domain.ServicePoolSet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s servicePoolSetDo) Attrs(attrs ...field.AssignExpr) IServicePoolSetDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s servicePoolSetDo) Assign(attrs ...field.AssignExpr) IServicePoolSetDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s servicePoolSetDo) Joins(fields ...field.RelationField) IServicePoolSetDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s servicePoolSetDo) Preload(fields ...field.RelationField) IServicePoolSetDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s servicePoolSetDo) FirstOrInit() (*domain.ServicePoolSet, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePoolSet), nil
	}
}

func (s servicePoolSetDo) FirstOrCreate() (*domain.ServicePoolSet, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePoolSet), nil
	}
}

func (s servicePoolSetDo) FindByPage(offset int, limit int) (result []*domain.ServicePoolSet, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s servicePoolSetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s servicePoolSetDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s servicePoolSetDo) Delete(models ...*domain.ServicePoolSet) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *servicePoolSetDo) withDO(do gen.Dao) *servicePoolSetDo {
	s.DO = *do.(*gen.DO)
	return s
}
