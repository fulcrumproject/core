// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newToken(db *gorm.DB, opts ...gen.DOOption) token {
	_token := token{}

	_token.tokenDo.UseDB(db, opts...)
	_token.tokenDo.UseModel(&domain.Token{})

	tableName := _token.tokenDo.TableName()
	_token.ALL = field.NewAsterisk(tableName)
	_token.ID = field.NewField(tableName, "id")
	_token.CreatedAt = field.NewTime(tableName, "created_at")
	_token.UpdatedAt = field.NewTime(tableName, "updated_at")
	_token.Name = field.NewString(tableName, "name")
	_token.Role = field.NewString(tableName, "role")
	_token.HashedValue = field.NewString(tableName, "hashed_value")
	_token.ExpireAt = field.NewTime(tableName, "expire_at")
	_token.ParticipantID = field.NewField(tableName, "participant_id")
	_token.AgentID = field.NewField(tableName, "agent_id")
	_token.Participant = tokenBelongsToParticipant{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Participant", "domain.Participant"),
		Agents: struct {
			field.RelationField
			AgentType struct {
				field.RelationField
				ServiceTypes struct {
					field.RelationField
				}
			}
			Provider struct {
				field.RelationField
			}
			ServicePoolSet struct {
				field.RelationField
				Provider struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Participant.Agents", "domain.Agent"),
			AgentType: struct {
				field.RelationField
				ServiceTypes struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Participant.Agents.AgentType", "domain.AgentType"),
				ServiceTypes: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Participant.Agents.AgentType.ServiceTypes", "domain.ServiceType"),
				},
			},
			Provider: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Participant.Agents.Provider", "domain.Participant"),
			},
			ServicePoolSet: struct {
				field.RelationField
				Provider struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Participant.Agents.ServicePoolSet", "domain.ServicePoolSet"),
				Provider: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Participant.Agents.ServicePoolSet.Provider", "domain.Participant"),
				},
			},
		},
	}

	_token.Agent = tokenBelongsToAgent{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Agent", "domain.Agent"),
	}

	_token.fillFieldMap()

	return _token
}

type token struct {
	tokenDo tokenDo

	ALL           field.Asterisk
	ID            field.Field
	CreatedAt     field.Time
	UpdatedAt     field.Time
	Name          field.String
	Role          field.String
	HashedValue   field.String
	ExpireAt      field.Time
	ParticipantID field.Field
	AgentID       field.Field
	Participant   tokenBelongsToParticipant

	Agent tokenBelongsToAgent

	fieldMap map[string]field.Expr
}

func (t token) Table(newTableName string) *token {
	t.tokenDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t token) As(alias string) *token {
	t.tokenDo.DO = *(t.tokenDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *token) updateTableName(table string) *token {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewField(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.Name = field.NewString(table, "name")
	t.Role = field.NewString(table, "role")
	t.HashedValue = field.NewString(table, "hashed_value")
	t.ExpireAt = field.NewTime(table, "expire_at")
	t.ParticipantID = field.NewField(table, "participant_id")
	t.AgentID = field.NewField(table, "agent_id")

	t.fillFieldMap()

	return t
}

func (t *token) WithContext(ctx context.Context) ITokenDo { return t.tokenDo.WithContext(ctx) }

func (t token) TableName() string { return t.tokenDo.TableName() }

func (t token) Alias() string { return t.tokenDo.Alias() }

func (t token) Columns(cols ...field.Expr) gen.Columns { return t.tokenDo.Columns(cols...) }

func (t *token) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *token) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["name"] = t.Name
	t.fieldMap["role"] = t.Role
	t.fieldMap["hashed_value"] = t.HashedValue
	t.fieldMap["expire_at"] = t.ExpireAt
	t.fieldMap["participant_id"] = t.ParticipantID
	t.fieldMap["agent_id"] = t.AgentID

}

func (t token) clone(db *gorm.DB) token {
	t.tokenDo.ReplaceConnPool(db.Statement.ConnPool)
	t.Participant.db = db.Session(&gorm.Session{Initialized: true})
	t.Participant.db.Statement.ConnPool = db.Statement.ConnPool
	t.Agent.db = db.Session(&gorm.Session{Initialized: true})
	t.Agent.db.Statement.ConnPool = db.Statement.ConnPool
	return t
}

func (t token) replaceDB(db *gorm.DB) token {
	t.tokenDo.ReplaceDB(db)
	t.Participant.db = db.Session(&gorm.Session{})
	t.Agent.db = db.Session(&gorm.Session{})
	return t
}

type tokenBelongsToParticipant struct {
	db *gorm.DB

	field.RelationField

	Agents struct {
		field.RelationField
		AgentType struct {
			field.RelationField
			ServiceTypes struct {
				field.RelationField
			}
		}
		Provider struct {
			field.RelationField
		}
		ServicePoolSet struct {
			field.RelationField
			Provider struct {
				field.RelationField
			}
		}
	}
}

func (a tokenBelongsToParticipant) Where(conds ...field.Expr) *tokenBelongsToParticipant {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a tokenBelongsToParticipant) WithContext(ctx context.Context) *tokenBelongsToParticipant {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a tokenBelongsToParticipant) Session(session *gorm.Session) *tokenBelongsToParticipant {
	a.db = a.db.Session(session)
	return &a
}

func (a tokenBelongsToParticipant) Model(m *domain.Token) *tokenBelongsToParticipantTx {
	return &tokenBelongsToParticipantTx{a.db.Model(m).Association(a.Name())}
}

func (a tokenBelongsToParticipant) Unscoped() *tokenBelongsToParticipant {
	a.db = a.db.Unscoped()
	return &a
}

type tokenBelongsToParticipantTx struct{ tx *gorm.Association }

func (a tokenBelongsToParticipantTx) Find() (result *domain.Participant, err error) {
	return result, a.tx.Find(&result)
}

func (a tokenBelongsToParticipantTx) Append(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a tokenBelongsToParticipantTx) Replace(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a tokenBelongsToParticipantTx) Delete(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a tokenBelongsToParticipantTx) Clear() error {
	return a.tx.Clear()
}

func (a tokenBelongsToParticipantTx) Count() int64 {
	return a.tx.Count()
}

func (a tokenBelongsToParticipantTx) Unscoped() *tokenBelongsToParticipantTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type tokenBelongsToAgent struct {
	db *gorm.DB

	field.RelationField
}

func (a tokenBelongsToAgent) Where(conds ...field.Expr) *tokenBelongsToAgent {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a tokenBelongsToAgent) WithContext(ctx context.Context) *tokenBelongsToAgent {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a tokenBelongsToAgent) Session(session *gorm.Session) *tokenBelongsToAgent {
	a.db = a.db.Session(session)
	return &a
}

func (a tokenBelongsToAgent) Model(m *domain.Token) *tokenBelongsToAgentTx {
	return &tokenBelongsToAgentTx{a.db.Model(m).Association(a.Name())}
}

func (a tokenBelongsToAgent) Unscoped() *tokenBelongsToAgent {
	a.db = a.db.Unscoped()
	return &a
}

type tokenBelongsToAgentTx struct{ tx *gorm.Association }

func (a tokenBelongsToAgentTx) Find() (result *domain.Agent, err error) {
	return result, a.tx.Find(&result)
}

func (a tokenBelongsToAgentTx) Append(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a tokenBelongsToAgentTx) Replace(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a tokenBelongsToAgentTx) Delete(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a tokenBelongsToAgentTx) Clear() error {
	return a.tx.Clear()
}

func (a tokenBelongsToAgentTx) Count() int64 {
	return a.tx.Count()
}

func (a tokenBelongsToAgentTx) Unscoped() *tokenBelongsToAgentTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type tokenDo struct{ gen.DO }

type ITokenDo interface {
	gen.SubQuery
	Debug() ITokenDo
	WithContext(ctx context.Context) ITokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITokenDo
	WriteDB() ITokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITokenDo
	Not(conds ...gen.Condition) ITokenDo
	Or(conds ...gen.Condition) ITokenDo
	Select(conds ...field.Expr) ITokenDo
	Where(conds ...gen.Condition) ITokenDo
	Order(conds ...field.Expr) ITokenDo
	Distinct(cols ...field.Expr) ITokenDo
	Omit(cols ...field.Expr) ITokenDo
	Join(table schema.Tabler, on ...field.Expr) ITokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITokenDo
	Group(cols ...field.Expr) ITokenDo
	Having(conds ...gen.Condition) ITokenDo
	Limit(limit int) ITokenDo
	Offset(offset int) ITokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITokenDo
	Unscoped() ITokenDo
	Create(values ...*domain.Token) error
	CreateInBatches(values []*domain.Token, batchSize int) error
	Save(values ...*domain.Token) error
	First() (*domain.Token, error)
	Take() (*domain.Token, error)
	Last() (*domain.Token, error)
	Find() ([]*domain.Token, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Token, err error)
	FindInBatches(result *[]*domain.Token, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.Token) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITokenDo
	Assign(attrs ...field.AssignExpr) ITokenDo
	Joins(fields ...field.RelationField) ITokenDo
	Preload(fields ...field.RelationField) ITokenDo
	FirstOrInit() (*domain.Token, error)
	FirstOrCreate() (*domain.Token, error)
	FindByPage(offset int, limit int) (result []*domain.Token, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tokenDo) Debug() ITokenDo {
	return t.withDO(t.DO.Debug())
}

func (t tokenDo) WithContext(ctx context.Context) ITokenDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tokenDo) ReadDB() ITokenDo {
	return t.Clauses(dbresolver.Read)
}

func (t tokenDo) WriteDB() ITokenDo {
	return t.Clauses(dbresolver.Write)
}

func (t tokenDo) Session(config *gorm.Session) ITokenDo {
	return t.withDO(t.DO.Session(config))
}

func (t tokenDo) Clauses(conds ...clause.Expression) ITokenDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tokenDo) Returning(value interface{}, columns ...string) ITokenDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tokenDo) Not(conds ...gen.Condition) ITokenDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tokenDo) Or(conds ...gen.Condition) ITokenDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tokenDo) Select(conds ...field.Expr) ITokenDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tokenDo) Where(conds ...gen.Condition) ITokenDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tokenDo) Order(conds ...field.Expr) ITokenDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tokenDo) Distinct(cols ...field.Expr) ITokenDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tokenDo) Omit(cols ...field.Expr) ITokenDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tokenDo) Join(table schema.Tabler, on ...field.Expr) ITokenDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITokenDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tokenDo) RightJoin(table schema.Tabler, on ...field.Expr) ITokenDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tokenDo) Group(cols ...field.Expr) ITokenDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tokenDo) Having(conds ...gen.Condition) ITokenDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tokenDo) Limit(limit int) ITokenDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tokenDo) Offset(offset int) ITokenDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITokenDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tokenDo) Unscoped() ITokenDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tokenDo) Create(values ...*domain.Token) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tokenDo) CreateInBatches(values []*domain.Token, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tokenDo) Save(values ...*domain.Token) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tokenDo) First() (*domain.Token, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Token), nil
	}
}

func (t tokenDo) Take() (*domain.Token, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Token), nil
	}
}

func (t tokenDo) Last() (*domain.Token, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Token), nil
	}
}

func (t tokenDo) Find() ([]*domain.Token, error) {
	result, err := t.DO.Find()
	return result.([]*domain.Token), err
}

func (t tokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Token, err error) {
	buf := make([]*domain.Token, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tokenDo) FindInBatches(result *[]*domain.Token, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tokenDo) Attrs(attrs ...field.AssignExpr) ITokenDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tokenDo) Assign(attrs ...field.AssignExpr) ITokenDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tokenDo) Joins(fields ...field.RelationField) ITokenDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tokenDo) Preload(fields ...field.RelationField) ITokenDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tokenDo) FirstOrInit() (*domain.Token, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Token), nil
	}
}

func (t tokenDo) FirstOrCreate() (*domain.Token, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Token), nil
	}
}

func (t tokenDo) FindByPage(offset int, limit int) (result []*domain.Token, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tokenDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tokenDo) Delete(models ...*domain.Token) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tokenDo) withDO(do gen.Dao) *tokenDo {
	t.DO = *do.(*gen.DO)
	return t
}
