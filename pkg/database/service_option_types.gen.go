// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newServiceOptionType(db *gorm.DB, opts ...gen.DOOption) serviceOptionType {
	_serviceOptionType := serviceOptionType{}

	_serviceOptionType.serviceOptionTypeDo.UseDB(db, opts...)
	_serviceOptionType.serviceOptionTypeDo.UseModel(&domain.ServiceOptionType{})

	tableName := _serviceOptionType.serviceOptionTypeDo.TableName()
	_serviceOptionType.ALL = field.NewAsterisk(tableName)
	_serviceOptionType.ID = field.NewField(tableName, "id")
	_serviceOptionType.CreatedAt = field.NewTime(tableName, "created_at")
	_serviceOptionType.UpdatedAt = field.NewTime(tableName, "updated_at")
	_serviceOptionType.Name = field.NewString(tableName, "name")
	_serviceOptionType.Type = field.NewString(tableName, "type")
	_serviceOptionType.Description = field.NewString(tableName, "description")

	_serviceOptionType.fillFieldMap()

	return _serviceOptionType
}

type serviceOptionType struct {
	serviceOptionTypeDo serviceOptionTypeDo

	ALL         field.Asterisk
	ID          field.Field
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Name        field.String
	Type        field.String
	Description field.String

	fieldMap map[string]field.Expr
}

func (s serviceOptionType) Table(newTableName string) *serviceOptionType {
	s.serviceOptionTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceOptionType) As(alias string) *serviceOptionType {
	s.serviceOptionTypeDo.DO = *(s.serviceOptionTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceOptionType) updateTableName(table string) *serviceOptionType {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Name = field.NewString(table, "name")
	s.Type = field.NewString(table, "type")
	s.Description = field.NewString(table, "description")

	s.fillFieldMap()

	return s
}

func (s *serviceOptionType) WithContext(ctx context.Context) IServiceOptionTypeDo {
	return s.serviceOptionTypeDo.WithContext(ctx)
}

func (s serviceOptionType) TableName() string { return s.serviceOptionTypeDo.TableName() }

func (s serviceOptionType) Alias() string { return s.serviceOptionTypeDo.Alias() }

func (s serviceOptionType) Columns(cols ...field.Expr) gen.Columns {
	return s.serviceOptionTypeDo.Columns(cols...)
}

func (s *serviceOptionType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceOptionType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["type"] = s.Type
	s.fieldMap["description"] = s.Description
}

func (s serviceOptionType) clone(db *gorm.DB) serviceOptionType {
	s.serviceOptionTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serviceOptionType) replaceDB(db *gorm.DB) serviceOptionType {
	s.serviceOptionTypeDo.ReplaceDB(db)
	return s
}

type serviceOptionTypeDo struct{ gen.DO }

type IServiceOptionTypeDo interface {
	gen.SubQuery
	Debug() IServiceOptionTypeDo
	WithContext(ctx context.Context) IServiceOptionTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceOptionTypeDo
	WriteDB() IServiceOptionTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceOptionTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceOptionTypeDo
	Not(conds ...gen.Condition) IServiceOptionTypeDo
	Or(conds ...gen.Condition) IServiceOptionTypeDo
	Select(conds ...field.Expr) IServiceOptionTypeDo
	Where(conds ...gen.Condition) IServiceOptionTypeDo
	Order(conds ...field.Expr) IServiceOptionTypeDo
	Distinct(cols ...field.Expr) IServiceOptionTypeDo
	Omit(cols ...field.Expr) IServiceOptionTypeDo
	Join(table schema.Tabler, on ...field.Expr) IServiceOptionTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceOptionTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceOptionTypeDo
	Group(cols ...field.Expr) IServiceOptionTypeDo
	Having(conds ...gen.Condition) IServiceOptionTypeDo
	Limit(limit int) IServiceOptionTypeDo
	Offset(offset int) IServiceOptionTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceOptionTypeDo
	Unscoped() IServiceOptionTypeDo
	Create(values ...*domain.ServiceOptionType) error
	CreateInBatches(values []*domain.ServiceOptionType, batchSize int) error
	Save(values ...*domain.ServiceOptionType) error
	First() (*domain.ServiceOptionType, error)
	Take() (*domain.ServiceOptionType, error)
	Last() (*domain.ServiceOptionType, error)
	Find() ([]*domain.ServiceOptionType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServiceOptionType, err error)
	FindInBatches(result *[]*domain.ServiceOptionType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.ServiceOptionType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceOptionTypeDo
	Assign(attrs ...field.AssignExpr) IServiceOptionTypeDo
	Joins(fields ...field.RelationField) IServiceOptionTypeDo
	Preload(fields ...field.RelationField) IServiceOptionTypeDo
	FirstOrInit() (*domain.ServiceOptionType, error)
	FirstOrCreate() (*domain.ServiceOptionType, error)
	FindByPage(offset int, limit int) (result []*domain.ServiceOptionType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceOptionTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceOptionTypeDo) Debug() IServiceOptionTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceOptionTypeDo) WithContext(ctx context.Context) IServiceOptionTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceOptionTypeDo) ReadDB() IServiceOptionTypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceOptionTypeDo) WriteDB() IServiceOptionTypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceOptionTypeDo) Session(config *gorm.Session) IServiceOptionTypeDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceOptionTypeDo) Clauses(conds ...clause.Expression) IServiceOptionTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceOptionTypeDo) Returning(value interface{}, columns ...string) IServiceOptionTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceOptionTypeDo) Not(conds ...gen.Condition) IServiceOptionTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceOptionTypeDo) Or(conds ...gen.Condition) IServiceOptionTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceOptionTypeDo) Select(conds ...field.Expr) IServiceOptionTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceOptionTypeDo) Where(conds ...gen.Condition) IServiceOptionTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceOptionTypeDo) Order(conds ...field.Expr) IServiceOptionTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceOptionTypeDo) Distinct(cols ...field.Expr) IServiceOptionTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceOptionTypeDo) Omit(cols ...field.Expr) IServiceOptionTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceOptionTypeDo) Join(table schema.Tabler, on ...field.Expr) IServiceOptionTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceOptionTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceOptionTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceOptionTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceOptionTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceOptionTypeDo) Group(cols ...field.Expr) IServiceOptionTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceOptionTypeDo) Having(conds ...gen.Condition) IServiceOptionTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceOptionTypeDo) Limit(limit int) IServiceOptionTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceOptionTypeDo) Offset(offset int) IServiceOptionTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceOptionTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceOptionTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceOptionTypeDo) Unscoped() IServiceOptionTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceOptionTypeDo) Create(values ...*domain.ServiceOptionType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceOptionTypeDo) CreateInBatches(values []*domain.ServiceOptionType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceOptionTypeDo) Save(values ...*domain.ServiceOptionType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceOptionTypeDo) First() (*domain.ServiceOptionType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceOptionType), nil
	}
}

func (s serviceOptionTypeDo) Take() (*domain.ServiceOptionType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceOptionType), nil
	}
}

func (s serviceOptionTypeDo) Last() (*domain.ServiceOptionType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceOptionType), nil
	}
}

func (s serviceOptionTypeDo) Find() ([]*domain.ServiceOptionType, error) {
	result, err := s.DO.Find()
	return result.([]*domain.ServiceOptionType), err
}

func (s serviceOptionTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServiceOptionType, err error) {
	buf := make([]*domain.ServiceOptionType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceOptionTypeDo) FindInBatches(result *[]*domain.ServiceOptionType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceOptionTypeDo) Attrs(attrs ...field.AssignExpr) IServiceOptionTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceOptionTypeDo) Assign(attrs ...field.AssignExpr) IServiceOptionTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceOptionTypeDo) Joins(fields ...field.RelationField) IServiceOptionTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceOptionTypeDo) Preload(fields ...field.RelationField) IServiceOptionTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceOptionTypeDo) FirstOrInit() (*domain.ServiceOptionType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceOptionType), nil
	}
}

func (s serviceOptionTypeDo) FirstOrCreate() (*domain.ServiceOptionType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServiceOptionType), nil
	}
}

func (s serviceOptionTypeDo) FindByPage(offset int, limit int) (result []*domain.ServiceOptionType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceOptionTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceOptionTypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceOptionTypeDo) Delete(models ...*domain.ServiceOptionType) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceOptionTypeDo) withDO(do gen.Dao) *serviceOptionTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
