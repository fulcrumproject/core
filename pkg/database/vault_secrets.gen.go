// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newVaultSecret(db *gorm.DB, opts ...gen.DOOption) vaultSecret {
	_vaultSecret := vaultSecret{}

	_vaultSecret.vaultSecretDo.UseDB(db, opts...)
	_vaultSecret.vaultSecretDo.UseModel(&domain.VaultSecret{})

	tableName := _vaultSecret.vaultSecretDo.TableName()
	_vaultSecret.ALL = field.NewAsterisk(tableName)
	_vaultSecret.ID = field.NewField(tableName, "id")
	_vaultSecret.CreatedAt = field.NewTime(tableName, "created_at")
	_vaultSecret.UpdatedAt = field.NewTime(tableName, "updated_at")
	_vaultSecret.Reference = field.NewString(tableName, "reference")
	_vaultSecret.EncryptedValue = field.NewBytes(tableName, "encrypted_value")

	_vaultSecret.fillFieldMap()

	return _vaultSecret
}

type vaultSecret struct {
	vaultSecretDo vaultSecretDo

	ALL            field.Asterisk
	ID             field.Field
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Reference      field.String
	EncryptedValue field.Bytes

	fieldMap map[string]field.Expr
}

func (v vaultSecret) Table(newTableName string) *vaultSecret {
	v.vaultSecretDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vaultSecret) As(alias string) *vaultSecret {
	v.vaultSecretDo.DO = *(v.vaultSecretDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vaultSecret) updateTableName(table string) *vaultSecret {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewField(table, "id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.Reference = field.NewString(table, "reference")
	v.EncryptedValue = field.NewBytes(table, "encrypted_value")

	v.fillFieldMap()

	return v
}

func (v *vaultSecret) WithContext(ctx context.Context) IVaultSecretDo {
	return v.vaultSecretDo.WithContext(ctx)
}

func (v vaultSecret) TableName() string { return v.vaultSecretDo.TableName() }

func (v vaultSecret) Alias() string { return v.vaultSecretDo.Alias() }

func (v vaultSecret) Columns(cols ...field.Expr) gen.Columns { return v.vaultSecretDo.Columns(cols...) }

func (v *vaultSecret) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vaultSecret) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 5)
	v.fieldMap["id"] = v.ID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["reference"] = v.Reference
	v.fieldMap["encrypted_value"] = v.EncryptedValue
}

func (v vaultSecret) clone(db *gorm.DB) vaultSecret {
	v.vaultSecretDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vaultSecret) replaceDB(db *gorm.DB) vaultSecret {
	v.vaultSecretDo.ReplaceDB(db)
	return v
}

type vaultSecretDo struct{ gen.DO }

type IVaultSecretDo interface {
	gen.SubQuery
	Debug() IVaultSecretDo
	WithContext(ctx context.Context) IVaultSecretDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVaultSecretDo
	WriteDB() IVaultSecretDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVaultSecretDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVaultSecretDo
	Not(conds ...gen.Condition) IVaultSecretDo
	Or(conds ...gen.Condition) IVaultSecretDo
	Select(conds ...field.Expr) IVaultSecretDo
	Where(conds ...gen.Condition) IVaultSecretDo
	Order(conds ...field.Expr) IVaultSecretDo
	Distinct(cols ...field.Expr) IVaultSecretDo
	Omit(cols ...field.Expr) IVaultSecretDo
	Join(table schema.Tabler, on ...field.Expr) IVaultSecretDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVaultSecretDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVaultSecretDo
	Group(cols ...field.Expr) IVaultSecretDo
	Having(conds ...gen.Condition) IVaultSecretDo
	Limit(limit int) IVaultSecretDo
	Offset(offset int) IVaultSecretDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVaultSecretDo
	Unscoped() IVaultSecretDo
	Create(values ...*domain.VaultSecret) error
	CreateInBatches(values []*domain.VaultSecret, batchSize int) error
	Save(values ...*domain.VaultSecret) error
	First() (*domain.VaultSecret, error)
	Take() (*domain.VaultSecret, error)
	Last() (*domain.VaultSecret, error)
	Find() ([]*domain.VaultSecret, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.VaultSecret, err error)
	FindInBatches(result *[]*domain.VaultSecret, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.VaultSecret) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVaultSecretDo
	Assign(attrs ...field.AssignExpr) IVaultSecretDo
	Joins(fields ...field.RelationField) IVaultSecretDo
	Preload(fields ...field.RelationField) IVaultSecretDo
	FirstOrInit() (*domain.VaultSecret, error)
	FirstOrCreate() (*domain.VaultSecret, error)
	FindByPage(offset int, limit int) (result []*domain.VaultSecret, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVaultSecretDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v vaultSecretDo) Debug() IVaultSecretDo {
	return v.withDO(v.DO.Debug())
}

func (v vaultSecretDo) WithContext(ctx context.Context) IVaultSecretDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vaultSecretDo) ReadDB() IVaultSecretDo {
	return v.Clauses(dbresolver.Read)
}

func (v vaultSecretDo) WriteDB() IVaultSecretDo {
	return v.Clauses(dbresolver.Write)
}

func (v vaultSecretDo) Session(config *gorm.Session) IVaultSecretDo {
	return v.withDO(v.DO.Session(config))
}

func (v vaultSecretDo) Clauses(conds ...clause.Expression) IVaultSecretDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vaultSecretDo) Returning(value interface{}, columns ...string) IVaultSecretDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vaultSecretDo) Not(conds ...gen.Condition) IVaultSecretDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vaultSecretDo) Or(conds ...gen.Condition) IVaultSecretDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vaultSecretDo) Select(conds ...field.Expr) IVaultSecretDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vaultSecretDo) Where(conds ...gen.Condition) IVaultSecretDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vaultSecretDo) Order(conds ...field.Expr) IVaultSecretDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vaultSecretDo) Distinct(cols ...field.Expr) IVaultSecretDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vaultSecretDo) Omit(cols ...field.Expr) IVaultSecretDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vaultSecretDo) Join(table schema.Tabler, on ...field.Expr) IVaultSecretDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vaultSecretDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVaultSecretDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vaultSecretDo) RightJoin(table schema.Tabler, on ...field.Expr) IVaultSecretDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vaultSecretDo) Group(cols ...field.Expr) IVaultSecretDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vaultSecretDo) Having(conds ...gen.Condition) IVaultSecretDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vaultSecretDo) Limit(limit int) IVaultSecretDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vaultSecretDo) Offset(offset int) IVaultSecretDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vaultSecretDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVaultSecretDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vaultSecretDo) Unscoped() IVaultSecretDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vaultSecretDo) Create(values ...*domain.VaultSecret) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vaultSecretDo) CreateInBatches(values []*domain.VaultSecret, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vaultSecretDo) Save(values ...*domain.VaultSecret) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vaultSecretDo) First() (*domain.VaultSecret, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.VaultSecret), nil
	}
}

func (v vaultSecretDo) Take() (*domain.VaultSecret, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.VaultSecret), nil
	}
}

func (v vaultSecretDo) Last() (*domain.VaultSecret, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.VaultSecret), nil
	}
}

func (v vaultSecretDo) Find() ([]*domain.VaultSecret, error) {
	result, err := v.DO.Find()
	return result.([]*domain.VaultSecret), err
}

func (v vaultSecretDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.VaultSecret, err error) {
	buf := make([]*domain.VaultSecret, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vaultSecretDo) FindInBatches(result *[]*domain.VaultSecret, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vaultSecretDo) Attrs(attrs ...field.AssignExpr) IVaultSecretDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vaultSecretDo) Assign(attrs ...field.AssignExpr) IVaultSecretDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vaultSecretDo) Joins(fields ...field.RelationField) IVaultSecretDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vaultSecretDo) Preload(fields ...field.RelationField) IVaultSecretDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vaultSecretDo) FirstOrInit() (*domain.VaultSecret, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.VaultSecret), nil
	}
}

func (v vaultSecretDo) FirstOrCreate() (*domain.VaultSecret, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.VaultSecret), nil
	}
}

func (v vaultSecretDo) FindByPage(offset int, limit int) (result []*domain.VaultSecret, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vaultSecretDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vaultSecretDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vaultSecretDo) Delete(models ...*domain.VaultSecret) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vaultSecretDo) withDO(do gen.Dao) *vaultSecretDo {
	v.DO = *do.(*gen.DO)
	return v
}
