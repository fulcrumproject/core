// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newEventSubscription(db *gorm.DB, opts ...gen.DOOption) eventSubscription {
	_eventSubscription := eventSubscription{}

	_eventSubscription.eventSubscriptionDo.UseDB(db, opts...)
	_eventSubscription.eventSubscriptionDo.UseModel(&domain.EventSubscription{})

	tableName := _eventSubscription.eventSubscriptionDo.TableName()
	_eventSubscription.ALL = field.NewAsterisk(tableName)
	_eventSubscription.ID = field.NewField(tableName, "id")
	_eventSubscription.CreatedAt = field.NewTime(tableName, "created_at")
	_eventSubscription.UpdatedAt = field.NewTime(tableName, "updated_at")
	_eventSubscription.SubscriberID = field.NewString(tableName, "subscriber_id")
	_eventSubscription.LastEventSequenceProcessed = field.NewInt64(tableName, "last_event_sequence_processed")
	_eventSubscription.LeaseOwnerInstanceID = field.NewString(tableName, "lease_owner_instance_id")
	_eventSubscription.LeaseAcquiredAt = field.NewTime(tableName, "lease_acquired_at")
	_eventSubscription.LeaseExpiresAt = field.NewTime(tableName, "lease_expires_at")
	_eventSubscription.IsActive = field.NewBool(tableName, "is_active")

	_eventSubscription.fillFieldMap()

	return _eventSubscription
}

type eventSubscription struct {
	eventSubscriptionDo eventSubscriptionDo

	ALL                        field.Asterisk
	ID                         field.Field
	CreatedAt                  field.Time
	UpdatedAt                  field.Time
	SubscriberID               field.String
	LastEventSequenceProcessed field.Int64
	LeaseOwnerInstanceID       field.String
	LeaseAcquiredAt            field.Time
	LeaseExpiresAt             field.Time
	IsActive                   field.Bool

	fieldMap map[string]field.Expr
}

func (e eventSubscription) Table(newTableName string) *eventSubscription {
	e.eventSubscriptionDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eventSubscription) As(alias string) *eventSubscription {
	e.eventSubscriptionDo.DO = *(e.eventSubscriptionDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eventSubscription) updateTableName(table string) *eventSubscription {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewField(table, "id")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.SubscriberID = field.NewString(table, "subscriber_id")
	e.LastEventSequenceProcessed = field.NewInt64(table, "last_event_sequence_processed")
	e.LeaseOwnerInstanceID = field.NewString(table, "lease_owner_instance_id")
	e.LeaseAcquiredAt = field.NewTime(table, "lease_acquired_at")
	e.LeaseExpiresAt = field.NewTime(table, "lease_expires_at")
	e.IsActive = field.NewBool(table, "is_active")

	e.fillFieldMap()

	return e
}

func (e *eventSubscription) WithContext(ctx context.Context) IEventSubscriptionDo {
	return e.eventSubscriptionDo.WithContext(ctx)
}

func (e eventSubscription) TableName() string { return e.eventSubscriptionDo.TableName() }

func (e eventSubscription) Alias() string { return e.eventSubscriptionDo.Alias() }

func (e eventSubscription) Columns(cols ...field.Expr) gen.Columns {
	return e.eventSubscriptionDo.Columns(cols...)
}

func (e *eventSubscription) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eventSubscription) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["subscriber_id"] = e.SubscriberID
	e.fieldMap["last_event_sequence_processed"] = e.LastEventSequenceProcessed
	e.fieldMap["lease_owner_instance_id"] = e.LeaseOwnerInstanceID
	e.fieldMap["lease_acquired_at"] = e.LeaseAcquiredAt
	e.fieldMap["lease_expires_at"] = e.LeaseExpiresAt
	e.fieldMap["is_active"] = e.IsActive
}

func (e eventSubscription) clone(db *gorm.DB) eventSubscription {
	e.eventSubscriptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eventSubscription) replaceDB(db *gorm.DB) eventSubscription {
	e.eventSubscriptionDo.ReplaceDB(db)
	return e
}

type eventSubscriptionDo struct{ gen.DO }

type IEventSubscriptionDo interface {
	gen.SubQuery
	Debug() IEventSubscriptionDo
	WithContext(ctx context.Context) IEventSubscriptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEventSubscriptionDo
	WriteDB() IEventSubscriptionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEventSubscriptionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEventSubscriptionDo
	Not(conds ...gen.Condition) IEventSubscriptionDo
	Or(conds ...gen.Condition) IEventSubscriptionDo
	Select(conds ...field.Expr) IEventSubscriptionDo
	Where(conds ...gen.Condition) IEventSubscriptionDo
	Order(conds ...field.Expr) IEventSubscriptionDo
	Distinct(cols ...field.Expr) IEventSubscriptionDo
	Omit(cols ...field.Expr) IEventSubscriptionDo
	Join(table schema.Tabler, on ...field.Expr) IEventSubscriptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEventSubscriptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEventSubscriptionDo
	Group(cols ...field.Expr) IEventSubscriptionDo
	Having(conds ...gen.Condition) IEventSubscriptionDo
	Limit(limit int) IEventSubscriptionDo
	Offset(offset int) IEventSubscriptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEventSubscriptionDo
	Unscoped() IEventSubscriptionDo
	Create(values ...*domain.EventSubscription) error
	CreateInBatches(values []*domain.EventSubscription, batchSize int) error
	Save(values ...*domain.EventSubscription) error
	First() (*domain.EventSubscription, error)
	Take() (*domain.EventSubscription, error)
	Last() (*domain.EventSubscription, error)
	Find() ([]*domain.EventSubscription, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.EventSubscription, err error)
	FindInBatches(result *[]*domain.EventSubscription, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.EventSubscription) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEventSubscriptionDo
	Assign(attrs ...field.AssignExpr) IEventSubscriptionDo
	Joins(fields ...field.RelationField) IEventSubscriptionDo
	Preload(fields ...field.RelationField) IEventSubscriptionDo
	FirstOrInit() (*domain.EventSubscription, error)
	FirstOrCreate() (*domain.EventSubscription, error)
	FindByPage(offset int, limit int) (result []*domain.EventSubscription, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEventSubscriptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e eventSubscriptionDo) Debug() IEventSubscriptionDo {
	return e.withDO(e.DO.Debug())
}

func (e eventSubscriptionDo) WithContext(ctx context.Context) IEventSubscriptionDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eventSubscriptionDo) ReadDB() IEventSubscriptionDo {
	return e.Clauses(dbresolver.Read)
}

func (e eventSubscriptionDo) WriteDB() IEventSubscriptionDo {
	return e.Clauses(dbresolver.Write)
}

func (e eventSubscriptionDo) Session(config *gorm.Session) IEventSubscriptionDo {
	return e.withDO(e.DO.Session(config))
}

func (e eventSubscriptionDo) Clauses(conds ...clause.Expression) IEventSubscriptionDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eventSubscriptionDo) Returning(value interface{}, columns ...string) IEventSubscriptionDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eventSubscriptionDo) Not(conds ...gen.Condition) IEventSubscriptionDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eventSubscriptionDo) Or(conds ...gen.Condition) IEventSubscriptionDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eventSubscriptionDo) Select(conds ...field.Expr) IEventSubscriptionDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eventSubscriptionDo) Where(conds ...gen.Condition) IEventSubscriptionDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eventSubscriptionDo) Order(conds ...field.Expr) IEventSubscriptionDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eventSubscriptionDo) Distinct(cols ...field.Expr) IEventSubscriptionDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eventSubscriptionDo) Omit(cols ...field.Expr) IEventSubscriptionDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eventSubscriptionDo) Join(table schema.Tabler, on ...field.Expr) IEventSubscriptionDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eventSubscriptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEventSubscriptionDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eventSubscriptionDo) RightJoin(table schema.Tabler, on ...field.Expr) IEventSubscriptionDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eventSubscriptionDo) Group(cols ...field.Expr) IEventSubscriptionDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eventSubscriptionDo) Having(conds ...gen.Condition) IEventSubscriptionDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eventSubscriptionDo) Limit(limit int) IEventSubscriptionDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eventSubscriptionDo) Offset(offset int) IEventSubscriptionDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eventSubscriptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEventSubscriptionDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eventSubscriptionDo) Unscoped() IEventSubscriptionDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eventSubscriptionDo) Create(values ...*domain.EventSubscription) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eventSubscriptionDo) CreateInBatches(values []*domain.EventSubscription, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eventSubscriptionDo) Save(values ...*domain.EventSubscription) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eventSubscriptionDo) First() (*domain.EventSubscription, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.EventSubscription), nil
	}
}

func (e eventSubscriptionDo) Take() (*domain.EventSubscription, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.EventSubscription), nil
	}
}

func (e eventSubscriptionDo) Last() (*domain.EventSubscription, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.EventSubscription), nil
	}
}

func (e eventSubscriptionDo) Find() ([]*domain.EventSubscription, error) {
	result, err := e.DO.Find()
	return result.([]*domain.EventSubscription), err
}

func (e eventSubscriptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.EventSubscription, err error) {
	buf := make([]*domain.EventSubscription, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eventSubscriptionDo) FindInBatches(result *[]*domain.EventSubscription, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eventSubscriptionDo) Attrs(attrs ...field.AssignExpr) IEventSubscriptionDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eventSubscriptionDo) Assign(attrs ...field.AssignExpr) IEventSubscriptionDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eventSubscriptionDo) Joins(fields ...field.RelationField) IEventSubscriptionDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eventSubscriptionDo) Preload(fields ...field.RelationField) IEventSubscriptionDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eventSubscriptionDo) FirstOrInit() (*domain.EventSubscription, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.EventSubscription), nil
	}
}

func (e eventSubscriptionDo) FirstOrCreate() (*domain.EventSubscription, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.EventSubscription), nil
	}
}

func (e eventSubscriptionDo) FindByPage(offset int, limit int) (result []*domain.EventSubscription, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eventSubscriptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eventSubscriptionDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eventSubscriptionDo) Delete(models ...*domain.EventSubscription) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eventSubscriptionDo) withDO(do gen.Dao) *eventSubscriptionDo {
	e.DO = *do.(*gen.DO)
	return e
}
