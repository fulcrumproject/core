// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newParticipant(db *gorm.DB, opts ...gen.DOOption) participant {
	_participant := participant{}

	_participant.participantDo.UseDB(db, opts...)
	_participant.participantDo.UseModel(&domain.Participant{})

	tableName := _participant.participantDo.TableName()
	_participant.ALL = field.NewAsterisk(tableName)
	_participant.ID = field.NewField(tableName, "id")
	_participant.CreatedAt = field.NewTime(tableName, "created_at")
	_participant.UpdatedAt = field.NewTime(tableName, "updated_at")
	_participant.Name = field.NewString(tableName, "name")
	_participant.Status = field.NewString(tableName, "status")
	_participant.Agents = participantHasManyAgents{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Agents", "domain.Agent"),
		AgentType: struct {
			field.RelationField
			ServiceTypes struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Agents.AgentType", "domain.AgentType"),
			ServiceTypes: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Agents.AgentType.ServiceTypes", "domain.ServiceType"),
			},
		},
		Provider: struct {
			field.RelationField
			Agents struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Agents.Provider", "domain.Participant"),
			Agents: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Agents.Provider.Agents", "domain.Agent"),
			},
		},
		ServicePoolSet: struct {
			field.RelationField
			Provider struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Agents.ServicePoolSet", "domain.ServicePoolSet"),
			Provider: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Agents.ServicePoolSet.Provider", "domain.Participant"),
			},
		},
	}

	_participant.fillFieldMap()

	return _participant
}

type participant struct {
	participantDo participantDo

	ALL       field.Asterisk
	ID        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	Name      field.String
	Status    field.String
	Agents    participantHasManyAgents

	fieldMap map[string]field.Expr
}

func (p participant) Table(newTableName string) *participant {
	p.participantDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p participant) As(alias string) *participant {
	p.participantDo.DO = *(p.participantDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *participant) updateTableName(table string) *participant {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewField(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.Name = field.NewString(table, "name")
	p.Status = field.NewString(table, "status")

	p.fillFieldMap()

	return p
}

func (p *participant) WithContext(ctx context.Context) IParticipantDo {
	return p.participantDo.WithContext(ctx)
}

func (p participant) TableName() string { return p.participantDo.TableName() }

func (p participant) Alias() string { return p.participantDo.Alias() }

func (p participant) Columns(cols ...field.Expr) gen.Columns { return p.participantDo.Columns(cols...) }

func (p *participant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *participant) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["name"] = p.Name
	p.fieldMap["status"] = p.Status

}

func (p participant) clone(db *gorm.DB) participant {
	p.participantDo.ReplaceConnPool(db.Statement.ConnPool)
	p.Agents.db = db.Session(&gorm.Session{Initialized: true})
	p.Agents.db.Statement.ConnPool = db.Statement.ConnPool
	return p
}

func (p participant) replaceDB(db *gorm.DB) participant {
	p.participantDo.ReplaceDB(db)
	p.Agents.db = db.Session(&gorm.Session{})
	return p
}

type participantHasManyAgents struct {
	db *gorm.DB

	field.RelationField

	AgentType struct {
		field.RelationField
		ServiceTypes struct {
			field.RelationField
		}
	}
	Provider struct {
		field.RelationField
		Agents struct {
			field.RelationField
		}
	}
	ServicePoolSet struct {
		field.RelationField
		Provider struct {
			field.RelationField
		}
	}
}

func (a participantHasManyAgents) Where(conds ...field.Expr) *participantHasManyAgents {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a participantHasManyAgents) WithContext(ctx context.Context) *participantHasManyAgents {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a participantHasManyAgents) Session(session *gorm.Session) *participantHasManyAgents {
	a.db = a.db.Session(session)
	return &a
}

func (a participantHasManyAgents) Model(m *domain.Participant) *participantHasManyAgentsTx {
	return &participantHasManyAgentsTx{a.db.Model(m).Association(a.Name())}
}

func (a participantHasManyAgents) Unscoped() *participantHasManyAgents {
	a.db = a.db.Unscoped()
	return &a
}

type participantHasManyAgentsTx struct{ tx *gorm.Association }

func (a participantHasManyAgentsTx) Find() (result []*domain.Agent, err error) {
	return result, a.tx.Find(&result)
}

func (a participantHasManyAgentsTx) Append(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a participantHasManyAgentsTx) Replace(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a participantHasManyAgentsTx) Delete(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a participantHasManyAgentsTx) Clear() error {
	return a.tx.Clear()
}

func (a participantHasManyAgentsTx) Count() int64 {
	return a.tx.Count()
}

func (a participantHasManyAgentsTx) Unscoped() *participantHasManyAgentsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type participantDo struct{ gen.DO }

type IParticipantDo interface {
	gen.SubQuery
	Debug() IParticipantDo
	WithContext(ctx context.Context) IParticipantDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IParticipantDo
	WriteDB() IParticipantDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IParticipantDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IParticipantDo
	Not(conds ...gen.Condition) IParticipantDo
	Or(conds ...gen.Condition) IParticipantDo
	Select(conds ...field.Expr) IParticipantDo
	Where(conds ...gen.Condition) IParticipantDo
	Order(conds ...field.Expr) IParticipantDo
	Distinct(cols ...field.Expr) IParticipantDo
	Omit(cols ...field.Expr) IParticipantDo
	Join(table schema.Tabler, on ...field.Expr) IParticipantDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IParticipantDo
	RightJoin(table schema.Tabler, on ...field.Expr) IParticipantDo
	Group(cols ...field.Expr) IParticipantDo
	Having(conds ...gen.Condition) IParticipantDo
	Limit(limit int) IParticipantDo
	Offset(offset int) IParticipantDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IParticipantDo
	Unscoped() IParticipantDo
	Create(values ...*domain.Participant) error
	CreateInBatches(values []*domain.Participant, batchSize int) error
	Save(values ...*domain.Participant) error
	First() (*domain.Participant, error)
	Take() (*domain.Participant, error)
	Last() (*domain.Participant, error)
	Find() ([]*domain.Participant, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Participant, err error)
	FindInBatches(result *[]*domain.Participant, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.Participant) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IParticipantDo
	Assign(attrs ...field.AssignExpr) IParticipantDo
	Joins(fields ...field.RelationField) IParticipantDo
	Preload(fields ...field.RelationField) IParticipantDo
	FirstOrInit() (*domain.Participant, error)
	FirstOrCreate() (*domain.Participant, error)
	FindByPage(offset int, limit int) (result []*domain.Participant, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IParticipantDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p participantDo) Debug() IParticipantDo {
	return p.withDO(p.DO.Debug())
}

func (p participantDo) WithContext(ctx context.Context) IParticipantDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p participantDo) ReadDB() IParticipantDo {
	return p.Clauses(dbresolver.Read)
}

func (p participantDo) WriteDB() IParticipantDo {
	return p.Clauses(dbresolver.Write)
}

func (p participantDo) Session(config *gorm.Session) IParticipantDo {
	return p.withDO(p.DO.Session(config))
}

func (p participantDo) Clauses(conds ...clause.Expression) IParticipantDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p participantDo) Returning(value interface{}, columns ...string) IParticipantDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p participantDo) Not(conds ...gen.Condition) IParticipantDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p participantDo) Or(conds ...gen.Condition) IParticipantDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p participantDo) Select(conds ...field.Expr) IParticipantDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p participantDo) Where(conds ...gen.Condition) IParticipantDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p participantDo) Order(conds ...field.Expr) IParticipantDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p participantDo) Distinct(cols ...field.Expr) IParticipantDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p participantDo) Omit(cols ...field.Expr) IParticipantDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p participantDo) Join(table schema.Tabler, on ...field.Expr) IParticipantDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p participantDo) LeftJoin(table schema.Tabler, on ...field.Expr) IParticipantDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p participantDo) RightJoin(table schema.Tabler, on ...field.Expr) IParticipantDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p participantDo) Group(cols ...field.Expr) IParticipantDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p participantDo) Having(conds ...gen.Condition) IParticipantDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p participantDo) Limit(limit int) IParticipantDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p participantDo) Offset(offset int) IParticipantDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p participantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IParticipantDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p participantDo) Unscoped() IParticipantDo {
	return p.withDO(p.DO.Unscoped())
}

func (p participantDo) Create(values ...*domain.Participant) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p participantDo) CreateInBatches(values []*domain.Participant, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p participantDo) Save(values ...*domain.Participant) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p participantDo) First() (*domain.Participant, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Participant), nil
	}
}

func (p participantDo) Take() (*domain.Participant, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Participant), nil
	}
}

func (p participantDo) Last() (*domain.Participant, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Participant), nil
	}
}

func (p participantDo) Find() ([]*domain.Participant, error) {
	result, err := p.DO.Find()
	return result.([]*domain.Participant), err
}

func (p participantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Participant, err error) {
	buf := make([]*domain.Participant, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p participantDo) FindInBatches(result *[]*domain.Participant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p participantDo) Attrs(attrs ...field.AssignExpr) IParticipantDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p participantDo) Assign(attrs ...field.AssignExpr) IParticipantDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p participantDo) Joins(fields ...field.RelationField) IParticipantDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p participantDo) Preload(fields ...field.RelationField) IParticipantDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p participantDo) FirstOrInit() (*domain.Participant, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Participant), nil
	}
}

func (p participantDo) FirstOrCreate() (*domain.Participant, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Participant), nil
	}
}

func (p participantDo) FindByPage(offset int, limit int) (result []*domain.Participant, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p participantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p participantDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p participantDo) Delete(models ...*domain.Participant) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *participantDo) withDO(do gen.Dao) *participantDo {
	p.DO = *do.(*gen.DO)
	return p
}
