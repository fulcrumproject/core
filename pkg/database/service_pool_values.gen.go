// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newServicePoolValue(db *gorm.DB, opts ...gen.DOOption) servicePoolValue {
	_servicePoolValue := servicePoolValue{}

	_servicePoolValue.servicePoolValueDo.UseDB(db, opts...)
	_servicePoolValue.servicePoolValueDo.UseModel(&domain.ServicePoolValue{})

	tableName := _servicePoolValue.servicePoolValueDo.TableName()
	_servicePoolValue.ALL = field.NewAsterisk(tableName)
	_servicePoolValue.ID = field.NewField(tableName, "id")
	_servicePoolValue.CreatedAt = field.NewTime(tableName, "created_at")
	_servicePoolValue.UpdatedAt = field.NewTime(tableName, "updated_at")
	_servicePoolValue.Name = field.NewString(tableName, "name")
	_servicePoolValue.Value = field.NewField(tableName, "value")
	_servicePoolValue.ServicePoolID = field.NewField(tableName, "service_pool_id")
	_servicePoolValue.ServiceID = field.NewField(tableName, "service_id")
	_servicePoolValue.PropertyName = field.NewString(tableName, "property_name")
	_servicePoolValue.AllocatedAt = field.NewTime(tableName, "allocated_at")
	_servicePoolValue.ServicePool = servicePoolValueBelongsToServicePool{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ServicePool", "domain.ServicePool"),
		ServicePoolSet: struct {
			field.RelationField
			Provider struct {
				field.RelationField
				Agents struct {
					field.RelationField
					AgentType struct {
						field.RelationField
						ServiceTypes struct {
							field.RelationField
						}
					}
					Provider struct {
						field.RelationField
					}
					ServicePoolSet struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("ServicePool.ServicePoolSet", "domain.ServicePoolSet"),
			Provider: struct {
				field.RelationField
				Agents struct {
					field.RelationField
					AgentType struct {
						field.RelationField
						ServiceTypes struct {
							field.RelationField
						}
					}
					Provider struct {
						field.RelationField
					}
					ServicePoolSet struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("ServicePool.ServicePoolSet.Provider", "domain.Participant"),
				Agents: struct {
					field.RelationField
					AgentType struct {
						field.RelationField
						ServiceTypes struct {
							field.RelationField
						}
					}
					Provider struct {
						field.RelationField
					}
					ServicePoolSet struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("ServicePool.ServicePoolSet.Provider.Agents", "domain.Agent"),
					AgentType: struct {
						field.RelationField
						ServiceTypes struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("ServicePool.ServicePoolSet.Provider.Agents.AgentType", "domain.AgentType"),
						ServiceTypes: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("ServicePool.ServicePoolSet.Provider.Agents.AgentType.ServiceTypes", "domain.ServiceType"),
						},
					},
					Provider: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("ServicePool.ServicePoolSet.Provider.Agents.Provider", "domain.Participant"),
					},
					ServicePoolSet: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("ServicePool.ServicePoolSet.Provider.Agents.ServicePoolSet", "domain.ServicePoolSet"),
					},
				},
			},
		},
	}

	_servicePoolValue.Service = servicePoolValueBelongsToService{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Service", "domain.Service"),
		Provider: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.Provider", "domain.Participant"),
		},
		Consumer: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.Consumer", "domain.Participant"),
		},
		Group: struct {
			field.RelationField
			Participant struct {
				field.RelationField
			}
			Services struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Service.Group", "domain.ServiceGroup"),
			Participant: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Service.Group.Participant", "domain.Participant"),
			},
			Services: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Service.Group.Services", "domain.Service"),
			},
		},
		Agent: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.Agent", "domain.Agent"),
		},
		ServiceType: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.ServiceType", "domain.ServiceType"),
		},
	}

	_servicePoolValue.fillFieldMap()

	return _servicePoolValue
}

type servicePoolValue struct {
	servicePoolValueDo servicePoolValueDo

	ALL           field.Asterisk
	ID            field.Field
	CreatedAt     field.Time
	UpdatedAt     field.Time
	Name          field.String
	Value         field.Field
	ServicePoolID field.Field
	ServiceID     field.Field
	PropertyName  field.String
	AllocatedAt   field.Time
	ServicePool   servicePoolValueBelongsToServicePool

	Service servicePoolValueBelongsToService

	fieldMap map[string]field.Expr
}

func (s servicePoolValue) Table(newTableName string) *servicePoolValue {
	s.servicePoolValueDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s servicePoolValue) As(alias string) *servicePoolValue {
	s.servicePoolValueDo.DO = *(s.servicePoolValueDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *servicePoolValue) updateTableName(table string) *servicePoolValue {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewField(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Name = field.NewString(table, "name")
	s.Value = field.NewField(table, "value")
	s.ServicePoolID = field.NewField(table, "service_pool_id")
	s.ServiceID = field.NewField(table, "service_id")
	s.PropertyName = field.NewString(table, "property_name")
	s.AllocatedAt = field.NewTime(table, "allocated_at")

	s.fillFieldMap()

	return s
}

func (s *servicePoolValue) WithContext(ctx context.Context) IServicePoolValueDo {
	return s.servicePoolValueDo.WithContext(ctx)
}

func (s servicePoolValue) TableName() string { return s.servicePoolValueDo.TableName() }

func (s servicePoolValue) Alias() string { return s.servicePoolValueDo.Alias() }

func (s servicePoolValue) Columns(cols ...field.Expr) gen.Columns {
	return s.servicePoolValueDo.Columns(cols...)
}

func (s *servicePoolValue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *servicePoolValue) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["name"] = s.Name
	s.fieldMap["value"] = s.Value
	s.fieldMap["service_pool_id"] = s.ServicePoolID
	s.fieldMap["service_id"] = s.ServiceID
	s.fieldMap["property_name"] = s.PropertyName
	s.fieldMap["allocated_at"] = s.AllocatedAt

}

func (s servicePoolValue) clone(db *gorm.DB) servicePoolValue {
	s.servicePoolValueDo.ReplaceConnPool(db.Statement.ConnPool)
	s.ServicePool.db = db.Session(&gorm.Session{Initialized: true})
	s.ServicePool.db.Statement.ConnPool = db.Statement.ConnPool
	s.Service.db = db.Session(&gorm.Session{Initialized: true})
	s.Service.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s servicePoolValue) replaceDB(db *gorm.DB) servicePoolValue {
	s.servicePoolValueDo.ReplaceDB(db)
	s.ServicePool.db = db.Session(&gorm.Session{})
	s.Service.db = db.Session(&gorm.Session{})
	return s
}

type servicePoolValueBelongsToServicePool struct {
	db *gorm.DB

	field.RelationField

	ServicePoolSet struct {
		field.RelationField
		Provider struct {
			field.RelationField
			Agents struct {
				field.RelationField
				AgentType struct {
					field.RelationField
					ServiceTypes struct {
						field.RelationField
					}
				}
				Provider struct {
					field.RelationField
				}
				ServicePoolSet struct {
					field.RelationField
				}
			}
		}
	}
}

func (a servicePoolValueBelongsToServicePool) Where(conds ...field.Expr) *servicePoolValueBelongsToServicePool {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a servicePoolValueBelongsToServicePool) WithContext(ctx context.Context) *servicePoolValueBelongsToServicePool {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a servicePoolValueBelongsToServicePool) Session(session *gorm.Session) *servicePoolValueBelongsToServicePool {
	a.db = a.db.Session(session)
	return &a
}

func (a servicePoolValueBelongsToServicePool) Model(m *domain.ServicePoolValue) *servicePoolValueBelongsToServicePoolTx {
	return &servicePoolValueBelongsToServicePoolTx{a.db.Model(m).Association(a.Name())}
}

func (a servicePoolValueBelongsToServicePool) Unscoped() *servicePoolValueBelongsToServicePool {
	a.db = a.db.Unscoped()
	return &a
}

type servicePoolValueBelongsToServicePoolTx struct{ tx *gorm.Association }

func (a servicePoolValueBelongsToServicePoolTx) Find() (result *domain.ServicePool, err error) {
	return result, a.tx.Find(&result)
}

func (a servicePoolValueBelongsToServicePoolTx) Append(values ...*domain.ServicePool) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a servicePoolValueBelongsToServicePoolTx) Replace(values ...*domain.ServicePool) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a servicePoolValueBelongsToServicePoolTx) Delete(values ...*domain.ServicePool) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a servicePoolValueBelongsToServicePoolTx) Clear() error {
	return a.tx.Clear()
}

func (a servicePoolValueBelongsToServicePoolTx) Count() int64 {
	return a.tx.Count()
}

func (a servicePoolValueBelongsToServicePoolTx) Unscoped() *servicePoolValueBelongsToServicePoolTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type servicePoolValueBelongsToService struct {
	db *gorm.DB

	field.RelationField

	Provider struct {
		field.RelationField
	}
	Consumer struct {
		field.RelationField
	}
	Group struct {
		field.RelationField
		Participant struct {
			field.RelationField
		}
		Services struct {
			field.RelationField
		}
	}
	Agent struct {
		field.RelationField
	}
	ServiceType struct {
		field.RelationField
	}
}

func (a servicePoolValueBelongsToService) Where(conds ...field.Expr) *servicePoolValueBelongsToService {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a servicePoolValueBelongsToService) WithContext(ctx context.Context) *servicePoolValueBelongsToService {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a servicePoolValueBelongsToService) Session(session *gorm.Session) *servicePoolValueBelongsToService {
	a.db = a.db.Session(session)
	return &a
}

func (a servicePoolValueBelongsToService) Model(m *domain.ServicePoolValue) *servicePoolValueBelongsToServiceTx {
	return &servicePoolValueBelongsToServiceTx{a.db.Model(m).Association(a.Name())}
}

func (a servicePoolValueBelongsToService) Unscoped() *servicePoolValueBelongsToService {
	a.db = a.db.Unscoped()
	return &a
}

type servicePoolValueBelongsToServiceTx struct{ tx *gorm.Association }

func (a servicePoolValueBelongsToServiceTx) Find() (result *domain.Service, err error) {
	return result, a.tx.Find(&result)
}

func (a servicePoolValueBelongsToServiceTx) Append(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a servicePoolValueBelongsToServiceTx) Replace(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a servicePoolValueBelongsToServiceTx) Delete(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a servicePoolValueBelongsToServiceTx) Clear() error {
	return a.tx.Clear()
}

func (a servicePoolValueBelongsToServiceTx) Count() int64 {
	return a.tx.Count()
}

func (a servicePoolValueBelongsToServiceTx) Unscoped() *servicePoolValueBelongsToServiceTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type servicePoolValueDo struct{ gen.DO }

type IServicePoolValueDo interface {
	gen.SubQuery
	Debug() IServicePoolValueDo
	WithContext(ctx context.Context) IServicePoolValueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServicePoolValueDo
	WriteDB() IServicePoolValueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServicePoolValueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServicePoolValueDo
	Not(conds ...gen.Condition) IServicePoolValueDo
	Or(conds ...gen.Condition) IServicePoolValueDo
	Select(conds ...field.Expr) IServicePoolValueDo
	Where(conds ...gen.Condition) IServicePoolValueDo
	Order(conds ...field.Expr) IServicePoolValueDo
	Distinct(cols ...field.Expr) IServicePoolValueDo
	Omit(cols ...field.Expr) IServicePoolValueDo
	Join(table schema.Tabler, on ...field.Expr) IServicePoolValueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServicePoolValueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServicePoolValueDo
	Group(cols ...field.Expr) IServicePoolValueDo
	Having(conds ...gen.Condition) IServicePoolValueDo
	Limit(limit int) IServicePoolValueDo
	Offset(offset int) IServicePoolValueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServicePoolValueDo
	Unscoped() IServicePoolValueDo
	Create(values ...*domain.ServicePoolValue) error
	CreateInBatches(values []*domain.ServicePoolValue, batchSize int) error
	Save(values ...*domain.ServicePoolValue) error
	First() (*domain.ServicePoolValue, error)
	Take() (*domain.ServicePoolValue, error)
	Last() (*domain.ServicePoolValue, error)
	Find() ([]*domain.ServicePoolValue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServicePoolValue, err error)
	FindInBatches(result *[]*domain.ServicePoolValue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.ServicePoolValue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServicePoolValueDo
	Assign(attrs ...field.AssignExpr) IServicePoolValueDo
	Joins(fields ...field.RelationField) IServicePoolValueDo
	Preload(fields ...field.RelationField) IServicePoolValueDo
	FirstOrInit() (*domain.ServicePoolValue, error)
	FirstOrCreate() (*domain.ServicePoolValue, error)
	FindByPage(offset int, limit int) (result []*domain.ServicePoolValue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServicePoolValueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s servicePoolValueDo) Debug() IServicePoolValueDo {
	return s.withDO(s.DO.Debug())
}

func (s servicePoolValueDo) WithContext(ctx context.Context) IServicePoolValueDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s servicePoolValueDo) ReadDB() IServicePoolValueDo {
	return s.Clauses(dbresolver.Read)
}

func (s servicePoolValueDo) WriteDB() IServicePoolValueDo {
	return s.Clauses(dbresolver.Write)
}

func (s servicePoolValueDo) Session(config *gorm.Session) IServicePoolValueDo {
	return s.withDO(s.DO.Session(config))
}

func (s servicePoolValueDo) Clauses(conds ...clause.Expression) IServicePoolValueDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s servicePoolValueDo) Returning(value interface{}, columns ...string) IServicePoolValueDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s servicePoolValueDo) Not(conds ...gen.Condition) IServicePoolValueDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s servicePoolValueDo) Or(conds ...gen.Condition) IServicePoolValueDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s servicePoolValueDo) Select(conds ...field.Expr) IServicePoolValueDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s servicePoolValueDo) Where(conds ...gen.Condition) IServicePoolValueDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s servicePoolValueDo) Order(conds ...field.Expr) IServicePoolValueDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s servicePoolValueDo) Distinct(cols ...field.Expr) IServicePoolValueDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s servicePoolValueDo) Omit(cols ...field.Expr) IServicePoolValueDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s servicePoolValueDo) Join(table schema.Tabler, on ...field.Expr) IServicePoolValueDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s servicePoolValueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServicePoolValueDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s servicePoolValueDo) RightJoin(table schema.Tabler, on ...field.Expr) IServicePoolValueDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s servicePoolValueDo) Group(cols ...field.Expr) IServicePoolValueDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s servicePoolValueDo) Having(conds ...gen.Condition) IServicePoolValueDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s servicePoolValueDo) Limit(limit int) IServicePoolValueDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s servicePoolValueDo) Offset(offset int) IServicePoolValueDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s servicePoolValueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServicePoolValueDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s servicePoolValueDo) Unscoped() IServicePoolValueDo {
	return s.withDO(s.DO.Unscoped())
}

func (s servicePoolValueDo) Create(values ...*domain.ServicePoolValue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s servicePoolValueDo) CreateInBatches(values []*domain.ServicePoolValue, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s servicePoolValueDo) Save(values ...*domain.ServicePoolValue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s servicePoolValueDo) First() (*domain.ServicePoolValue, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePoolValue), nil
	}
}

func (s servicePoolValueDo) Take() (*domain.ServicePoolValue, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePoolValue), nil
	}
}

func (s servicePoolValueDo) Last() (*domain.ServicePoolValue, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePoolValue), nil
	}
}

func (s servicePoolValueDo) Find() ([]*domain.ServicePoolValue, error) {
	result, err := s.DO.Find()
	return result.([]*domain.ServicePoolValue), err
}

func (s servicePoolValueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.ServicePoolValue, err error) {
	buf := make([]*domain.ServicePoolValue, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s servicePoolValueDo) FindInBatches(result *[]*domain.ServicePoolValue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s servicePoolValueDo) Attrs(attrs ...field.AssignExpr) IServicePoolValueDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s servicePoolValueDo) Assign(attrs ...field.AssignExpr) IServicePoolValueDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s servicePoolValueDo) Joins(fields ...field.RelationField) IServicePoolValueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s servicePoolValueDo) Preload(fields ...field.RelationField) IServicePoolValueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s servicePoolValueDo) FirstOrInit() (*domain.ServicePoolValue, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePoolValue), nil
	}
}

func (s servicePoolValueDo) FirstOrCreate() (*domain.ServicePoolValue, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.ServicePoolValue), nil
	}
}

func (s servicePoolValueDo) FindByPage(offset int, limit int) (result []*domain.ServicePoolValue, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s servicePoolValueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s servicePoolValueDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s servicePoolValueDo) Delete(models ...*domain.ServicePoolValue) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *servicePoolValueDo) withDO(do gen.Dao) *servicePoolValueDo {
	s.DO = *do.(*gen.DO)
	return s
}
