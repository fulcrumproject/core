// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newMetricEntry(db *gorm.DB, opts ...gen.DOOption) metricEntry {
	_metricEntry := metricEntry{}

	_metricEntry.metricEntryDo.UseDB(db, opts...)
	_metricEntry.metricEntryDo.UseModel(&domain.MetricEntry{})

	tableName := _metricEntry.metricEntryDo.TableName()
	_metricEntry.ALL = field.NewAsterisk(tableName)
	_metricEntry.ID = field.NewField(tableName, "id")
	_metricEntry.CreatedAt = field.NewTime(tableName, "created_at")
	_metricEntry.UpdatedAt = field.NewTime(tableName, "updated_at")
	_metricEntry.ResourceID = field.NewString(tableName, "resource_id")
	_metricEntry.Value = field.NewFloat64(tableName, "value")
	_metricEntry.TypeID = field.NewField(tableName, "type_id")
	_metricEntry.AgentID = field.NewField(tableName, "agent_id")
	_metricEntry.ServiceID = field.NewField(tableName, "service_id")
	_metricEntry.ProviderID = field.NewField(tableName, "provider_id")
	_metricEntry.ConsumerID = field.NewField(tableName, "consumer_id")
	_metricEntry.Type = metricEntryBelongsToType{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Type", "domain.MetricType"),
	}

	_metricEntry.Agent = metricEntryBelongsToAgent{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Agent", "domain.Agent"),
		AgentType: struct {
			field.RelationField
			ServiceTypes struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Agent.AgentType", "domain.AgentType"),
			ServiceTypes: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Agent.AgentType.ServiceTypes", "domain.ServiceType"),
			},
		},
		Provider: struct {
			field.RelationField
			Agents struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Agent.Provider", "domain.Participant"),
			Agents: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Agent.Provider.Agents", "domain.Agent"),
			},
		},
		ServicePoolSet: struct {
			field.RelationField
			Provider struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Agent.ServicePoolSet", "domain.ServicePoolSet"),
			Provider: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Agent.ServicePoolSet.Provider", "domain.Participant"),
			},
		},
	}

	_metricEntry.Service = metricEntryBelongsToService{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Service", "domain.Service"),
		Provider: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.Provider", "domain.Participant"),
		},
		Consumer: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.Consumer", "domain.Participant"),
		},
		Group: struct {
			field.RelationField
			Participant struct {
				field.RelationField
			}
			Services struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Service.Group", "domain.ServiceGroup"),
			Participant: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Service.Group.Participant", "domain.Participant"),
			},
			Services: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Service.Group.Services", "domain.Service"),
			},
		},
		Agent: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.Agent", "domain.Agent"),
		},
		ServiceType: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Service.ServiceType", "domain.ServiceType"),
		},
	}

	_metricEntry.Provider = metricEntryBelongsToProvider{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Provider", "domain.Participant"),
	}

	_metricEntry.Consumer = metricEntryBelongsToConsumer{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Consumer", "domain.Participant"),
	}

	_metricEntry.fillFieldMap()

	return _metricEntry
}

type metricEntry struct {
	metricEntryDo metricEntryDo

	ALL        field.Asterisk
	ID         field.Field
	CreatedAt  field.Time
	UpdatedAt  field.Time
	ResourceID field.String
	Value      field.Float64
	TypeID     field.Field
	AgentID    field.Field
	ServiceID  field.Field
	ProviderID field.Field
	ConsumerID field.Field
	Type       metricEntryBelongsToType

	Agent metricEntryBelongsToAgent

	Service metricEntryBelongsToService

	Provider metricEntryBelongsToProvider

	Consumer metricEntryBelongsToConsumer

	fieldMap map[string]field.Expr
}

func (m metricEntry) Table(newTableName string) *metricEntry {
	m.metricEntryDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m metricEntry) As(alias string) *metricEntry {
	m.metricEntryDo.DO = *(m.metricEntryDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *metricEntry) updateTableName(table string) *metricEntry {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewField(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.ResourceID = field.NewString(table, "resource_id")
	m.Value = field.NewFloat64(table, "value")
	m.TypeID = field.NewField(table, "type_id")
	m.AgentID = field.NewField(table, "agent_id")
	m.ServiceID = field.NewField(table, "service_id")
	m.ProviderID = field.NewField(table, "provider_id")
	m.ConsumerID = field.NewField(table, "consumer_id")

	m.fillFieldMap()

	return m
}

func (m *metricEntry) WithContext(ctx context.Context) IMetricEntryDo {
	return m.metricEntryDo.WithContext(ctx)
}

func (m metricEntry) TableName() string { return m.metricEntryDo.TableName() }

func (m metricEntry) Alias() string { return m.metricEntryDo.Alias() }

func (m metricEntry) Columns(cols ...field.Expr) gen.Columns { return m.metricEntryDo.Columns(cols...) }

func (m *metricEntry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *metricEntry) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 15)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["resource_id"] = m.ResourceID
	m.fieldMap["value"] = m.Value
	m.fieldMap["type_id"] = m.TypeID
	m.fieldMap["agent_id"] = m.AgentID
	m.fieldMap["service_id"] = m.ServiceID
	m.fieldMap["provider_id"] = m.ProviderID
	m.fieldMap["consumer_id"] = m.ConsumerID

}

func (m metricEntry) clone(db *gorm.DB) metricEntry {
	m.metricEntryDo.ReplaceConnPool(db.Statement.ConnPool)
	m.Type.db = db.Session(&gorm.Session{Initialized: true})
	m.Type.db.Statement.ConnPool = db.Statement.ConnPool
	m.Agent.db = db.Session(&gorm.Session{Initialized: true})
	m.Agent.db.Statement.ConnPool = db.Statement.ConnPool
	m.Service.db = db.Session(&gorm.Session{Initialized: true})
	m.Service.db.Statement.ConnPool = db.Statement.ConnPool
	m.Provider.db = db.Session(&gorm.Session{Initialized: true})
	m.Provider.db.Statement.ConnPool = db.Statement.ConnPool
	m.Consumer.db = db.Session(&gorm.Session{Initialized: true})
	m.Consumer.db.Statement.ConnPool = db.Statement.ConnPool
	return m
}

func (m metricEntry) replaceDB(db *gorm.DB) metricEntry {
	m.metricEntryDo.ReplaceDB(db)
	m.Type.db = db.Session(&gorm.Session{})
	m.Agent.db = db.Session(&gorm.Session{})
	m.Service.db = db.Session(&gorm.Session{})
	m.Provider.db = db.Session(&gorm.Session{})
	m.Consumer.db = db.Session(&gorm.Session{})
	return m
}

type metricEntryBelongsToType struct {
	db *gorm.DB

	field.RelationField
}

func (a metricEntryBelongsToType) Where(conds ...field.Expr) *metricEntryBelongsToType {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a metricEntryBelongsToType) WithContext(ctx context.Context) *metricEntryBelongsToType {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a metricEntryBelongsToType) Session(session *gorm.Session) *metricEntryBelongsToType {
	a.db = a.db.Session(session)
	return &a
}

func (a metricEntryBelongsToType) Model(m *domain.MetricEntry) *metricEntryBelongsToTypeTx {
	return &metricEntryBelongsToTypeTx{a.db.Model(m).Association(a.Name())}
}

func (a metricEntryBelongsToType) Unscoped() *metricEntryBelongsToType {
	a.db = a.db.Unscoped()
	return &a
}

type metricEntryBelongsToTypeTx struct{ tx *gorm.Association }

func (a metricEntryBelongsToTypeTx) Find() (result *domain.MetricType, err error) {
	return result, a.tx.Find(&result)
}

func (a metricEntryBelongsToTypeTx) Append(values ...*domain.MetricType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a metricEntryBelongsToTypeTx) Replace(values ...*domain.MetricType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a metricEntryBelongsToTypeTx) Delete(values ...*domain.MetricType) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a metricEntryBelongsToTypeTx) Clear() error {
	return a.tx.Clear()
}

func (a metricEntryBelongsToTypeTx) Count() int64 {
	return a.tx.Count()
}

func (a metricEntryBelongsToTypeTx) Unscoped() *metricEntryBelongsToTypeTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type metricEntryBelongsToAgent struct {
	db *gorm.DB

	field.RelationField

	AgentType struct {
		field.RelationField
		ServiceTypes struct {
			field.RelationField
		}
	}
	Provider struct {
		field.RelationField
		Agents struct {
			field.RelationField
		}
	}
	ServicePoolSet struct {
		field.RelationField
		Provider struct {
			field.RelationField
		}
	}
}

func (a metricEntryBelongsToAgent) Where(conds ...field.Expr) *metricEntryBelongsToAgent {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a metricEntryBelongsToAgent) WithContext(ctx context.Context) *metricEntryBelongsToAgent {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a metricEntryBelongsToAgent) Session(session *gorm.Session) *metricEntryBelongsToAgent {
	a.db = a.db.Session(session)
	return &a
}

func (a metricEntryBelongsToAgent) Model(m *domain.MetricEntry) *metricEntryBelongsToAgentTx {
	return &metricEntryBelongsToAgentTx{a.db.Model(m).Association(a.Name())}
}

func (a metricEntryBelongsToAgent) Unscoped() *metricEntryBelongsToAgent {
	a.db = a.db.Unscoped()
	return &a
}

type metricEntryBelongsToAgentTx struct{ tx *gorm.Association }

func (a metricEntryBelongsToAgentTx) Find() (result *domain.Agent, err error) {
	return result, a.tx.Find(&result)
}

func (a metricEntryBelongsToAgentTx) Append(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a metricEntryBelongsToAgentTx) Replace(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a metricEntryBelongsToAgentTx) Delete(values ...*domain.Agent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a metricEntryBelongsToAgentTx) Clear() error {
	return a.tx.Clear()
}

func (a metricEntryBelongsToAgentTx) Count() int64 {
	return a.tx.Count()
}

func (a metricEntryBelongsToAgentTx) Unscoped() *metricEntryBelongsToAgentTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type metricEntryBelongsToService struct {
	db *gorm.DB

	field.RelationField

	Provider struct {
		field.RelationField
	}
	Consumer struct {
		field.RelationField
	}
	Group struct {
		field.RelationField
		Participant struct {
			field.RelationField
		}
		Services struct {
			field.RelationField
		}
	}
	Agent struct {
		field.RelationField
	}
	ServiceType struct {
		field.RelationField
	}
}

func (a metricEntryBelongsToService) Where(conds ...field.Expr) *metricEntryBelongsToService {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a metricEntryBelongsToService) WithContext(ctx context.Context) *metricEntryBelongsToService {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a metricEntryBelongsToService) Session(session *gorm.Session) *metricEntryBelongsToService {
	a.db = a.db.Session(session)
	return &a
}

func (a metricEntryBelongsToService) Model(m *domain.MetricEntry) *metricEntryBelongsToServiceTx {
	return &metricEntryBelongsToServiceTx{a.db.Model(m).Association(a.Name())}
}

func (a metricEntryBelongsToService) Unscoped() *metricEntryBelongsToService {
	a.db = a.db.Unscoped()
	return &a
}

type metricEntryBelongsToServiceTx struct{ tx *gorm.Association }

func (a metricEntryBelongsToServiceTx) Find() (result *domain.Service, err error) {
	return result, a.tx.Find(&result)
}

func (a metricEntryBelongsToServiceTx) Append(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a metricEntryBelongsToServiceTx) Replace(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a metricEntryBelongsToServiceTx) Delete(values ...*domain.Service) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a metricEntryBelongsToServiceTx) Clear() error {
	return a.tx.Clear()
}

func (a metricEntryBelongsToServiceTx) Count() int64 {
	return a.tx.Count()
}

func (a metricEntryBelongsToServiceTx) Unscoped() *metricEntryBelongsToServiceTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type metricEntryBelongsToProvider struct {
	db *gorm.DB

	field.RelationField
}

func (a metricEntryBelongsToProvider) Where(conds ...field.Expr) *metricEntryBelongsToProvider {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a metricEntryBelongsToProvider) WithContext(ctx context.Context) *metricEntryBelongsToProvider {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a metricEntryBelongsToProvider) Session(session *gorm.Session) *metricEntryBelongsToProvider {
	a.db = a.db.Session(session)
	return &a
}

func (a metricEntryBelongsToProvider) Model(m *domain.MetricEntry) *metricEntryBelongsToProviderTx {
	return &metricEntryBelongsToProviderTx{a.db.Model(m).Association(a.Name())}
}

func (a metricEntryBelongsToProvider) Unscoped() *metricEntryBelongsToProvider {
	a.db = a.db.Unscoped()
	return &a
}

type metricEntryBelongsToProviderTx struct{ tx *gorm.Association }

func (a metricEntryBelongsToProviderTx) Find() (result *domain.Participant, err error) {
	return result, a.tx.Find(&result)
}

func (a metricEntryBelongsToProviderTx) Append(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a metricEntryBelongsToProviderTx) Replace(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a metricEntryBelongsToProviderTx) Delete(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a metricEntryBelongsToProviderTx) Clear() error {
	return a.tx.Clear()
}

func (a metricEntryBelongsToProviderTx) Count() int64 {
	return a.tx.Count()
}

func (a metricEntryBelongsToProviderTx) Unscoped() *metricEntryBelongsToProviderTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type metricEntryBelongsToConsumer struct {
	db *gorm.DB

	field.RelationField
}

func (a metricEntryBelongsToConsumer) Where(conds ...field.Expr) *metricEntryBelongsToConsumer {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a metricEntryBelongsToConsumer) WithContext(ctx context.Context) *metricEntryBelongsToConsumer {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a metricEntryBelongsToConsumer) Session(session *gorm.Session) *metricEntryBelongsToConsumer {
	a.db = a.db.Session(session)
	return &a
}

func (a metricEntryBelongsToConsumer) Model(m *domain.MetricEntry) *metricEntryBelongsToConsumerTx {
	return &metricEntryBelongsToConsumerTx{a.db.Model(m).Association(a.Name())}
}

func (a metricEntryBelongsToConsumer) Unscoped() *metricEntryBelongsToConsumer {
	a.db = a.db.Unscoped()
	return &a
}

type metricEntryBelongsToConsumerTx struct{ tx *gorm.Association }

func (a metricEntryBelongsToConsumerTx) Find() (result *domain.Participant, err error) {
	return result, a.tx.Find(&result)
}

func (a metricEntryBelongsToConsumerTx) Append(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a metricEntryBelongsToConsumerTx) Replace(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a metricEntryBelongsToConsumerTx) Delete(values ...*domain.Participant) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a metricEntryBelongsToConsumerTx) Clear() error {
	return a.tx.Clear()
}

func (a metricEntryBelongsToConsumerTx) Count() int64 {
	return a.tx.Count()
}

func (a metricEntryBelongsToConsumerTx) Unscoped() *metricEntryBelongsToConsumerTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type metricEntryDo struct{ gen.DO }

type IMetricEntryDo interface {
	gen.SubQuery
	Debug() IMetricEntryDo
	WithContext(ctx context.Context) IMetricEntryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMetricEntryDo
	WriteDB() IMetricEntryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMetricEntryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMetricEntryDo
	Not(conds ...gen.Condition) IMetricEntryDo
	Or(conds ...gen.Condition) IMetricEntryDo
	Select(conds ...field.Expr) IMetricEntryDo
	Where(conds ...gen.Condition) IMetricEntryDo
	Order(conds ...field.Expr) IMetricEntryDo
	Distinct(cols ...field.Expr) IMetricEntryDo
	Omit(cols ...field.Expr) IMetricEntryDo
	Join(table schema.Tabler, on ...field.Expr) IMetricEntryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMetricEntryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMetricEntryDo
	Group(cols ...field.Expr) IMetricEntryDo
	Having(conds ...gen.Condition) IMetricEntryDo
	Limit(limit int) IMetricEntryDo
	Offset(offset int) IMetricEntryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMetricEntryDo
	Unscoped() IMetricEntryDo
	Create(values ...*domain.MetricEntry) error
	CreateInBatches(values []*domain.MetricEntry, batchSize int) error
	Save(values ...*domain.MetricEntry) error
	First() (*domain.MetricEntry, error)
	Take() (*domain.MetricEntry, error)
	Last() (*domain.MetricEntry, error)
	Find() ([]*domain.MetricEntry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.MetricEntry, err error)
	FindInBatches(result *[]*domain.MetricEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.MetricEntry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMetricEntryDo
	Assign(attrs ...field.AssignExpr) IMetricEntryDo
	Joins(fields ...field.RelationField) IMetricEntryDo
	Preload(fields ...field.RelationField) IMetricEntryDo
	FirstOrInit() (*domain.MetricEntry, error)
	FirstOrCreate() (*domain.MetricEntry, error)
	FindByPage(offset int, limit int) (result []*domain.MetricEntry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMetricEntryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m metricEntryDo) Debug() IMetricEntryDo {
	return m.withDO(m.DO.Debug())
}

func (m metricEntryDo) WithContext(ctx context.Context) IMetricEntryDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m metricEntryDo) ReadDB() IMetricEntryDo {
	return m.Clauses(dbresolver.Read)
}

func (m metricEntryDo) WriteDB() IMetricEntryDo {
	return m.Clauses(dbresolver.Write)
}

func (m metricEntryDo) Session(config *gorm.Session) IMetricEntryDo {
	return m.withDO(m.DO.Session(config))
}

func (m metricEntryDo) Clauses(conds ...clause.Expression) IMetricEntryDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m metricEntryDo) Returning(value interface{}, columns ...string) IMetricEntryDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m metricEntryDo) Not(conds ...gen.Condition) IMetricEntryDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m metricEntryDo) Or(conds ...gen.Condition) IMetricEntryDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m metricEntryDo) Select(conds ...field.Expr) IMetricEntryDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m metricEntryDo) Where(conds ...gen.Condition) IMetricEntryDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m metricEntryDo) Order(conds ...field.Expr) IMetricEntryDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m metricEntryDo) Distinct(cols ...field.Expr) IMetricEntryDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m metricEntryDo) Omit(cols ...field.Expr) IMetricEntryDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m metricEntryDo) Join(table schema.Tabler, on ...field.Expr) IMetricEntryDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m metricEntryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMetricEntryDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m metricEntryDo) RightJoin(table schema.Tabler, on ...field.Expr) IMetricEntryDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m metricEntryDo) Group(cols ...field.Expr) IMetricEntryDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m metricEntryDo) Having(conds ...gen.Condition) IMetricEntryDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m metricEntryDo) Limit(limit int) IMetricEntryDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m metricEntryDo) Offset(offset int) IMetricEntryDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m metricEntryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMetricEntryDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m metricEntryDo) Unscoped() IMetricEntryDo {
	return m.withDO(m.DO.Unscoped())
}

func (m metricEntryDo) Create(values ...*domain.MetricEntry) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m metricEntryDo) CreateInBatches(values []*domain.MetricEntry, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m metricEntryDo) Save(values ...*domain.MetricEntry) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m metricEntryDo) First() (*domain.MetricEntry, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MetricEntry), nil
	}
}

func (m metricEntryDo) Take() (*domain.MetricEntry, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MetricEntry), nil
	}
}

func (m metricEntryDo) Last() (*domain.MetricEntry, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MetricEntry), nil
	}
}

func (m metricEntryDo) Find() ([]*domain.MetricEntry, error) {
	result, err := m.DO.Find()
	return result.([]*domain.MetricEntry), err
}

func (m metricEntryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.MetricEntry, err error) {
	buf := make([]*domain.MetricEntry, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m metricEntryDo) FindInBatches(result *[]*domain.MetricEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m metricEntryDo) Attrs(attrs ...field.AssignExpr) IMetricEntryDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m metricEntryDo) Assign(attrs ...field.AssignExpr) IMetricEntryDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m metricEntryDo) Joins(fields ...field.RelationField) IMetricEntryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m metricEntryDo) Preload(fields ...field.RelationField) IMetricEntryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m metricEntryDo) FirstOrInit() (*domain.MetricEntry, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MetricEntry), nil
	}
}

func (m metricEntryDo) FirstOrCreate() (*domain.MetricEntry, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MetricEntry), nil
	}
}

func (m metricEntryDo) FindByPage(offset int, limit int) (result []*domain.MetricEntry, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m metricEntryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m metricEntryDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m metricEntryDo) Delete(models ...*domain.MetricEntry) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *metricEntryDo) withDO(do gen.Dao) *metricEntryDo {
	m.DO = *do.(*gen.DO)
	return m
}
