// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package database

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fulcrumproject/core/pkg/domain"
)

func newMetricType(db *gorm.DB, opts ...gen.DOOption) metricType {
	_metricType := metricType{}

	_metricType.metricTypeDo.UseDB(db, opts...)
	_metricType.metricTypeDo.UseModel(&domain.MetricType{})

	tableName := _metricType.metricTypeDo.TableName()
	_metricType.ALL = field.NewAsterisk(tableName)
	_metricType.ID = field.NewField(tableName, "id")
	_metricType.CreatedAt = field.NewTime(tableName, "created_at")
	_metricType.UpdatedAt = field.NewTime(tableName, "updated_at")
	_metricType.Name = field.NewString(tableName, "name")
	_metricType.EntityType = field.NewString(tableName, "entity_type")

	_metricType.fillFieldMap()

	return _metricType
}

type metricType struct {
	metricTypeDo metricTypeDo

	ALL        field.Asterisk
	ID         field.Field
	CreatedAt  field.Time
	UpdatedAt  field.Time
	Name       field.String
	EntityType field.String

	fieldMap map[string]field.Expr
}

func (m metricType) Table(newTableName string) *metricType {
	m.metricTypeDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m metricType) As(alias string) *metricType {
	m.metricTypeDo.DO = *(m.metricTypeDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *metricType) updateTableName(table string) *metricType {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewField(table, "id")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.Name = field.NewString(table, "name")
	m.EntityType = field.NewString(table, "entity_type")

	m.fillFieldMap()

	return m
}

func (m *metricType) WithContext(ctx context.Context) IMetricTypeDo {
	return m.metricTypeDo.WithContext(ctx)
}

func (m metricType) TableName() string { return m.metricTypeDo.TableName() }

func (m metricType) Alias() string { return m.metricTypeDo.Alias() }

func (m metricType) Columns(cols ...field.Expr) gen.Columns { return m.metricTypeDo.Columns(cols...) }

func (m *metricType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *metricType) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["id"] = m.ID
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["name"] = m.Name
	m.fieldMap["entity_type"] = m.EntityType
}

func (m metricType) clone(db *gorm.DB) metricType {
	m.metricTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m metricType) replaceDB(db *gorm.DB) metricType {
	m.metricTypeDo.ReplaceDB(db)
	return m
}

type metricTypeDo struct{ gen.DO }

type IMetricTypeDo interface {
	gen.SubQuery
	Debug() IMetricTypeDo
	WithContext(ctx context.Context) IMetricTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMetricTypeDo
	WriteDB() IMetricTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMetricTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMetricTypeDo
	Not(conds ...gen.Condition) IMetricTypeDo
	Or(conds ...gen.Condition) IMetricTypeDo
	Select(conds ...field.Expr) IMetricTypeDo
	Where(conds ...gen.Condition) IMetricTypeDo
	Order(conds ...field.Expr) IMetricTypeDo
	Distinct(cols ...field.Expr) IMetricTypeDo
	Omit(cols ...field.Expr) IMetricTypeDo
	Join(table schema.Tabler, on ...field.Expr) IMetricTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMetricTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMetricTypeDo
	Group(cols ...field.Expr) IMetricTypeDo
	Having(conds ...gen.Condition) IMetricTypeDo
	Limit(limit int) IMetricTypeDo
	Offset(offset int) IMetricTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMetricTypeDo
	Unscoped() IMetricTypeDo
	Create(values ...*domain.MetricType) error
	CreateInBatches(values []*domain.MetricType, batchSize int) error
	Save(values ...*domain.MetricType) error
	First() (*domain.MetricType, error)
	Take() (*domain.MetricType, error)
	Last() (*domain.MetricType, error)
	Find() ([]*domain.MetricType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.MetricType, err error)
	FindInBatches(result *[]*domain.MetricType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.MetricType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMetricTypeDo
	Assign(attrs ...field.AssignExpr) IMetricTypeDo
	Joins(fields ...field.RelationField) IMetricTypeDo
	Preload(fields ...field.RelationField) IMetricTypeDo
	FirstOrInit() (*domain.MetricType, error)
	FirstOrCreate() (*domain.MetricType, error)
	FindByPage(offset int, limit int) (result []*domain.MetricType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMetricTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m metricTypeDo) Debug() IMetricTypeDo {
	return m.withDO(m.DO.Debug())
}

func (m metricTypeDo) WithContext(ctx context.Context) IMetricTypeDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m metricTypeDo) ReadDB() IMetricTypeDo {
	return m.Clauses(dbresolver.Read)
}

func (m metricTypeDo) WriteDB() IMetricTypeDo {
	return m.Clauses(dbresolver.Write)
}

func (m metricTypeDo) Session(config *gorm.Session) IMetricTypeDo {
	return m.withDO(m.DO.Session(config))
}

func (m metricTypeDo) Clauses(conds ...clause.Expression) IMetricTypeDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m metricTypeDo) Returning(value interface{}, columns ...string) IMetricTypeDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m metricTypeDo) Not(conds ...gen.Condition) IMetricTypeDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m metricTypeDo) Or(conds ...gen.Condition) IMetricTypeDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m metricTypeDo) Select(conds ...field.Expr) IMetricTypeDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m metricTypeDo) Where(conds ...gen.Condition) IMetricTypeDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m metricTypeDo) Order(conds ...field.Expr) IMetricTypeDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m metricTypeDo) Distinct(cols ...field.Expr) IMetricTypeDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m metricTypeDo) Omit(cols ...field.Expr) IMetricTypeDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m metricTypeDo) Join(table schema.Tabler, on ...field.Expr) IMetricTypeDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m metricTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMetricTypeDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m metricTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IMetricTypeDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m metricTypeDo) Group(cols ...field.Expr) IMetricTypeDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m metricTypeDo) Having(conds ...gen.Condition) IMetricTypeDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m metricTypeDo) Limit(limit int) IMetricTypeDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m metricTypeDo) Offset(offset int) IMetricTypeDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m metricTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMetricTypeDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m metricTypeDo) Unscoped() IMetricTypeDo {
	return m.withDO(m.DO.Unscoped())
}

func (m metricTypeDo) Create(values ...*domain.MetricType) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m metricTypeDo) CreateInBatches(values []*domain.MetricType, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m metricTypeDo) Save(values ...*domain.MetricType) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m metricTypeDo) First() (*domain.MetricType, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MetricType), nil
	}
}

func (m metricTypeDo) Take() (*domain.MetricType, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MetricType), nil
	}
}

func (m metricTypeDo) Last() (*domain.MetricType, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MetricType), nil
	}
}

func (m metricTypeDo) Find() ([]*domain.MetricType, error) {
	result, err := m.DO.Find()
	return result.([]*domain.MetricType), err
}

func (m metricTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.MetricType, err error) {
	buf := make([]*domain.MetricType, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m metricTypeDo) FindInBatches(result *[]*domain.MetricType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m metricTypeDo) Attrs(attrs ...field.AssignExpr) IMetricTypeDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m metricTypeDo) Assign(attrs ...field.AssignExpr) IMetricTypeDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m metricTypeDo) Joins(fields ...field.RelationField) IMetricTypeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m metricTypeDo) Preload(fields ...field.RelationField) IMetricTypeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m metricTypeDo) FirstOrInit() (*domain.MetricType, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MetricType), nil
	}
}

func (m metricTypeDo) FirstOrCreate() (*domain.MetricType, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.MetricType), nil
	}
}

func (m metricTypeDo) FindByPage(offset int, limit int) (result []*domain.MetricType, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m metricTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m metricTypeDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m metricTypeDo) Delete(models ...*domain.MetricType) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *metricTypeDo) withDO(do gen.Dao) *metricTypeDo {
	m.DO = *do.(*gen.DO)
	return m
}
