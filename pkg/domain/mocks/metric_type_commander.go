// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMetricTypeCommander creates a new instance of MockMetricTypeCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricTypeCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricTypeCommander {
	mock := &MockMetricTypeCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricTypeCommander is an autogenerated mock type for the MetricTypeCommander type
type MockMetricTypeCommander struct {
	mock.Mock
}

type MockMetricTypeCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricTypeCommander) EXPECT() *MockMetricTypeCommander_Expecter {
	return &MockMetricTypeCommander_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockMetricTypeCommander
func (_mock *MockMetricTypeCommander) Create(ctx context.Context, params domain.CreateMetricTypeParams) (*domain.MetricType, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.MetricType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateMetricTypeParams) (*domain.MetricType, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateMetricTypeParams) *domain.MetricType); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MetricType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CreateMetricTypeParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricTypeCommander_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMetricTypeCommander_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CreateMetricTypeParams
func (_e *MockMetricTypeCommander_Expecter) Create(ctx interface{}, params interface{}) *MockMetricTypeCommander_Create_Call {
	return &MockMetricTypeCommander_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockMetricTypeCommander_Create_Call) Run(run func(ctx context.Context, params domain.CreateMetricTypeParams)) *MockMetricTypeCommander_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateMetricTypeParams
		if args[1] != nil {
			arg1 = args[1].(domain.CreateMetricTypeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricTypeCommander_Create_Call) Return(metricType *domain.MetricType, err error) *MockMetricTypeCommander_Create_Call {
	_c.Call.Return(metricType, err)
	return _c
}

func (_c *MockMetricTypeCommander_Create_Call) RunAndReturn(run func(ctx context.Context, params domain.CreateMetricTypeParams) (*domain.MetricType, error)) *MockMetricTypeCommander_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockMetricTypeCommander
func (_mock *MockMetricTypeCommander) Delete(ctx context.Context, id properties.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMetricTypeCommander_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMetricTypeCommander_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockMetricTypeCommander_Expecter) Delete(ctx interface{}, id interface{}) *MockMetricTypeCommander_Delete_Call {
	return &MockMetricTypeCommander_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockMetricTypeCommander_Delete_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockMetricTypeCommander_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricTypeCommander_Delete_Call) Return(err error) *MockMetricTypeCommander_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMetricTypeCommander_Delete_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) error) *MockMetricTypeCommander_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockMetricTypeCommander
func (_mock *MockMetricTypeCommander) Update(ctx context.Context, params domain.UpdateMetricTypeParams) (*domain.MetricType, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.MetricType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateMetricTypeParams) (*domain.MetricType, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateMetricTypeParams) *domain.MetricType); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MetricType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UpdateMetricTypeParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricTypeCommander_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMetricTypeCommander_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.UpdateMetricTypeParams
func (_e *MockMetricTypeCommander_Expecter) Update(ctx interface{}, params interface{}) *MockMetricTypeCommander_Update_Call {
	return &MockMetricTypeCommander_Update_Call{Call: _e.mock.On("Update", ctx, params)}
}

func (_c *MockMetricTypeCommander_Update_Call) Run(run func(ctx context.Context, params domain.UpdateMetricTypeParams)) *MockMetricTypeCommander_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UpdateMetricTypeParams
		if args[1] != nil {
			arg1 = args[1].(domain.UpdateMetricTypeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricTypeCommander_Update_Call) Return(metricType *domain.MetricType, err error) *MockMetricTypeCommander_Update_Call {
	_c.Call.Return(metricType, err)
	return _c
}

func (_c *MockMetricTypeCommander_Update_Call) RunAndReturn(run func(ctx context.Context, params domain.UpdateMetricTypeParams) (*domain.MetricType, error)) *MockMetricTypeCommander_Update_Call {
	_c.Call.Return(run)
	return _c
}
