// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fulcrumproject/core/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockReadOnlyStore creates a new instance of MockReadOnlyStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReadOnlyStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReadOnlyStore {
	mock := &MockReadOnlyStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReadOnlyStore is an autogenerated mock type for the ReadOnlyStore type
type MockReadOnlyStore struct {
	mock.Mock
}

type MockReadOnlyStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReadOnlyStore) EXPECT() *MockReadOnlyStore_Expecter {
	return &MockReadOnlyStore_Expecter{mock: &_m.Mock}
}

// AgentQuerier provides a mock function for the type MockReadOnlyStore
func (_mock *MockReadOnlyStore) AgentQuerier() domain.AgentQuerier {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AgentQuerier")
	}

	var r0 domain.AgentQuerier
	if returnFunc, ok := ret.Get(0).(func() domain.AgentQuerier); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.AgentQuerier)
		}
	}
	return r0
}

// MockReadOnlyStore_AgentQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AgentQuerier'
type MockReadOnlyStore_AgentQuerier_Call struct {
	*mock.Call
}

// AgentQuerier is a helper method to define mock.On call
func (_e *MockReadOnlyStore_Expecter) AgentQuerier() *MockReadOnlyStore_AgentQuerier_Call {
	return &MockReadOnlyStore_AgentQuerier_Call{Call: _e.mock.On("AgentQuerier")}
}

func (_c *MockReadOnlyStore_AgentQuerier_Call) Run(run func()) *MockReadOnlyStore_AgentQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReadOnlyStore_AgentQuerier_Call) Return(agentQuerier domain.AgentQuerier) *MockReadOnlyStore_AgentQuerier_Call {
	_c.Call.Return(agentQuerier)
	return _c
}

func (_c *MockReadOnlyStore_AgentQuerier_Call) RunAndReturn(run func() domain.AgentQuerier) *MockReadOnlyStore_AgentQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// AgentTypeQuerier provides a mock function for the type MockReadOnlyStore
func (_mock *MockReadOnlyStore) AgentTypeQuerier() domain.AgentTypeQuerier {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AgentTypeQuerier")
	}

	var r0 domain.AgentTypeQuerier
	if returnFunc, ok := ret.Get(0).(func() domain.AgentTypeQuerier); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.AgentTypeQuerier)
		}
	}
	return r0
}

// MockReadOnlyStore_AgentTypeQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AgentTypeQuerier'
type MockReadOnlyStore_AgentTypeQuerier_Call struct {
	*mock.Call
}

// AgentTypeQuerier is a helper method to define mock.On call
func (_e *MockReadOnlyStore_Expecter) AgentTypeQuerier() *MockReadOnlyStore_AgentTypeQuerier_Call {
	return &MockReadOnlyStore_AgentTypeQuerier_Call{Call: _e.mock.On("AgentTypeQuerier")}
}

func (_c *MockReadOnlyStore_AgentTypeQuerier_Call) Run(run func()) *MockReadOnlyStore_AgentTypeQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReadOnlyStore_AgentTypeQuerier_Call) Return(agentTypeQuerier domain.AgentTypeQuerier) *MockReadOnlyStore_AgentTypeQuerier_Call {
	_c.Call.Return(agentTypeQuerier)
	return _c
}

func (_c *MockReadOnlyStore_AgentTypeQuerier_Call) RunAndReturn(run func() domain.AgentTypeQuerier) *MockReadOnlyStore_AgentTypeQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// EventQuerier provides a mock function for the type MockReadOnlyStore
func (_mock *MockReadOnlyStore) EventQuerier() domain.EventQuerier {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventQuerier")
	}

	var r0 domain.EventQuerier
	if returnFunc, ok := ret.Get(0).(func() domain.EventQuerier); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.EventQuerier)
		}
	}
	return r0
}

// MockReadOnlyStore_EventQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventQuerier'
type MockReadOnlyStore_EventQuerier_Call struct {
	*mock.Call
}

// EventQuerier is a helper method to define mock.On call
func (_e *MockReadOnlyStore_Expecter) EventQuerier() *MockReadOnlyStore_EventQuerier_Call {
	return &MockReadOnlyStore_EventQuerier_Call{Call: _e.mock.On("EventQuerier")}
}

func (_c *MockReadOnlyStore_EventQuerier_Call) Run(run func()) *MockReadOnlyStore_EventQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReadOnlyStore_EventQuerier_Call) Return(eventQuerier domain.EventQuerier) *MockReadOnlyStore_EventQuerier_Call {
	_c.Call.Return(eventQuerier)
	return _c
}

func (_c *MockReadOnlyStore_EventQuerier_Call) RunAndReturn(run func() domain.EventQuerier) *MockReadOnlyStore_EventQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// EventSubscriptionQuerier provides a mock function for the type MockReadOnlyStore
func (_mock *MockReadOnlyStore) EventSubscriptionQuerier() domain.EventSubscriptionQuerier {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventSubscriptionQuerier")
	}

	var r0 domain.EventSubscriptionQuerier
	if returnFunc, ok := ret.Get(0).(func() domain.EventSubscriptionQuerier); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.EventSubscriptionQuerier)
		}
	}
	return r0
}

// MockReadOnlyStore_EventSubscriptionQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventSubscriptionQuerier'
type MockReadOnlyStore_EventSubscriptionQuerier_Call struct {
	*mock.Call
}

// EventSubscriptionQuerier is a helper method to define mock.On call
func (_e *MockReadOnlyStore_Expecter) EventSubscriptionQuerier() *MockReadOnlyStore_EventSubscriptionQuerier_Call {
	return &MockReadOnlyStore_EventSubscriptionQuerier_Call{Call: _e.mock.On("EventSubscriptionQuerier")}
}

func (_c *MockReadOnlyStore_EventSubscriptionQuerier_Call) Run(run func()) *MockReadOnlyStore_EventSubscriptionQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReadOnlyStore_EventSubscriptionQuerier_Call) Return(eventSubscriptionQuerier domain.EventSubscriptionQuerier) *MockReadOnlyStore_EventSubscriptionQuerier_Call {
	_c.Call.Return(eventSubscriptionQuerier)
	return _c
}

func (_c *MockReadOnlyStore_EventSubscriptionQuerier_Call) RunAndReturn(run func() domain.EventSubscriptionQuerier) *MockReadOnlyStore_EventSubscriptionQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// JobQuerier provides a mock function for the type MockReadOnlyStore
func (_mock *MockReadOnlyStore) JobQuerier() domain.JobQuerier {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for JobQuerier")
	}

	var r0 domain.JobQuerier
	if returnFunc, ok := ret.Get(0).(func() domain.JobQuerier); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.JobQuerier)
		}
	}
	return r0
}

// MockReadOnlyStore_JobQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JobQuerier'
type MockReadOnlyStore_JobQuerier_Call struct {
	*mock.Call
}

// JobQuerier is a helper method to define mock.On call
func (_e *MockReadOnlyStore_Expecter) JobQuerier() *MockReadOnlyStore_JobQuerier_Call {
	return &MockReadOnlyStore_JobQuerier_Call{Call: _e.mock.On("JobQuerier")}
}

func (_c *MockReadOnlyStore_JobQuerier_Call) Run(run func()) *MockReadOnlyStore_JobQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReadOnlyStore_JobQuerier_Call) Return(jobQuerier domain.JobQuerier) *MockReadOnlyStore_JobQuerier_Call {
	_c.Call.Return(jobQuerier)
	return _c
}

func (_c *MockReadOnlyStore_JobQuerier_Call) RunAndReturn(run func() domain.JobQuerier) *MockReadOnlyStore_JobQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// MetricTypeQuerier provides a mock function for the type MockReadOnlyStore
func (_mock *MockReadOnlyStore) MetricTypeQuerier() domain.MetricTypeQuerier {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MetricTypeQuerier")
	}

	var r0 domain.MetricTypeQuerier
	if returnFunc, ok := ret.Get(0).(func() domain.MetricTypeQuerier); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MetricTypeQuerier)
		}
	}
	return r0
}

// MockReadOnlyStore_MetricTypeQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetricTypeQuerier'
type MockReadOnlyStore_MetricTypeQuerier_Call struct {
	*mock.Call
}

// MetricTypeQuerier is a helper method to define mock.On call
func (_e *MockReadOnlyStore_Expecter) MetricTypeQuerier() *MockReadOnlyStore_MetricTypeQuerier_Call {
	return &MockReadOnlyStore_MetricTypeQuerier_Call{Call: _e.mock.On("MetricTypeQuerier")}
}

func (_c *MockReadOnlyStore_MetricTypeQuerier_Call) Run(run func()) *MockReadOnlyStore_MetricTypeQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReadOnlyStore_MetricTypeQuerier_Call) Return(metricTypeQuerier domain.MetricTypeQuerier) *MockReadOnlyStore_MetricTypeQuerier_Call {
	_c.Call.Return(metricTypeQuerier)
	return _c
}

func (_c *MockReadOnlyStore_MetricTypeQuerier_Call) RunAndReturn(run func() domain.MetricTypeQuerier) *MockReadOnlyStore_MetricTypeQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// ParticipantQuerier provides a mock function for the type MockReadOnlyStore
func (_mock *MockReadOnlyStore) ParticipantQuerier() domain.ParticipantQuerier {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParticipantQuerier")
	}

	var r0 domain.ParticipantQuerier
	if returnFunc, ok := ret.Get(0).(func() domain.ParticipantQuerier); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ParticipantQuerier)
		}
	}
	return r0
}

// MockReadOnlyStore_ParticipantQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParticipantQuerier'
type MockReadOnlyStore_ParticipantQuerier_Call struct {
	*mock.Call
}

// ParticipantQuerier is a helper method to define mock.On call
func (_e *MockReadOnlyStore_Expecter) ParticipantQuerier() *MockReadOnlyStore_ParticipantQuerier_Call {
	return &MockReadOnlyStore_ParticipantQuerier_Call{Call: _e.mock.On("ParticipantQuerier")}
}

func (_c *MockReadOnlyStore_ParticipantQuerier_Call) Run(run func()) *MockReadOnlyStore_ParticipantQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReadOnlyStore_ParticipantQuerier_Call) Return(participantQuerier domain.ParticipantQuerier) *MockReadOnlyStore_ParticipantQuerier_Call {
	_c.Call.Return(participantQuerier)
	return _c
}

func (_c *MockReadOnlyStore_ParticipantQuerier_Call) RunAndReturn(run func() domain.ParticipantQuerier) *MockReadOnlyStore_ParticipantQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceGroupQuerier provides a mock function for the type MockReadOnlyStore
func (_mock *MockReadOnlyStore) ServiceGroupQuerier() domain.ServiceGroupQuerier {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceGroupQuerier")
	}

	var r0 domain.ServiceGroupQuerier
	if returnFunc, ok := ret.Get(0).(func() domain.ServiceGroupQuerier); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ServiceGroupQuerier)
		}
	}
	return r0
}

// MockReadOnlyStore_ServiceGroupQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceGroupQuerier'
type MockReadOnlyStore_ServiceGroupQuerier_Call struct {
	*mock.Call
}

// ServiceGroupQuerier is a helper method to define mock.On call
func (_e *MockReadOnlyStore_Expecter) ServiceGroupQuerier() *MockReadOnlyStore_ServiceGroupQuerier_Call {
	return &MockReadOnlyStore_ServiceGroupQuerier_Call{Call: _e.mock.On("ServiceGroupQuerier")}
}

func (_c *MockReadOnlyStore_ServiceGroupQuerier_Call) Run(run func()) *MockReadOnlyStore_ServiceGroupQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReadOnlyStore_ServiceGroupQuerier_Call) Return(serviceGroupQuerier domain.ServiceGroupQuerier) *MockReadOnlyStore_ServiceGroupQuerier_Call {
	_c.Call.Return(serviceGroupQuerier)
	return _c
}

func (_c *MockReadOnlyStore_ServiceGroupQuerier_Call) RunAndReturn(run func() domain.ServiceGroupQuerier) *MockReadOnlyStore_ServiceGroupQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceQuerier provides a mock function for the type MockReadOnlyStore
func (_mock *MockReadOnlyStore) ServiceQuerier() domain.ServiceQuerier {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceQuerier")
	}

	var r0 domain.ServiceQuerier
	if returnFunc, ok := ret.Get(0).(func() domain.ServiceQuerier); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ServiceQuerier)
		}
	}
	return r0
}

// MockReadOnlyStore_ServiceQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceQuerier'
type MockReadOnlyStore_ServiceQuerier_Call struct {
	*mock.Call
}

// ServiceQuerier is a helper method to define mock.On call
func (_e *MockReadOnlyStore_Expecter) ServiceQuerier() *MockReadOnlyStore_ServiceQuerier_Call {
	return &MockReadOnlyStore_ServiceQuerier_Call{Call: _e.mock.On("ServiceQuerier")}
}

func (_c *MockReadOnlyStore_ServiceQuerier_Call) Run(run func()) *MockReadOnlyStore_ServiceQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReadOnlyStore_ServiceQuerier_Call) Return(serviceQuerier domain.ServiceQuerier) *MockReadOnlyStore_ServiceQuerier_Call {
	_c.Call.Return(serviceQuerier)
	return _c
}

func (_c *MockReadOnlyStore_ServiceQuerier_Call) RunAndReturn(run func() domain.ServiceQuerier) *MockReadOnlyStore_ServiceQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceTypeQuerier provides a mock function for the type MockReadOnlyStore
func (_mock *MockReadOnlyStore) ServiceTypeQuerier() domain.ServiceTypeQuerier {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceTypeQuerier")
	}

	var r0 domain.ServiceTypeQuerier
	if returnFunc, ok := ret.Get(0).(func() domain.ServiceTypeQuerier); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ServiceTypeQuerier)
		}
	}
	return r0
}

// MockReadOnlyStore_ServiceTypeQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceTypeQuerier'
type MockReadOnlyStore_ServiceTypeQuerier_Call struct {
	*mock.Call
}

// ServiceTypeQuerier is a helper method to define mock.On call
func (_e *MockReadOnlyStore_Expecter) ServiceTypeQuerier() *MockReadOnlyStore_ServiceTypeQuerier_Call {
	return &MockReadOnlyStore_ServiceTypeQuerier_Call{Call: _e.mock.On("ServiceTypeQuerier")}
}

func (_c *MockReadOnlyStore_ServiceTypeQuerier_Call) Run(run func()) *MockReadOnlyStore_ServiceTypeQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReadOnlyStore_ServiceTypeQuerier_Call) Return(serviceTypeQuerier domain.ServiceTypeQuerier) *MockReadOnlyStore_ServiceTypeQuerier_Call {
	_c.Call.Return(serviceTypeQuerier)
	return _c
}

func (_c *MockReadOnlyStore_ServiceTypeQuerier_Call) RunAndReturn(run func() domain.ServiceTypeQuerier) *MockReadOnlyStore_ServiceTypeQuerier_Call {
	_c.Call.Return(run)
	return _c
}

// TokenQuerier provides a mock function for the type MockReadOnlyStore
func (_mock *MockReadOnlyStore) TokenQuerier() domain.TokenQuerier {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TokenQuerier")
	}

	var r0 domain.TokenQuerier
	if returnFunc, ok := ret.Get(0).(func() domain.TokenQuerier); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.TokenQuerier)
		}
	}
	return r0
}

// MockReadOnlyStore_TokenQuerier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenQuerier'
type MockReadOnlyStore_TokenQuerier_Call struct {
	*mock.Call
}

// TokenQuerier is a helper method to define mock.On call
func (_e *MockReadOnlyStore_Expecter) TokenQuerier() *MockReadOnlyStore_TokenQuerier_Call {
	return &MockReadOnlyStore_TokenQuerier_Call{Call: _e.mock.On("TokenQuerier")}
}

func (_c *MockReadOnlyStore_TokenQuerier_Call) Run(run func()) *MockReadOnlyStore_TokenQuerier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReadOnlyStore_TokenQuerier_Call) Return(tokenQuerier domain.TokenQuerier) *MockReadOnlyStore_TokenQuerier_Call {
	_c.Call.Return(tokenQuerier)
	return _c
}

func (_c *MockReadOnlyStore_TokenQuerier_Call) RunAndReturn(run func() domain.TokenQuerier) *MockReadOnlyStore_TokenQuerier_Call {
	_c.Call.Return(run)
	return _c
}
