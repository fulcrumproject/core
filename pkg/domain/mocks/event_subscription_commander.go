// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEventSubscriptionCommander creates a new instance of MockEventSubscriptionCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventSubscriptionCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventSubscriptionCommander {
	mock := &MockEventSubscriptionCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventSubscriptionCommander is an autogenerated mock type for the EventSubscriptionCommander type
type MockEventSubscriptionCommander struct {
	mock.Mock
}

type MockEventSubscriptionCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventSubscriptionCommander) EXPECT() *MockEventSubscriptionCommander_Expecter {
	return &MockEventSubscriptionCommander_Expecter{mock: &_m.Mock}
}

// AcknowledgeEvents provides a mock function for the type MockEventSubscriptionCommander
func (_mock *MockEventSubscriptionCommander) AcknowledgeEvents(ctx context.Context, params domain.AcknowledgeEventsParams) (*domain.EventSubscription, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for AcknowledgeEvents")
	}

	var r0 *domain.EventSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AcknowledgeEventsParams) (*domain.EventSubscription, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AcknowledgeEventsParams) *domain.EventSubscription); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.EventSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AcknowledgeEventsParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventSubscriptionCommander_AcknowledgeEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcknowledgeEvents'
type MockEventSubscriptionCommander_AcknowledgeEvents_Call struct {
	*mock.Call
}

// AcknowledgeEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.AcknowledgeEventsParams
func (_e *MockEventSubscriptionCommander_Expecter) AcknowledgeEvents(ctx interface{}, params interface{}) *MockEventSubscriptionCommander_AcknowledgeEvents_Call {
	return &MockEventSubscriptionCommander_AcknowledgeEvents_Call{Call: _e.mock.On("AcknowledgeEvents", ctx, params)}
}

func (_c *MockEventSubscriptionCommander_AcknowledgeEvents_Call) Run(run func(ctx context.Context, params domain.AcknowledgeEventsParams)) *MockEventSubscriptionCommander_AcknowledgeEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AcknowledgeEventsParams
		if args[1] != nil {
			arg1 = args[1].(domain.AcknowledgeEventsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventSubscriptionCommander_AcknowledgeEvents_Call) Return(eventSubscription *domain.EventSubscription, err error) *MockEventSubscriptionCommander_AcknowledgeEvents_Call {
	_c.Call.Return(eventSubscription, err)
	return _c
}

func (_c *MockEventSubscriptionCommander_AcknowledgeEvents_Call) RunAndReturn(run func(ctx context.Context, params domain.AcknowledgeEventsParams) (*domain.EventSubscription, error)) *MockEventSubscriptionCommander_AcknowledgeEvents_Call {
	_c.Call.Return(run)
	return _c
}

// AcquireLease provides a mock function for the type MockEventSubscriptionCommander
func (_mock *MockEventSubscriptionCommander) AcquireLease(ctx context.Context, params domain.LeaseParams) (*domain.EventSubscription, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for AcquireLease")
	}

	var r0 *domain.EventSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LeaseParams) (*domain.EventSubscription, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LeaseParams) *domain.EventSubscription); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.EventSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.LeaseParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventSubscriptionCommander_AcquireLease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireLease'
type MockEventSubscriptionCommander_AcquireLease_Call struct {
	*mock.Call
}

// AcquireLease is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.LeaseParams
func (_e *MockEventSubscriptionCommander_Expecter) AcquireLease(ctx interface{}, params interface{}) *MockEventSubscriptionCommander_AcquireLease_Call {
	return &MockEventSubscriptionCommander_AcquireLease_Call{Call: _e.mock.On("AcquireLease", ctx, params)}
}

func (_c *MockEventSubscriptionCommander_AcquireLease_Call) Run(run func(ctx context.Context, params domain.LeaseParams)) *MockEventSubscriptionCommander_AcquireLease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LeaseParams
		if args[1] != nil {
			arg1 = args[1].(domain.LeaseParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventSubscriptionCommander_AcquireLease_Call) Return(eventSubscription *domain.EventSubscription, err error) *MockEventSubscriptionCommander_AcquireLease_Call {
	_c.Call.Return(eventSubscription, err)
	return _c
}

func (_c *MockEventSubscriptionCommander_AcquireLease_Call) RunAndReturn(run func(ctx context.Context, params domain.LeaseParams) (*domain.EventSubscription, error)) *MockEventSubscriptionCommander_AcquireLease_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockEventSubscriptionCommander
func (_mock *MockEventSubscriptionCommander) Delete(ctx context.Context, subscriberID string) error {
	ret := _mock.Called(ctx, subscriberID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, subscriberID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventSubscriptionCommander_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockEventSubscriptionCommander_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - subscriberID string
func (_e *MockEventSubscriptionCommander_Expecter) Delete(ctx interface{}, subscriberID interface{}) *MockEventSubscriptionCommander_Delete_Call {
	return &MockEventSubscriptionCommander_Delete_Call{Call: _e.mock.On("Delete", ctx, subscriberID)}
}

func (_c *MockEventSubscriptionCommander_Delete_Call) Run(run func(ctx context.Context, subscriberID string)) *MockEventSubscriptionCommander_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventSubscriptionCommander_Delete_Call) Return(err error) *MockEventSubscriptionCommander_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventSubscriptionCommander_Delete_Call) RunAndReturn(run func(ctx context.Context, subscriberID string) error) *MockEventSubscriptionCommander_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseLease provides a mock function for the type MockEventSubscriptionCommander
func (_mock *MockEventSubscriptionCommander) ReleaseLease(ctx context.Context, params domain.ReleaseLeaseParams) (*domain.EventSubscription, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseLease")
	}

	var r0 *domain.EventSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ReleaseLeaseParams) (*domain.EventSubscription, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.ReleaseLeaseParams) *domain.EventSubscription); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.EventSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.ReleaseLeaseParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventSubscriptionCommander_ReleaseLease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseLease'
type MockEventSubscriptionCommander_ReleaseLease_Call struct {
	*mock.Call
}

// ReleaseLease is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.ReleaseLeaseParams
func (_e *MockEventSubscriptionCommander_Expecter) ReleaseLease(ctx interface{}, params interface{}) *MockEventSubscriptionCommander_ReleaseLease_Call {
	return &MockEventSubscriptionCommander_ReleaseLease_Call{Call: _e.mock.On("ReleaseLease", ctx, params)}
}

func (_c *MockEventSubscriptionCommander_ReleaseLease_Call) Run(run func(ctx context.Context, params domain.ReleaseLeaseParams)) *MockEventSubscriptionCommander_ReleaseLease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.ReleaseLeaseParams
		if args[1] != nil {
			arg1 = args[1].(domain.ReleaseLeaseParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventSubscriptionCommander_ReleaseLease_Call) Return(eventSubscription *domain.EventSubscription, err error) *MockEventSubscriptionCommander_ReleaseLease_Call {
	_c.Call.Return(eventSubscription, err)
	return _c
}

func (_c *MockEventSubscriptionCommander_ReleaseLease_Call) RunAndReturn(run func(ctx context.Context, params domain.ReleaseLeaseParams) (*domain.EventSubscription, error)) *MockEventSubscriptionCommander_ReleaseLease_Call {
	_c.Call.Return(run)
	return _c
}

// RenewLease provides a mock function for the type MockEventSubscriptionCommander
func (_mock *MockEventSubscriptionCommander) RenewLease(ctx context.Context, params domain.LeaseParams) (*domain.EventSubscription, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for RenewLease")
	}

	var r0 *domain.EventSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LeaseParams) (*domain.EventSubscription, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.LeaseParams) *domain.EventSubscription); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.EventSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.LeaseParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventSubscriptionCommander_RenewLease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenewLease'
type MockEventSubscriptionCommander_RenewLease_Call struct {
	*mock.Call
}

// RenewLease is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.LeaseParams
func (_e *MockEventSubscriptionCommander_Expecter) RenewLease(ctx interface{}, params interface{}) *MockEventSubscriptionCommander_RenewLease_Call {
	return &MockEventSubscriptionCommander_RenewLease_Call{Call: _e.mock.On("RenewLease", ctx, params)}
}

func (_c *MockEventSubscriptionCommander_RenewLease_Call) Run(run func(ctx context.Context, params domain.LeaseParams)) *MockEventSubscriptionCommander_RenewLease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.LeaseParams
		if args[1] != nil {
			arg1 = args[1].(domain.LeaseParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventSubscriptionCommander_RenewLease_Call) Return(eventSubscription *domain.EventSubscription, err error) *MockEventSubscriptionCommander_RenewLease_Call {
	_c.Call.Return(eventSubscription, err)
	return _c
}

func (_c *MockEventSubscriptionCommander_RenewLease_Call) RunAndReturn(run func(ctx context.Context, params domain.LeaseParams) (*domain.EventSubscription, error)) *MockEventSubscriptionCommander_RenewLease_Call {
	_c.Call.Return(run)
	return _c
}

// SetActive provides a mock function for the type MockEventSubscriptionCommander
func (_mock *MockEventSubscriptionCommander) SetActive(ctx context.Context, params domain.SetActiveParams) (*domain.EventSubscription, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for SetActive")
	}

	var r0 *domain.EventSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SetActiveParams) (*domain.EventSubscription, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.SetActiveParams) *domain.EventSubscription); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.EventSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.SetActiveParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventSubscriptionCommander_SetActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetActive'
type MockEventSubscriptionCommander_SetActive_Call struct {
	*mock.Call
}

// SetActive is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.SetActiveParams
func (_e *MockEventSubscriptionCommander_Expecter) SetActive(ctx interface{}, params interface{}) *MockEventSubscriptionCommander_SetActive_Call {
	return &MockEventSubscriptionCommander_SetActive_Call{Call: _e.mock.On("SetActive", ctx, params)}
}

func (_c *MockEventSubscriptionCommander_SetActive_Call) Run(run func(ctx context.Context, params domain.SetActiveParams)) *MockEventSubscriptionCommander_SetActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.SetActiveParams
		if args[1] != nil {
			arg1 = args[1].(domain.SetActiveParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventSubscriptionCommander_SetActive_Call) Return(eventSubscription *domain.EventSubscription, err error) *MockEventSubscriptionCommander_SetActive_Call {
	_c.Call.Return(eventSubscription, err)
	return _c
}

func (_c *MockEventSubscriptionCommander_SetActive_Call) RunAndReturn(run func(ctx context.Context, params domain.SetActiveParams) (*domain.EventSubscription, error)) *MockEventSubscriptionCommander_SetActive_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProgress provides a mock function for the type MockEventSubscriptionCommander
func (_mock *MockEventSubscriptionCommander) UpdateProgress(ctx context.Context, params domain.UpdateProgressParams) (*domain.EventSubscription, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProgress")
	}

	var r0 *domain.EventSubscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateProgressParams) (*domain.EventSubscription, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateProgressParams) *domain.EventSubscription); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.EventSubscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UpdateProgressParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventSubscriptionCommander_UpdateProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProgress'
type MockEventSubscriptionCommander_UpdateProgress_Call struct {
	*mock.Call
}

// UpdateProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.UpdateProgressParams
func (_e *MockEventSubscriptionCommander_Expecter) UpdateProgress(ctx interface{}, params interface{}) *MockEventSubscriptionCommander_UpdateProgress_Call {
	return &MockEventSubscriptionCommander_UpdateProgress_Call{Call: _e.mock.On("UpdateProgress", ctx, params)}
}

func (_c *MockEventSubscriptionCommander_UpdateProgress_Call) Run(run func(ctx context.Context, params domain.UpdateProgressParams)) *MockEventSubscriptionCommander_UpdateProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UpdateProgressParams
		if args[1] != nil {
			arg1 = args[1].(domain.UpdateProgressParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventSubscriptionCommander_UpdateProgress_Call) Return(eventSubscription *domain.EventSubscription, err error) *MockEventSubscriptionCommander_UpdateProgress_Call {
	_c.Call.Return(eventSubscription, err)
	return _c
}

func (_c *MockEventSubscriptionCommander_UpdateProgress_Call) RunAndReturn(run func(ctx context.Context, params domain.UpdateProgressParams) (*domain.EventSubscription, error)) *MockEventSubscriptionCommander_UpdateProgress_Call {
	_c.Call.Return(run)
	return _c
}
