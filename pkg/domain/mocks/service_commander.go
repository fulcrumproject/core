// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceCommander creates a new instance of MockServiceCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceCommander {
	mock := &MockServiceCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceCommander is an autogenerated mock type for the ServiceCommander type
type MockServiceCommander struct {
	mock.Mock
}

type MockServiceCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceCommander) EXPECT() *MockServiceCommander_Expecter {
	return &MockServiceCommander_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockServiceCommander
func (_mock *MockServiceCommander) Create(ctx context.Context, params domain.CreateServiceParams) (*domain.Service, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServiceParams) (*domain.Service, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServiceParams) *domain.Service); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CreateServiceParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceCommander_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServiceCommander_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CreateServiceParams
func (_e *MockServiceCommander_Expecter) Create(ctx interface{}, params interface{}) *MockServiceCommander_Create_Call {
	return &MockServiceCommander_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockServiceCommander_Create_Call) Run(run func(ctx context.Context, params domain.CreateServiceParams)) *MockServiceCommander_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateServiceParams
		if args[1] != nil {
			arg1 = args[1].(domain.CreateServiceParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceCommander_Create_Call) Return(service *domain.Service, err error) *MockServiceCommander_Create_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockServiceCommander_Create_Call) RunAndReturn(run func(ctx context.Context, params domain.CreateServiceParams) (*domain.Service, error)) *MockServiceCommander_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithTags provides a mock function for the type MockServiceCommander
func (_mock *MockServiceCommander) CreateWithTags(ctx context.Context, params domain.CreateServiceWithTagsParams) (*domain.Service, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithTags")
	}

	var r0 *domain.Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServiceWithTagsParams) (*domain.Service, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServiceWithTagsParams) *domain.Service); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CreateServiceWithTagsParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceCommander_CreateWithTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithTags'
type MockServiceCommander_CreateWithTags_Call struct {
	*mock.Call
}

// CreateWithTags is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CreateServiceWithTagsParams
func (_e *MockServiceCommander_Expecter) CreateWithTags(ctx interface{}, params interface{}) *MockServiceCommander_CreateWithTags_Call {
	return &MockServiceCommander_CreateWithTags_Call{Call: _e.mock.On("CreateWithTags", ctx, params)}
}

func (_c *MockServiceCommander_CreateWithTags_Call) Run(run func(ctx context.Context, params domain.CreateServiceWithTagsParams)) *MockServiceCommander_CreateWithTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateServiceWithTagsParams
		if args[1] != nil {
			arg1 = args[1].(domain.CreateServiceWithTagsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceCommander_CreateWithTags_Call) Return(service *domain.Service, err error) *MockServiceCommander_CreateWithTags_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockServiceCommander_CreateWithTags_Call) RunAndReturn(run func(ctx context.Context, params domain.CreateServiceWithTagsParams) (*domain.Service, error)) *MockServiceCommander_CreateWithTags_Call {
	_c.Call.Return(run)
	return _c
}

// DoAction provides a mock function for the type MockServiceCommander
func (_mock *MockServiceCommander) DoAction(ctx context.Context, params domain.DoServiceActionParams) (*domain.Service, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for DoAction")
	}

	var r0 *domain.Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.DoServiceActionParams) (*domain.Service, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.DoServiceActionParams) *domain.Service); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.DoServiceActionParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceCommander_DoAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoAction'
type MockServiceCommander_DoAction_Call struct {
	*mock.Call
}

// DoAction is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.DoServiceActionParams
func (_e *MockServiceCommander_Expecter) DoAction(ctx interface{}, params interface{}) *MockServiceCommander_DoAction_Call {
	return &MockServiceCommander_DoAction_Call{Call: _e.mock.On("DoAction", ctx, params)}
}

func (_c *MockServiceCommander_DoAction_Call) Run(run func(ctx context.Context, params domain.DoServiceActionParams)) *MockServiceCommander_DoAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.DoServiceActionParams
		if args[1] != nil {
			arg1 = args[1].(domain.DoServiceActionParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceCommander_DoAction_Call) Return(service *domain.Service, err error) *MockServiceCommander_DoAction_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockServiceCommander_DoAction_Call) RunAndReturn(run func(ctx context.Context, params domain.DoServiceActionParams) (*domain.Service, error)) *MockServiceCommander_DoAction_Call {
	_c.Call.Return(run)
	return _c
}

// FailTimeoutServicesAndJobs provides a mock function for the type MockServiceCommander
func (_mock *MockServiceCommander) FailTimeoutServicesAndJobs(ctx context.Context, timeout time.Duration) (int, error) {
	ret := _mock.Called(ctx, timeout)

	if len(ret) == 0 {
		panic("no return value specified for FailTimeoutServicesAndJobs")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration) (int, error)); ok {
		return returnFunc(ctx, timeout)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration) int); ok {
		r0 = returnFunc(ctx, timeout)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = returnFunc(ctx, timeout)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceCommander_FailTimeoutServicesAndJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailTimeoutServicesAndJobs'
type MockServiceCommander_FailTimeoutServicesAndJobs_Call struct {
	*mock.Call
}

// FailTimeoutServicesAndJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
func (_e *MockServiceCommander_Expecter) FailTimeoutServicesAndJobs(ctx interface{}, timeout interface{}) *MockServiceCommander_FailTimeoutServicesAndJobs_Call {
	return &MockServiceCommander_FailTimeoutServicesAndJobs_Call{Call: _e.mock.On("FailTimeoutServicesAndJobs", ctx, timeout)}
}

func (_c *MockServiceCommander_FailTimeoutServicesAndJobs_Call) Run(run func(ctx context.Context, timeout time.Duration)) *MockServiceCommander_FailTimeoutServicesAndJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceCommander_FailTimeoutServicesAndJobs_Call) Return(n int, err error) *MockServiceCommander_FailTimeoutServicesAndJobs_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceCommander_FailTimeoutServicesAndJobs_Call) RunAndReturn(run func(ctx context.Context, timeout time.Duration) (int, error)) *MockServiceCommander_FailTimeoutServicesAndJobs_Call {
	_c.Call.Return(run)
	return _c
}

// Retry provides a mock function for the type MockServiceCommander
func (_mock *MockServiceCommander) Retry(ctx context.Context, id properties.UUID) (*domain.Service, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Retry")
	}

	var r0 *domain.Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.Service, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.Service); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceCommander_Retry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Retry'
type MockServiceCommander_Retry_Call struct {
	*mock.Call
}

// Retry is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceCommander_Expecter) Retry(ctx interface{}, id interface{}) *MockServiceCommander_Retry_Call {
	return &MockServiceCommander_Retry_Call{Call: _e.mock.On("Retry", ctx, id)}
}

func (_c *MockServiceCommander_Retry_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceCommander_Retry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceCommander_Retry_Call) Return(service *domain.Service, err error) *MockServiceCommander_Retry_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockServiceCommander_Retry_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (*domain.Service, error)) *MockServiceCommander_Retry_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockServiceCommander
func (_mock *MockServiceCommander) Update(ctx context.Context, params domain.UpdateServiceParams) (*domain.Service, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateServiceParams) (*domain.Service, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateServiceParams) *domain.Service); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UpdateServiceParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceCommander_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockServiceCommander_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.UpdateServiceParams
func (_e *MockServiceCommander_Expecter) Update(ctx interface{}, params interface{}) *MockServiceCommander_Update_Call {
	return &MockServiceCommander_Update_Call{Call: _e.mock.On("Update", ctx, params)}
}

func (_c *MockServiceCommander_Update_Call) Run(run func(ctx context.Context, params domain.UpdateServiceParams)) *MockServiceCommander_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UpdateServiceParams
		if args[1] != nil {
			arg1 = args[1].(domain.UpdateServiceParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceCommander_Update_Call) Return(service *domain.Service, err error) *MockServiceCommander_Update_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockServiceCommander_Update_Call) RunAndReturn(run func(ctx context.Context, params domain.UpdateServiceParams) (*domain.Service, error)) *MockServiceCommander_Update_Call {
	_c.Call.Return(run)
	return _c
}
