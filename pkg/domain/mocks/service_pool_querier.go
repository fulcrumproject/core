// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServicePoolQuerier creates a new instance of MockServicePoolQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicePoolQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicePoolQuerier {
	mock := &MockServicePoolQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServicePoolQuerier is an autogenerated mock type for the ServicePoolQuerier type
type MockServicePoolQuerier struct {
	mock.Mock
}

type MockServicePoolQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicePoolQuerier) EXPECT() *MockServicePoolQuerier_Expecter {
	return &MockServicePoolQuerier_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function for the type MockServicePoolQuerier
func (_mock *MockServicePoolQuerier) Exists(ctx context.Context, id properties.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolQuerier_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockServicePoolQuerier_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolQuerier_Expecter) Exists(ctx interface{}, id interface{}) *MockServicePoolQuerier_Exists_Call {
	return &MockServicePoolQuerier_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockServicePoolQuerier_Exists_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolQuerier_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolQuerier_Exists_Call) Return(b bool, err error) *MockServicePoolQuerier_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockServicePoolQuerier_Exists_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (bool, error)) *MockServicePoolQuerier_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindByPoolSetAndType provides a mock function for the type MockServicePoolQuerier
func (_mock *MockServicePoolQuerier) FindByPoolSetAndType(ctx context.Context, poolSetID properties.UUID, poolType string) (*domain.ServicePool, error) {
	ret := _mock.Called(ctx, poolSetID, poolType)

	if len(ret) == 0 {
		panic("no return value specified for FindByPoolSetAndType")
	}

	var r0 *domain.ServicePool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, string) (*domain.ServicePool, error)); ok {
		return returnFunc(ctx, poolSetID, poolType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, string) *domain.ServicePool); ok {
		r0 = returnFunc(ctx, poolSetID, poolType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID, string) error); ok {
		r1 = returnFunc(ctx, poolSetID, poolType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolQuerier_FindByPoolSetAndType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByPoolSetAndType'
type MockServicePoolQuerier_FindByPoolSetAndType_Call struct {
	*mock.Call
}

// FindByPoolSetAndType is a helper method to define mock.On call
//   - ctx context.Context
//   - poolSetID properties.UUID
//   - poolType string
func (_e *MockServicePoolQuerier_Expecter) FindByPoolSetAndType(ctx interface{}, poolSetID interface{}, poolType interface{}) *MockServicePoolQuerier_FindByPoolSetAndType_Call {
	return &MockServicePoolQuerier_FindByPoolSetAndType_Call{Call: _e.mock.On("FindByPoolSetAndType", ctx, poolSetID, poolType)}
}

func (_c *MockServicePoolQuerier_FindByPoolSetAndType_Call) Run(run func(ctx context.Context, poolSetID properties.UUID, poolType string)) *MockServicePoolQuerier_FindByPoolSetAndType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServicePoolQuerier_FindByPoolSetAndType_Call) Return(servicePool *domain.ServicePool, err error) *MockServicePoolQuerier_FindByPoolSetAndType_Call {
	_c.Call.Return(servicePool, err)
	return _c
}

func (_c *MockServicePoolQuerier_FindByPoolSetAndType_Call) RunAndReturn(run func(ctx context.Context, poolSetID properties.UUID, poolType string) (*domain.ServicePool, error)) *MockServicePoolQuerier_FindByPoolSetAndType_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockServicePoolQuerier
func (_mock *MockServicePoolQuerier) Get(ctx context.Context, id properties.UUID) (*domain.ServicePool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.ServicePool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.ServicePool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.ServicePool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolQuerier_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServicePoolQuerier_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolQuerier_Expecter) Get(ctx interface{}, id interface{}) *MockServicePoolQuerier_Get_Call {
	return &MockServicePoolQuerier_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockServicePoolQuerier_Get_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolQuerier_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolQuerier_Get_Call) Return(servicePool *domain.ServicePool, err error) *MockServicePoolQuerier_Get_Call {
	_c.Call.Return(servicePool, err)
	return _c
}

func (_c *MockServicePoolQuerier_Get_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (*domain.ServicePool, error)) *MockServicePoolQuerier_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockServicePoolQuerier
func (_mock *MockServicePoolQuerier) List(ctx context.Context) ([]*domain.ServicePool, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.ServicePool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*domain.ServicePool, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*domain.ServicePool); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServicePool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolQuerier_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServicePoolQuerier_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServicePoolQuerier_Expecter) List(ctx interface{}) *MockServicePoolQuerier_List_Call {
	return &MockServicePoolQuerier_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockServicePoolQuerier_List_Call) Run(run func(ctx context.Context)) *MockServicePoolQuerier_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServicePoolQuerier_List_Call) Return(servicePools []*domain.ServicePool, err error) *MockServicePoolQuerier_List_Call {
	_c.Call.Return(servicePools, err)
	return _c
}

func (_c *MockServicePoolQuerier_List_Call) RunAndReturn(run func(ctx context.Context) ([]*domain.ServicePool, error)) *MockServicePoolQuerier_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByPoolSet provides a mock function for the type MockServicePoolQuerier
func (_mock *MockServicePoolQuerier) ListByPoolSet(ctx context.Context, poolSetID properties.UUID) ([]*domain.ServicePool, error) {
	ret := _mock.Called(ctx, poolSetID)

	if len(ret) == 0 {
		panic("no return value specified for ListByPoolSet")
	}

	var r0 []*domain.ServicePool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) ([]*domain.ServicePool, error)); ok {
		return returnFunc(ctx, poolSetID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) []*domain.ServicePool); ok {
		r0 = returnFunc(ctx, poolSetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServicePool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, poolSetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolQuerier_ListByPoolSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByPoolSet'
type MockServicePoolQuerier_ListByPoolSet_Call struct {
	*mock.Call
}

// ListByPoolSet is a helper method to define mock.On call
//   - ctx context.Context
//   - poolSetID properties.UUID
func (_e *MockServicePoolQuerier_Expecter) ListByPoolSet(ctx interface{}, poolSetID interface{}) *MockServicePoolQuerier_ListByPoolSet_Call {
	return &MockServicePoolQuerier_ListByPoolSet_Call{Call: _e.mock.On("ListByPoolSet", ctx, poolSetID)}
}

func (_c *MockServicePoolQuerier_ListByPoolSet_Call) Run(run func(ctx context.Context, poolSetID properties.UUID)) *MockServicePoolQuerier_ListByPoolSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolQuerier_ListByPoolSet_Call) Return(servicePools []*domain.ServicePool, err error) *MockServicePoolQuerier_ListByPoolSet_Call {
	_c.Call.Return(servicePools, err)
	return _c
}

func (_c *MockServicePoolQuerier_ListByPoolSet_Call) RunAndReturn(run func(ctx context.Context, poolSetID properties.UUID) ([]*domain.ServicePool, error)) *MockServicePoolQuerier_ListByPoolSet_Call {
	_c.Call.Return(run)
	return _c
}
