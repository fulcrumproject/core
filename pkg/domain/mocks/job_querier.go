// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/fulcrumproject/core/pkg/auth"
	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJobQuerier creates a new instance of MockJobQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobQuerier {
	mock := &MockJobQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJobQuerier is an autogenerated mock type for the JobQuerier type
type MockJobQuerier struct {
	mock.Mock
}

type MockJobQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobQuerier) EXPECT() *MockJobQuerier_Expecter {
	return &MockJobQuerier_Expecter{mock: &_m.Mock}
}

// AuthScope provides a mock function for the type MockJobQuerier
func (_mock *MockJobQuerier) AuthScope(ctx context.Context, id properties.UUID) (auth.ObjectScope, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for AuthScope")
	}

	var r0 auth.ObjectScope
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (auth.ObjectScope, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) auth.ObjectScope); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.ObjectScope)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobQuerier_AuthScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthScope'
type MockJobQuerier_AuthScope_Call struct {
	*mock.Call
}

// AuthScope is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockJobQuerier_Expecter) AuthScope(ctx interface{}, id interface{}) *MockJobQuerier_AuthScope_Call {
	return &MockJobQuerier_AuthScope_Call{Call: _e.mock.On("AuthScope", ctx, id)}
}

func (_c *MockJobQuerier_AuthScope_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockJobQuerier_AuthScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobQuerier_AuthScope_Call) Return(objectScope auth.ObjectScope, err error) *MockJobQuerier_AuthScope_Call {
	_c.Call.Return(objectScope, err)
	return _c
}

func (_c *MockJobQuerier_AuthScope_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (auth.ObjectScope, error)) *MockJobQuerier_AuthScope_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function for the type MockJobQuerier
func (_mock *MockJobQuerier) Count(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobQuerier_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockJobQuerier_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockJobQuerier_Expecter) Count(ctx interface{}) *MockJobQuerier_Count_Call {
	return &MockJobQuerier_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockJobQuerier_Count_Call) Run(run func(ctx context.Context)) *MockJobQuerier_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockJobQuerier_Count_Call) Return(n int64, err error) *MockJobQuerier_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockJobQuerier_Count_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockJobQuerier_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockJobQuerier
func (_mock *MockJobQuerier) Exists(ctx context.Context, id properties.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobQuerier_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockJobQuerier_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockJobQuerier_Expecter) Exists(ctx interface{}, id interface{}) *MockJobQuerier_Exists_Call {
	return &MockJobQuerier_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockJobQuerier_Exists_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockJobQuerier_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobQuerier_Exists_Call) Return(b bool, err error) *MockJobQuerier_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockJobQuerier_Exists_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (bool, error)) *MockJobQuerier_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockJobQuerier
func (_mock *MockJobQuerier) Get(ctx context.Context, id properties.UUID) (*domain.Job, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.Job, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.Job); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobQuerier_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockJobQuerier_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockJobQuerier_Expecter) Get(ctx interface{}, id interface{}) *MockJobQuerier_Get_Call {
	return &MockJobQuerier_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockJobQuerier_Get_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockJobQuerier_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobQuerier_Get_Call) Return(job *domain.Job, err error) *MockJobQuerier_Get_Call {
	_c.Call.Return(job, err)
	return _c
}

func (_c *MockJobQuerier_Get_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (*domain.Job, error)) *MockJobQuerier_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastJobForService provides a mock function for the type MockJobQuerier
func (_mock *MockJobQuerier) GetLastJobForService(ctx context.Context, serviceID properties.UUID) (*domain.Job, error) {
	ret := _mock.Called(ctx, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastJobForService")
	}

	var r0 *domain.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.Job, error)); ok {
		return returnFunc(ctx, serviceID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.Job); ok {
		r0 = returnFunc(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobQuerier_GetLastJobForService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastJobForService'
type MockJobQuerier_GetLastJobForService_Call struct {
	*mock.Call
}

// GetLastJobForService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID properties.UUID
func (_e *MockJobQuerier_Expecter) GetLastJobForService(ctx interface{}, serviceID interface{}) *MockJobQuerier_GetLastJobForService_Call {
	return &MockJobQuerier_GetLastJobForService_Call{Call: _e.mock.On("GetLastJobForService", ctx, serviceID)}
}

func (_c *MockJobQuerier_GetLastJobForService_Call) Run(run func(ctx context.Context, serviceID properties.UUID)) *MockJobQuerier_GetLastJobForService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobQuerier_GetLastJobForService_Call) Return(job *domain.Job, err error) *MockJobQuerier_GetLastJobForService_Call {
	_c.Call.Return(job, err)
	return _c
}

func (_c *MockJobQuerier_GetLastJobForService_Call) RunAndReturn(run func(ctx context.Context, serviceID properties.UUID) (*domain.Job, error)) *MockJobQuerier_GetLastJobForService_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingJobsForAgent provides a mock function for the type MockJobQuerier
func (_mock *MockJobQuerier) GetPendingJobsForAgent(ctx context.Context, agentID properties.UUID, limit int) ([]*domain.Job, error) {
	ret := _mock.Called(ctx, agentID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingJobsForAgent")
	}

	var r0 []*domain.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, int) ([]*domain.Job, error)); ok {
		return returnFunc(ctx, agentID, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, int) []*domain.Job); ok {
		r0 = returnFunc(ctx, agentID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID, int) error); ok {
		r1 = returnFunc(ctx, agentID, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobQuerier_GetPendingJobsForAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingJobsForAgent'
type MockJobQuerier_GetPendingJobsForAgent_Call struct {
	*mock.Call
}

// GetPendingJobsForAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - agentID properties.UUID
//   - limit int
func (_e *MockJobQuerier_Expecter) GetPendingJobsForAgent(ctx interface{}, agentID interface{}, limit interface{}) *MockJobQuerier_GetPendingJobsForAgent_Call {
	return &MockJobQuerier_GetPendingJobsForAgent_Call{Call: _e.mock.On("GetPendingJobsForAgent", ctx, agentID, limit)}
}

func (_c *MockJobQuerier_GetPendingJobsForAgent_Call) Run(run func(ctx context.Context, agentID properties.UUID, limit int)) *MockJobQuerier_GetPendingJobsForAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJobQuerier_GetPendingJobsForAgent_Call) Return(jobs []*domain.Job, err error) *MockJobQuerier_GetPendingJobsForAgent_Call {
	_c.Call.Return(jobs, err)
	return _c
}

func (_c *MockJobQuerier_GetPendingJobsForAgent_Call) RunAndReturn(run func(ctx context.Context, agentID properties.UUID, limit int) ([]*domain.Job, error)) *MockJobQuerier_GetPendingJobsForAgent_Call {
	_c.Call.Return(run)
	return _c
}

// GetTimeOutJobs provides a mock function for the type MockJobQuerier
func (_mock *MockJobQuerier) GetTimeOutJobs(ctx context.Context, olderThan time.Duration) ([]*domain.Job, error) {
	ret := _mock.Called(ctx, olderThan)

	if len(ret) == 0 {
		panic("no return value specified for GetTimeOutJobs")
	}

	var r0 []*domain.Job
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration) ([]*domain.Job, error)); ok {
		return returnFunc(ctx, olderThan)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration) []*domain.Job); ok {
		r0 = returnFunc(ctx, olderThan)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Job)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = returnFunc(ctx, olderThan)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobQuerier_GetTimeOutJobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimeOutJobs'
type MockJobQuerier_GetTimeOutJobs_Call struct {
	*mock.Call
}

// GetTimeOutJobs is a helper method to define mock.On call
//   - ctx context.Context
//   - olderThan time.Duration
func (_e *MockJobQuerier_Expecter) GetTimeOutJobs(ctx interface{}, olderThan interface{}) *MockJobQuerier_GetTimeOutJobs_Call {
	return &MockJobQuerier_GetTimeOutJobs_Call{Call: _e.mock.On("GetTimeOutJobs", ctx, olderThan)}
}

func (_c *MockJobQuerier_GetTimeOutJobs_Call) Run(run func(ctx context.Context, olderThan time.Duration)) *MockJobQuerier_GetTimeOutJobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobQuerier_GetTimeOutJobs_Call) Return(jobs []*domain.Job, err error) *MockJobQuerier_GetTimeOutJobs_Call {
	_c.Call.Return(jobs, err)
	return _c
}

func (_c *MockJobQuerier_GetTimeOutJobs_Call) RunAndReturn(run func(ctx context.Context, olderThan time.Duration) ([]*domain.Job, error)) *MockJobQuerier_GetTimeOutJobs_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockJobQuerier
func (_mock *MockJobQuerier) List(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.Job], error) {
	ret := _mock.Called(ctx, scope, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *domain.PageRes[domain.Job]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) (*domain.PageRes[domain.Job], error)); ok {
		return returnFunc(ctx, scope, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) *domain.PageRes[domain.Job]); ok {
		r0 = returnFunc(ctx, scope, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PageRes[domain.Job])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *auth.IdentityScope, *domain.PageReq) error); ok {
		r1 = returnFunc(ctx, scope, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockJobQuerier_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockJobQuerier_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - scope *auth.IdentityScope
//   - req *domain.PageReq
func (_e *MockJobQuerier_Expecter) List(ctx interface{}, scope interface{}, req interface{}) *MockJobQuerier_List_Call {
	return &MockJobQuerier_List_Call{Call: _e.mock.On("List", ctx, scope, req)}
}

func (_c *MockJobQuerier_List_Call) Run(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq)) *MockJobQuerier_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *auth.IdentityScope
		if args[1] != nil {
			arg1 = args[1].(*auth.IdentityScope)
		}
		var arg2 *domain.PageReq
		if args[2] != nil {
			arg2 = args[2].(*domain.PageReq)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockJobQuerier_List_Call) Return(pageRes *domain.PageRes[domain.Job], err error) *MockJobQuerier_List_Call {
	_c.Call.Return(pageRes, err)
	return _c
}

func (_c *MockJobQuerier_List_Call) RunAndReturn(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.Job], error)) *MockJobQuerier_List_Call {
	_c.Call.Return(run)
	return _c
}
