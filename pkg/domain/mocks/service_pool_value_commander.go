// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServicePoolValueCommander creates a new instance of MockServicePoolValueCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicePoolValueCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicePoolValueCommander {
	mock := &MockServicePoolValueCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServicePoolValueCommander is an autogenerated mock type for the ServicePoolValueCommander type
type MockServicePoolValueCommander struct {
	mock.Mock
}

type MockServicePoolValueCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicePoolValueCommander) EXPECT() *MockServicePoolValueCommander_Expecter {
	return &MockServicePoolValueCommander_Expecter{mock: &_m.Mock}
}

// CreateServicePoolValue provides a mock function for the type MockServicePoolValueCommander
func (_mock *MockServicePoolValueCommander) CreateServicePoolValue(ctx context.Context, params domain.CreateServicePoolValueParams) (*domain.ServicePoolValue, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateServicePoolValue")
	}

	var r0 *domain.ServicePoolValue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServicePoolValueParams) (*domain.ServicePoolValue, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServicePoolValueParams) *domain.ServicePoolValue); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePoolValue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CreateServicePoolValueParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolValueCommander_CreateServicePoolValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServicePoolValue'
type MockServicePoolValueCommander_CreateServicePoolValue_Call struct {
	*mock.Call
}

// CreateServicePoolValue is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CreateServicePoolValueParams
func (_e *MockServicePoolValueCommander_Expecter) CreateServicePoolValue(ctx interface{}, params interface{}) *MockServicePoolValueCommander_CreateServicePoolValue_Call {
	return &MockServicePoolValueCommander_CreateServicePoolValue_Call{Call: _e.mock.On("CreateServicePoolValue", ctx, params)}
}

func (_c *MockServicePoolValueCommander_CreateServicePoolValue_Call) Run(run func(ctx context.Context, params domain.CreateServicePoolValueParams)) *MockServicePoolValueCommander_CreateServicePoolValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateServicePoolValueParams
		if args[1] != nil {
			arg1 = args[1].(domain.CreateServicePoolValueParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolValueCommander_CreateServicePoolValue_Call) Return(servicePoolValue *domain.ServicePoolValue, err error) *MockServicePoolValueCommander_CreateServicePoolValue_Call {
	_c.Call.Return(servicePoolValue, err)
	return _c
}

func (_c *MockServicePoolValueCommander_CreateServicePoolValue_Call) RunAndReturn(run func(ctx context.Context, params domain.CreateServicePoolValueParams) (*domain.ServicePoolValue, error)) *MockServicePoolValueCommander_CreateServicePoolValue_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServicePoolValue provides a mock function for the type MockServicePoolValueCommander
func (_mock *MockServicePoolValueCommander) DeleteServicePoolValue(ctx context.Context, id properties.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServicePoolValue")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServicePoolValueCommander_DeleteServicePoolValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServicePoolValue'
type MockServicePoolValueCommander_DeleteServicePoolValue_Call struct {
	*mock.Call
}

// DeleteServicePoolValue is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolValueCommander_Expecter) DeleteServicePoolValue(ctx interface{}, id interface{}) *MockServicePoolValueCommander_DeleteServicePoolValue_Call {
	return &MockServicePoolValueCommander_DeleteServicePoolValue_Call{Call: _e.mock.On("DeleteServicePoolValue", ctx, id)}
}

func (_c *MockServicePoolValueCommander_DeleteServicePoolValue_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolValueCommander_DeleteServicePoolValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolValueCommander_DeleteServicePoolValue_Call) Return(err error) *MockServicePoolValueCommander_DeleteServicePoolValue_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServicePoolValueCommander_DeleteServicePoolValue_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) error) *MockServicePoolValueCommander_DeleteServicePoolValue_Call {
	_c.Call.Return(run)
	return _c
}
