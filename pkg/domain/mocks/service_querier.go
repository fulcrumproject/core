// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/auth"
	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceQuerier creates a new instance of MockServiceQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceQuerier {
	mock := &MockServiceQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceQuerier is an autogenerated mock type for the ServiceQuerier type
type MockServiceQuerier struct {
	mock.Mock
}

type MockServiceQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceQuerier) EXPECT() *MockServiceQuerier_Expecter {
	return &MockServiceQuerier_Expecter{mock: &_m.Mock}
}

// AuthScope provides a mock function for the type MockServiceQuerier
func (_mock *MockServiceQuerier) AuthScope(ctx context.Context, id properties.UUID) (auth.ObjectScope, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for AuthScope")
	}

	var r0 auth.ObjectScope
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (auth.ObjectScope, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) auth.ObjectScope); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.ObjectScope)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceQuerier_AuthScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthScope'
type MockServiceQuerier_AuthScope_Call struct {
	*mock.Call
}

// AuthScope is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceQuerier_Expecter) AuthScope(ctx interface{}, id interface{}) *MockServiceQuerier_AuthScope_Call {
	return &MockServiceQuerier_AuthScope_Call{Call: _e.mock.On("AuthScope", ctx, id)}
}

func (_c *MockServiceQuerier_AuthScope_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceQuerier_AuthScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceQuerier_AuthScope_Call) Return(objectScope auth.ObjectScope, err error) *MockServiceQuerier_AuthScope_Call {
	_c.Call.Return(objectScope, err)
	return _c
}

func (_c *MockServiceQuerier_AuthScope_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (auth.ObjectScope, error)) *MockServiceQuerier_AuthScope_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function for the type MockServiceQuerier
func (_mock *MockServiceQuerier) Count(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceQuerier_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockServiceQuerier_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServiceQuerier_Expecter) Count(ctx interface{}) *MockServiceQuerier_Count_Call {
	return &MockServiceQuerier_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockServiceQuerier_Count_Call) Run(run func(ctx context.Context)) *MockServiceQuerier_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceQuerier_Count_Call) Return(n int64, err error) *MockServiceQuerier_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceQuerier_Count_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockServiceQuerier_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CountByAgent provides a mock function for the type MockServiceQuerier
func (_mock *MockServiceQuerier) CountByAgent(ctx context.Context, agentID properties.UUID) (int64, error) {
	ret := _mock.Called(ctx, agentID)

	if len(ret) == 0 {
		panic("no return value specified for CountByAgent")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (int64, error)); ok {
		return returnFunc(ctx, agentID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) int64); ok {
		r0 = returnFunc(ctx, agentID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, agentID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceQuerier_CountByAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByAgent'
type MockServiceQuerier_CountByAgent_Call struct {
	*mock.Call
}

// CountByAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - agentID properties.UUID
func (_e *MockServiceQuerier_Expecter) CountByAgent(ctx interface{}, agentID interface{}) *MockServiceQuerier_CountByAgent_Call {
	return &MockServiceQuerier_CountByAgent_Call{Call: _e.mock.On("CountByAgent", ctx, agentID)}
}

func (_c *MockServiceQuerier_CountByAgent_Call) Run(run func(ctx context.Context, agentID properties.UUID)) *MockServiceQuerier_CountByAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceQuerier_CountByAgent_Call) Return(n int64, err error) *MockServiceQuerier_CountByAgent_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceQuerier_CountByAgent_Call) RunAndReturn(run func(ctx context.Context, agentID properties.UUID) (int64, error)) *MockServiceQuerier_CountByAgent_Call {
	_c.Call.Return(run)
	return _c
}

// CountByGroup provides a mock function for the type MockServiceQuerier
func (_mock *MockServiceQuerier) CountByGroup(ctx context.Context, groupID properties.UUID) (int64, error) {
	ret := _mock.Called(ctx, groupID)

	if len(ret) == 0 {
		panic("no return value specified for CountByGroup")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (int64, error)); ok {
		return returnFunc(ctx, groupID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) int64); ok {
		r0 = returnFunc(ctx, groupID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceQuerier_CountByGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByGroup'
type MockServiceQuerier_CountByGroup_Call struct {
	*mock.Call
}

// CountByGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupID properties.UUID
func (_e *MockServiceQuerier_Expecter) CountByGroup(ctx interface{}, groupID interface{}) *MockServiceQuerier_CountByGroup_Call {
	return &MockServiceQuerier_CountByGroup_Call{Call: _e.mock.On("CountByGroup", ctx, groupID)}
}

func (_c *MockServiceQuerier_CountByGroup_Call) Run(run func(ctx context.Context, groupID properties.UUID)) *MockServiceQuerier_CountByGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceQuerier_CountByGroup_Call) Return(n int64, err error) *MockServiceQuerier_CountByGroup_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceQuerier_CountByGroup_Call) RunAndReturn(run func(ctx context.Context, groupID properties.UUID) (int64, error)) *MockServiceQuerier_CountByGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CountByServiceType provides a mock function for the type MockServiceQuerier
func (_mock *MockServiceQuerier) CountByServiceType(ctx context.Context, serviceTypeID properties.UUID) (int64, error) {
	ret := _mock.Called(ctx, serviceTypeID)

	if len(ret) == 0 {
		panic("no return value specified for CountByServiceType")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (int64, error)); ok {
		return returnFunc(ctx, serviceTypeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) int64); ok {
		r0 = returnFunc(ctx, serviceTypeID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, serviceTypeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceQuerier_CountByServiceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByServiceType'
type MockServiceQuerier_CountByServiceType_Call struct {
	*mock.Call
}

// CountByServiceType is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceTypeID properties.UUID
func (_e *MockServiceQuerier_Expecter) CountByServiceType(ctx interface{}, serviceTypeID interface{}) *MockServiceQuerier_CountByServiceType_Call {
	return &MockServiceQuerier_CountByServiceType_Call{Call: _e.mock.On("CountByServiceType", ctx, serviceTypeID)}
}

func (_c *MockServiceQuerier_CountByServiceType_Call) Run(run func(ctx context.Context, serviceTypeID properties.UUID)) *MockServiceQuerier_CountByServiceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceQuerier_CountByServiceType_Call) Return(n int64, err error) *MockServiceQuerier_CountByServiceType_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceQuerier_CountByServiceType_Call) RunAndReturn(run func(ctx context.Context, serviceTypeID properties.UUID) (int64, error)) *MockServiceQuerier_CountByServiceType_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockServiceQuerier
func (_mock *MockServiceQuerier) Exists(ctx context.Context, id properties.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceQuerier_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockServiceQuerier_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceQuerier_Expecter) Exists(ctx interface{}, id interface{}) *MockServiceQuerier_Exists_Call {
	return &MockServiceQuerier_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockServiceQuerier_Exists_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceQuerier_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceQuerier_Exists_Call) Return(b bool, err error) *MockServiceQuerier_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockServiceQuerier_Exists_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (bool, error)) *MockServiceQuerier_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindByAgentInstanceID provides a mock function for the type MockServiceQuerier
func (_mock *MockServiceQuerier) FindByAgentInstanceID(ctx context.Context, agentID properties.UUID, agentInstanceID string) (*domain.Service, error) {
	ret := _mock.Called(ctx, agentID, agentInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for FindByAgentInstanceID")
	}

	var r0 *domain.Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, string) (*domain.Service, error)); ok {
		return returnFunc(ctx, agentID, agentInstanceID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, string) *domain.Service); ok {
		r0 = returnFunc(ctx, agentID, agentInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID, string) error); ok {
		r1 = returnFunc(ctx, agentID, agentInstanceID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceQuerier_FindByAgentInstanceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByAgentInstanceID'
type MockServiceQuerier_FindByAgentInstanceID_Call struct {
	*mock.Call
}

// FindByAgentInstanceID is a helper method to define mock.On call
//   - ctx context.Context
//   - agentID properties.UUID
//   - agentInstanceID string
func (_e *MockServiceQuerier_Expecter) FindByAgentInstanceID(ctx interface{}, agentID interface{}, agentInstanceID interface{}) *MockServiceQuerier_FindByAgentInstanceID_Call {
	return &MockServiceQuerier_FindByAgentInstanceID_Call{Call: _e.mock.On("FindByAgentInstanceID", ctx, agentID, agentInstanceID)}
}

func (_c *MockServiceQuerier_FindByAgentInstanceID_Call) Run(run func(ctx context.Context, agentID properties.UUID, agentInstanceID string)) *MockServiceQuerier_FindByAgentInstanceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServiceQuerier_FindByAgentInstanceID_Call) Return(service *domain.Service, err error) *MockServiceQuerier_FindByAgentInstanceID_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockServiceQuerier_FindByAgentInstanceID_Call) RunAndReturn(run func(ctx context.Context, agentID properties.UUID, agentInstanceID string) (*domain.Service, error)) *MockServiceQuerier_FindByAgentInstanceID_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockServiceQuerier
func (_mock *MockServiceQuerier) Get(ctx context.Context, id properties.UUID) (*domain.Service, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.Service, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.Service); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceQuerier_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServiceQuerier_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceQuerier_Expecter) Get(ctx interface{}, id interface{}) *MockServiceQuerier_Get_Call {
	return &MockServiceQuerier_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockServiceQuerier_Get_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceQuerier_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceQuerier_Get_Call) Return(service *domain.Service, err error) *MockServiceQuerier_Get_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockServiceQuerier_Get_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (*domain.Service, error)) *MockServiceQuerier_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockServiceQuerier
func (_mock *MockServiceQuerier) List(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.Service], error) {
	ret := _mock.Called(ctx, scope, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *domain.PageRes[domain.Service]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) (*domain.PageRes[domain.Service], error)); ok {
		return returnFunc(ctx, scope, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) *domain.PageRes[domain.Service]); ok {
		r0 = returnFunc(ctx, scope, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PageRes[domain.Service])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *auth.IdentityScope, *domain.PageReq) error); ok {
		r1 = returnFunc(ctx, scope, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceQuerier_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServiceQuerier_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - scope *auth.IdentityScope
//   - req *domain.PageReq
func (_e *MockServiceQuerier_Expecter) List(ctx interface{}, scope interface{}, req interface{}) *MockServiceQuerier_List_Call {
	return &MockServiceQuerier_List_Call{Call: _e.mock.On("List", ctx, scope, req)}
}

func (_c *MockServiceQuerier_List_Call) Run(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq)) *MockServiceQuerier_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *auth.IdentityScope
		if args[1] != nil {
			arg1 = args[1].(*auth.IdentityScope)
		}
		var arg2 *domain.PageReq
		if args[2] != nil {
			arg2 = args[2].(*domain.PageReq)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServiceQuerier_List_Call) Return(pageRes *domain.PageRes[domain.Service], err error) *MockServiceQuerier_List_Call {
	_c.Call.Return(pageRes, err)
	return _c
}

func (_c *MockServiceQuerier_List_Call) RunAndReturn(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.Service], error)) *MockServiceQuerier_List_Call {
	_c.Call.Return(run)
	return _c
}
