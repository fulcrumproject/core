// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServicePoolCommander creates a new instance of MockServicePoolCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicePoolCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicePoolCommander {
	mock := &MockServicePoolCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServicePoolCommander is an autogenerated mock type for the ServicePoolCommander type
type MockServicePoolCommander struct {
	mock.Mock
}

type MockServicePoolCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicePoolCommander) EXPECT() *MockServicePoolCommander_Expecter {
	return &MockServicePoolCommander_Expecter{mock: &_m.Mock}
}

// CreateServicePool provides a mock function for the type MockServicePoolCommander
func (_mock *MockServicePoolCommander) CreateServicePool(ctx context.Context, params domain.CreateServicePoolParams) (*domain.ServicePool, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateServicePool")
	}

	var r0 *domain.ServicePool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServicePoolParams) (*domain.ServicePool, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServicePoolParams) *domain.ServicePool); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CreateServicePoolParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolCommander_CreateServicePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServicePool'
type MockServicePoolCommander_CreateServicePool_Call struct {
	*mock.Call
}

// CreateServicePool is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CreateServicePoolParams
func (_e *MockServicePoolCommander_Expecter) CreateServicePool(ctx interface{}, params interface{}) *MockServicePoolCommander_CreateServicePool_Call {
	return &MockServicePoolCommander_CreateServicePool_Call{Call: _e.mock.On("CreateServicePool", ctx, params)}
}

func (_c *MockServicePoolCommander_CreateServicePool_Call) Run(run func(ctx context.Context, params domain.CreateServicePoolParams)) *MockServicePoolCommander_CreateServicePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateServicePoolParams
		if args[1] != nil {
			arg1 = args[1].(domain.CreateServicePoolParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolCommander_CreateServicePool_Call) Return(servicePool *domain.ServicePool, err error) *MockServicePoolCommander_CreateServicePool_Call {
	_c.Call.Return(servicePool, err)
	return _c
}

func (_c *MockServicePoolCommander_CreateServicePool_Call) RunAndReturn(run func(ctx context.Context, params domain.CreateServicePoolParams) (*domain.ServicePool, error)) *MockServicePoolCommander_CreateServicePool_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServicePool provides a mock function for the type MockServicePoolCommander
func (_mock *MockServicePoolCommander) DeleteServicePool(ctx context.Context, id properties.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServicePool")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServicePoolCommander_DeleteServicePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServicePool'
type MockServicePoolCommander_DeleteServicePool_Call struct {
	*mock.Call
}

// DeleteServicePool is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolCommander_Expecter) DeleteServicePool(ctx interface{}, id interface{}) *MockServicePoolCommander_DeleteServicePool_Call {
	return &MockServicePoolCommander_DeleteServicePool_Call{Call: _e.mock.On("DeleteServicePool", ctx, id)}
}

func (_c *MockServicePoolCommander_DeleteServicePool_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolCommander_DeleteServicePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolCommander_DeleteServicePool_Call) Return(err error) *MockServicePoolCommander_DeleteServicePool_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServicePoolCommander_DeleteServicePool_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) error) *MockServicePoolCommander_DeleteServicePool_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServicePool provides a mock function for the type MockServicePoolCommander
func (_mock *MockServicePoolCommander) UpdateServicePool(ctx context.Context, id properties.UUID, params domain.UpdateServicePoolParams) (*domain.ServicePool, error) {
	ret := _mock.Called(ctx, id, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServicePool")
	}

	var r0 *domain.ServicePool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, domain.UpdateServicePoolParams) (*domain.ServicePool, error)); ok {
		return returnFunc(ctx, id, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, domain.UpdateServicePoolParams) *domain.ServicePool); ok {
		r0 = returnFunc(ctx, id, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID, domain.UpdateServicePoolParams) error); ok {
		r1 = returnFunc(ctx, id, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolCommander_UpdateServicePool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServicePool'
type MockServicePoolCommander_UpdateServicePool_Call struct {
	*mock.Call
}

// UpdateServicePool is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
//   - params domain.UpdateServicePoolParams
func (_e *MockServicePoolCommander_Expecter) UpdateServicePool(ctx interface{}, id interface{}, params interface{}) *MockServicePoolCommander_UpdateServicePool_Call {
	return &MockServicePoolCommander_UpdateServicePool_Call{Call: _e.mock.On("UpdateServicePool", ctx, id, params)}
}

func (_c *MockServicePoolCommander_UpdateServicePool_Call) Run(run func(ctx context.Context, id properties.UUID, params domain.UpdateServicePoolParams)) *MockServicePoolCommander_UpdateServicePool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		var arg2 domain.UpdateServicePoolParams
		if args[2] != nil {
			arg2 = args[2].(domain.UpdateServicePoolParams)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServicePoolCommander_UpdateServicePool_Call) Return(servicePool *domain.ServicePool, err error) *MockServicePoolCommander_UpdateServicePool_Call {
	_c.Call.Return(servicePool, err)
	return _c
}

func (_c *MockServicePoolCommander_UpdateServicePool_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID, params domain.UpdateServicePoolParams) (*domain.ServicePool, error)) *MockServicePoolCommander_UpdateServicePool_Call {
	_c.Call.Return(run)
	return _c
}
