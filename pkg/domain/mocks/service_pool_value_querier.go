// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServicePoolValueQuerier creates a new instance of MockServicePoolValueQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicePoolValueQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicePoolValueQuerier {
	mock := &MockServicePoolValueQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServicePoolValueQuerier is an autogenerated mock type for the ServicePoolValueQuerier type
type MockServicePoolValueQuerier struct {
	mock.Mock
}

type MockServicePoolValueQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicePoolValueQuerier) EXPECT() *MockServicePoolValueQuerier_Expecter {
	return &MockServicePoolValueQuerier_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function for the type MockServicePoolValueQuerier
func (_mock *MockServicePoolValueQuerier) Exists(ctx context.Context, id properties.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolValueQuerier_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockServicePoolValueQuerier_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolValueQuerier_Expecter) Exists(ctx interface{}, id interface{}) *MockServicePoolValueQuerier_Exists_Call {
	return &MockServicePoolValueQuerier_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockServicePoolValueQuerier_Exists_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolValueQuerier_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolValueQuerier_Exists_Call) Return(b bool, err error) *MockServicePoolValueQuerier_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockServicePoolValueQuerier_Exists_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (bool, error)) *MockServicePoolValueQuerier_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindAvailable provides a mock function for the type MockServicePoolValueQuerier
func (_mock *MockServicePoolValueQuerier) FindAvailable(ctx context.Context, poolID properties.UUID) (*domain.ServicePoolValue, error) {
	ret := _mock.Called(ctx, poolID)

	if len(ret) == 0 {
		panic("no return value specified for FindAvailable")
	}

	var r0 *domain.ServicePoolValue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.ServicePoolValue, error)); ok {
		return returnFunc(ctx, poolID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.ServicePoolValue); ok {
		r0 = returnFunc(ctx, poolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePoolValue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, poolID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolValueQuerier_FindAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAvailable'
type MockServicePoolValueQuerier_FindAvailable_Call struct {
	*mock.Call
}

// FindAvailable is a helper method to define mock.On call
//   - ctx context.Context
//   - poolID properties.UUID
func (_e *MockServicePoolValueQuerier_Expecter) FindAvailable(ctx interface{}, poolID interface{}) *MockServicePoolValueQuerier_FindAvailable_Call {
	return &MockServicePoolValueQuerier_FindAvailable_Call{Call: _e.mock.On("FindAvailable", ctx, poolID)}
}

func (_c *MockServicePoolValueQuerier_FindAvailable_Call) Run(run func(ctx context.Context, poolID properties.UUID)) *MockServicePoolValueQuerier_FindAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolValueQuerier_FindAvailable_Call) Return(servicePoolValue *domain.ServicePoolValue, err error) *MockServicePoolValueQuerier_FindAvailable_Call {
	_c.Call.Return(servicePoolValue, err)
	return _c
}

func (_c *MockServicePoolValueQuerier_FindAvailable_Call) RunAndReturn(run func(ctx context.Context, poolID properties.UUID) (*domain.ServicePoolValue, error)) *MockServicePoolValueQuerier_FindAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockServicePoolValueQuerier
func (_mock *MockServicePoolValueQuerier) Get(ctx context.Context, id properties.UUID) (*domain.ServicePoolValue, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.ServicePoolValue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.ServicePoolValue, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.ServicePoolValue); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePoolValue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolValueQuerier_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServicePoolValueQuerier_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolValueQuerier_Expecter) Get(ctx interface{}, id interface{}) *MockServicePoolValueQuerier_Get_Call {
	return &MockServicePoolValueQuerier_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockServicePoolValueQuerier_Get_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolValueQuerier_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolValueQuerier_Get_Call) Return(servicePoolValue *domain.ServicePoolValue, err error) *MockServicePoolValueQuerier_Get_Call {
	_c.Call.Return(servicePoolValue, err)
	return _c
}

func (_c *MockServicePoolValueQuerier_Get_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (*domain.ServicePoolValue, error)) *MockServicePoolValueQuerier_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockServicePoolValueQuerier
func (_mock *MockServicePoolValueQuerier) List(ctx context.Context) ([]*domain.ServicePoolValue, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.ServicePoolValue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*domain.ServicePoolValue, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*domain.ServicePoolValue); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServicePoolValue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolValueQuerier_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServicePoolValueQuerier_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServicePoolValueQuerier_Expecter) List(ctx interface{}) *MockServicePoolValueQuerier_List_Call {
	return &MockServicePoolValueQuerier_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockServicePoolValueQuerier_List_Call) Run(run func(ctx context.Context)) *MockServicePoolValueQuerier_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServicePoolValueQuerier_List_Call) Return(servicePoolValues []*domain.ServicePoolValue, err error) *MockServicePoolValueQuerier_List_Call {
	_c.Call.Return(servicePoolValues, err)
	return _c
}

func (_c *MockServicePoolValueQuerier_List_Call) RunAndReturn(run func(ctx context.Context) ([]*domain.ServicePoolValue, error)) *MockServicePoolValueQuerier_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByPool provides a mock function for the type MockServicePoolValueQuerier
func (_mock *MockServicePoolValueQuerier) ListByPool(ctx context.Context, poolID properties.UUID) ([]*domain.ServicePoolValue, error) {
	ret := _mock.Called(ctx, poolID)

	if len(ret) == 0 {
		panic("no return value specified for ListByPool")
	}

	var r0 []*domain.ServicePoolValue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) ([]*domain.ServicePoolValue, error)); ok {
		return returnFunc(ctx, poolID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) []*domain.ServicePoolValue); ok {
		r0 = returnFunc(ctx, poolID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServicePoolValue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, poolID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolValueQuerier_ListByPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByPool'
type MockServicePoolValueQuerier_ListByPool_Call struct {
	*mock.Call
}

// ListByPool is a helper method to define mock.On call
//   - ctx context.Context
//   - poolID properties.UUID
func (_e *MockServicePoolValueQuerier_Expecter) ListByPool(ctx interface{}, poolID interface{}) *MockServicePoolValueQuerier_ListByPool_Call {
	return &MockServicePoolValueQuerier_ListByPool_Call{Call: _e.mock.On("ListByPool", ctx, poolID)}
}

func (_c *MockServicePoolValueQuerier_ListByPool_Call) Run(run func(ctx context.Context, poolID properties.UUID)) *MockServicePoolValueQuerier_ListByPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolValueQuerier_ListByPool_Call) Return(servicePoolValues []*domain.ServicePoolValue, err error) *MockServicePoolValueQuerier_ListByPool_Call {
	_c.Call.Return(servicePoolValues, err)
	return _c
}

func (_c *MockServicePoolValueQuerier_ListByPool_Call) RunAndReturn(run func(ctx context.Context, poolID properties.UUID) ([]*domain.ServicePoolValue, error)) *MockServicePoolValueQuerier_ListByPool_Call {
	_c.Call.Return(run)
	return _c
}

// ListByService provides a mock function for the type MockServicePoolValueQuerier
func (_mock *MockServicePoolValueQuerier) ListByService(ctx context.Context, serviceID properties.UUID) ([]*domain.ServicePoolValue, error) {
	ret := _mock.Called(ctx, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for ListByService")
	}

	var r0 []*domain.ServicePoolValue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) ([]*domain.ServicePoolValue, error)); ok {
		return returnFunc(ctx, serviceID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) []*domain.ServicePoolValue); ok {
		r0 = returnFunc(ctx, serviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServicePoolValue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolValueQuerier_ListByService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByService'
type MockServicePoolValueQuerier_ListByService_Call struct {
	*mock.Call
}

// ListByService is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID properties.UUID
func (_e *MockServicePoolValueQuerier_Expecter) ListByService(ctx interface{}, serviceID interface{}) *MockServicePoolValueQuerier_ListByService_Call {
	return &MockServicePoolValueQuerier_ListByService_Call{Call: _e.mock.On("ListByService", ctx, serviceID)}
}

func (_c *MockServicePoolValueQuerier_ListByService_Call) Run(run func(ctx context.Context, serviceID properties.UUID)) *MockServicePoolValueQuerier_ListByService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolValueQuerier_ListByService_Call) Return(servicePoolValues []*domain.ServicePoolValue, err error) *MockServicePoolValueQuerier_ListByService_Call {
	_c.Call.Return(servicePoolValues, err)
	return _c
}

func (_c *MockServicePoolValueQuerier_ListByService_Call) RunAndReturn(run func(ctx context.Context, serviceID properties.UUID) ([]*domain.ServicePoolValue, error)) *MockServicePoolValueQuerier_ListByService_Call {
	_c.Call.Return(run)
	return _c
}
