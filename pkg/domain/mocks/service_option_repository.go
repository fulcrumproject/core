// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/auth"
	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceOptionRepository creates a new instance of MockServiceOptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceOptionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceOptionRepository {
	mock := &MockServiceOptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceOptionRepository is an autogenerated mock type for the ServiceOptionRepository type
type MockServiceOptionRepository struct {
	mock.Mock
}

type MockServiceOptionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceOptionRepository) EXPECT() *MockServiceOptionRepository_Expecter {
	return &MockServiceOptionRepository_Expecter{mock: &_m.Mock}
}

// AuthScope provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) AuthScope(ctx context.Context, id properties.UUID) (auth.ObjectScope, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for AuthScope")
	}

	var r0 auth.ObjectScope
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (auth.ObjectScope, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) auth.ObjectScope); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.ObjectScope)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionRepository_AuthScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthScope'
type MockServiceOptionRepository_AuthScope_Call struct {
	*mock.Call
}

// AuthScope is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceOptionRepository_Expecter) AuthScope(ctx interface{}, id interface{}) *MockServiceOptionRepository_AuthScope_Call {
	return &MockServiceOptionRepository_AuthScope_Call{Call: _e.mock.On("AuthScope", ctx, id)}
}

func (_c *MockServiceOptionRepository_AuthScope_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceOptionRepository_AuthScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_AuthScope_Call) Return(objectScope auth.ObjectScope, err error) *MockServiceOptionRepository_AuthScope_Call {
	_c.Call.Return(objectScope, err)
	return _c
}

func (_c *MockServiceOptionRepository_AuthScope_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (auth.ObjectScope, error)) *MockServiceOptionRepository_AuthScope_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) Count(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockServiceOptionRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServiceOptionRepository_Expecter) Count(ctx interface{}) *MockServiceOptionRepository_Count_Call {
	return &MockServiceOptionRepository_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockServiceOptionRepository_Count_Call) Run(run func(ctx context.Context)) *MockServiceOptionRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_Count_Call) Return(n int64, err error) *MockServiceOptionRepository_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceOptionRepository_Count_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockServiceOptionRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CountByServiceOptionType provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) CountByServiceOptionType(ctx context.Context, typeID properties.UUID) (int64, error) {
	ret := _mock.Called(ctx, typeID)

	if len(ret) == 0 {
		panic("no return value specified for CountByServiceOptionType")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (int64, error)); ok {
		return returnFunc(ctx, typeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) int64); ok {
		r0 = returnFunc(ctx, typeID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, typeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionRepository_CountByServiceOptionType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByServiceOptionType'
type MockServiceOptionRepository_CountByServiceOptionType_Call struct {
	*mock.Call
}

// CountByServiceOptionType is a helper method to define mock.On call
//   - ctx context.Context
//   - typeID properties.UUID
func (_e *MockServiceOptionRepository_Expecter) CountByServiceOptionType(ctx interface{}, typeID interface{}) *MockServiceOptionRepository_CountByServiceOptionType_Call {
	return &MockServiceOptionRepository_CountByServiceOptionType_Call{Call: _e.mock.On("CountByServiceOptionType", ctx, typeID)}
}

func (_c *MockServiceOptionRepository_CountByServiceOptionType_Call) Run(run func(ctx context.Context, typeID properties.UUID)) *MockServiceOptionRepository_CountByServiceOptionType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_CountByServiceOptionType_Call) Return(n int64, err error) *MockServiceOptionRepository_CountByServiceOptionType_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceOptionRepository_CountByServiceOptionType_Call) RunAndReturn(run func(ctx context.Context, typeID properties.UUID) (int64, error)) *MockServiceOptionRepository_CountByServiceOptionType_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) Create(ctx context.Context, entity *domain.ServiceOption) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.ServiceOption) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServiceOptionRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServiceOptionRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *domain.ServiceOption
func (_e *MockServiceOptionRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockServiceOptionRepository_Create_Call {
	return &MockServiceOptionRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockServiceOptionRepository_Create_Call) Run(run func(ctx context.Context, entity *domain.ServiceOption)) *MockServiceOptionRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.ServiceOption
		if args[1] != nil {
			arg1 = args[1].(*domain.ServiceOption)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_Create_Call) Return(err error) *MockServiceOptionRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServiceOptionRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entity *domain.ServiceOption) error) *MockServiceOptionRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) Delete(ctx context.Context, id properties.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServiceOptionRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockServiceOptionRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceOptionRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockServiceOptionRepository_Delete_Call {
	return &MockServiceOptionRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockServiceOptionRepository_Delete_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceOptionRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_Delete_Call) Return(err error) *MockServiceOptionRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServiceOptionRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) error) *MockServiceOptionRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) Exists(ctx context.Context, id properties.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockServiceOptionRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceOptionRepository_Expecter) Exists(ctx interface{}, id interface{}) *MockServiceOptionRepository_Exists_Call {
	return &MockServiceOptionRepository_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockServiceOptionRepository_Exists_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceOptionRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_Exists_Call) Return(b bool, err error) *MockServiceOptionRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockServiceOptionRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (bool, error)) *MockServiceOptionRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindByProviderAndTypeAndValue provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) FindByProviderAndTypeAndValue(ctx context.Context, providerID properties.UUID, typeID properties.UUID, value any) (*domain.ServiceOption, error) {
	ret := _mock.Called(ctx, providerID, typeID, value)

	if len(ret) == 0 {
		panic("no return value specified for FindByProviderAndTypeAndValue")
	}

	var r0 *domain.ServiceOption
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, properties.UUID, any) (*domain.ServiceOption, error)); ok {
		return returnFunc(ctx, providerID, typeID, value)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, properties.UUID, any) *domain.ServiceOption); ok {
		r0 = returnFunc(ctx, providerID, typeID, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceOption)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID, properties.UUID, any) error); ok {
		r1 = returnFunc(ctx, providerID, typeID, value)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionRepository_FindByProviderAndTypeAndValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByProviderAndTypeAndValue'
type MockServiceOptionRepository_FindByProviderAndTypeAndValue_Call struct {
	*mock.Call
}

// FindByProviderAndTypeAndValue is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID properties.UUID
//   - typeID properties.UUID
//   - value any
func (_e *MockServiceOptionRepository_Expecter) FindByProviderAndTypeAndValue(ctx interface{}, providerID interface{}, typeID interface{}, value interface{}) *MockServiceOptionRepository_FindByProviderAndTypeAndValue_Call {
	return &MockServiceOptionRepository_FindByProviderAndTypeAndValue_Call{Call: _e.mock.On("FindByProviderAndTypeAndValue", ctx, providerID, typeID, value)}
}

func (_c *MockServiceOptionRepository_FindByProviderAndTypeAndValue_Call) Run(run func(ctx context.Context, providerID properties.UUID, typeID properties.UUID, value any)) *MockServiceOptionRepository_FindByProviderAndTypeAndValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		var arg2 properties.UUID
		if args[2] != nil {
			arg2 = args[2].(properties.UUID)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_FindByProviderAndTypeAndValue_Call) Return(serviceOption *domain.ServiceOption, err error) *MockServiceOptionRepository_FindByProviderAndTypeAndValue_Call {
	_c.Call.Return(serviceOption, err)
	return _c
}

func (_c *MockServiceOptionRepository_FindByProviderAndTypeAndValue_Call) RunAndReturn(run func(ctx context.Context, providerID properties.UUID, typeID properties.UUID, value any) (*domain.ServiceOption, error)) *MockServiceOptionRepository_FindByProviderAndTypeAndValue_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) Get(ctx context.Context, id properties.UUID) (*domain.ServiceOption, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.ServiceOption
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.ServiceOption, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.ServiceOption); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceOption)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServiceOptionRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceOptionRepository_Expecter) Get(ctx interface{}, id interface{}) *MockServiceOptionRepository_Get_Call {
	return &MockServiceOptionRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockServiceOptionRepository_Get_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceOptionRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_Get_Call) Return(serviceOption *domain.ServiceOption, err error) *MockServiceOptionRepository_Get_Call {
	_c.Call.Return(serviceOption, err)
	return _c
}

func (_c *MockServiceOptionRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (*domain.ServiceOption, error)) *MockServiceOptionRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) List(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.ServiceOption], error) {
	ret := _mock.Called(ctx, scope, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *domain.PageRes[domain.ServiceOption]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) (*domain.PageRes[domain.ServiceOption], error)); ok {
		return returnFunc(ctx, scope, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) *domain.PageRes[domain.ServiceOption]); ok {
		r0 = returnFunc(ctx, scope, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PageRes[domain.ServiceOption])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *auth.IdentityScope, *domain.PageReq) error); ok {
		r1 = returnFunc(ctx, scope, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServiceOptionRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - scope *auth.IdentityScope
//   - req *domain.PageReq
func (_e *MockServiceOptionRepository_Expecter) List(ctx interface{}, scope interface{}, req interface{}) *MockServiceOptionRepository_List_Call {
	return &MockServiceOptionRepository_List_Call{Call: _e.mock.On("List", ctx, scope, req)}
}

func (_c *MockServiceOptionRepository_List_Call) Run(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq)) *MockServiceOptionRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *auth.IdentityScope
		if args[1] != nil {
			arg1 = args[1].(*auth.IdentityScope)
		}
		var arg2 *domain.PageReq
		if args[2] != nil {
			arg2 = args[2].(*domain.PageReq)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_List_Call) Return(pageRes *domain.PageRes[domain.ServiceOption], err error) *MockServiceOptionRepository_List_Call {
	_c.Call.Return(pageRes, err)
	return _c
}

func (_c *MockServiceOptionRepository_List_Call) RunAndReturn(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.ServiceOption], error)) *MockServiceOptionRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProvider provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) ListByProvider(ctx context.Context, providerID properties.UUID) ([]*domain.ServiceOption, error) {
	ret := _mock.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProvider")
	}

	var r0 []*domain.ServiceOption
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) ([]*domain.ServiceOption, error)); ok {
		return returnFunc(ctx, providerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) []*domain.ServiceOption); ok {
		r0 = returnFunc(ctx, providerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServiceOption)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionRepository_ListByProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProvider'
type MockServiceOptionRepository_ListByProvider_Call struct {
	*mock.Call
}

// ListByProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID properties.UUID
func (_e *MockServiceOptionRepository_Expecter) ListByProvider(ctx interface{}, providerID interface{}) *MockServiceOptionRepository_ListByProvider_Call {
	return &MockServiceOptionRepository_ListByProvider_Call{Call: _e.mock.On("ListByProvider", ctx, providerID)}
}

func (_c *MockServiceOptionRepository_ListByProvider_Call) Run(run func(ctx context.Context, providerID properties.UUID)) *MockServiceOptionRepository_ListByProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_ListByProvider_Call) Return(serviceOptions []*domain.ServiceOption, err error) *MockServiceOptionRepository_ListByProvider_Call {
	_c.Call.Return(serviceOptions, err)
	return _c
}

func (_c *MockServiceOptionRepository_ListByProvider_Call) RunAndReturn(run func(ctx context.Context, providerID properties.UUID) ([]*domain.ServiceOption, error)) *MockServiceOptionRepository_ListByProvider_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProviderAndType provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) ListByProviderAndType(ctx context.Context, providerID properties.UUID, typeID properties.UUID) ([]*domain.ServiceOption, error) {
	ret := _mock.Called(ctx, providerID, typeID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProviderAndType")
	}

	var r0 []*domain.ServiceOption
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, properties.UUID) ([]*domain.ServiceOption, error)); ok {
		return returnFunc(ctx, providerID, typeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, properties.UUID) []*domain.ServiceOption); ok {
		r0 = returnFunc(ctx, providerID, typeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServiceOption)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID, properties.UUID) error); ok {
		r1 = returnFunc(ctx, providerID, typeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionRepository_ListByProviderAndType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProviderAndType'
type MockServiceOptionRepository_ListByProviderAndType_Call struct {
	*mock.Call
}

// ListByProviderAndType is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID properties.UUID
//   - typeID properties.UUID
func (_e *MockServiceOptionRepository_Expecter) ListByProviderAndType(ctx interface{}, providerID interface{}, typeID interface{}) *MockServiceOptionRepository_ListByProviderAndType_Call {
	return &MockServiceOptionRepository_ListByProviderAndType_Call{Call: _e.mock.On("ListByProviderAndType", ctx, providerID, typeID)}
}

func (_c *MockServiceOptionRepository_ListByProviderAndType_Call) Run(run func(ctx context.Context, providerID properties.UUID, typeID properties.UUID)) *MockServiceOptionRepository_ListByProviderAndType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		var arg2 properties.UUID
		if args[2] != nil {
			arg2 = args[2].(properties.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_ListByProviderAndType_Call) Return(serviceOptions []*domain.ServiceOption, err error) *MockServiceOptionRepository_ListByProviderAndType_Call {
	_c.Call.Return(serviceOptions, err)
	return _c
}

func (_c *MockServiceOptionRepository_ListByProviderAndType_Call) RunAndReturn(run func(ctx context.Context, providerID properties.UUID, typeID properties.UUID) ([]*domain.ServiceOption, error)) *MockServiceOptionRepository_ListByProviderAndType_Call {
	_c.Call.Return(run)
	return _c
}

// ListEnabledByProviderAndType provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) ListEnabledByProviderAndType(ctx context.Context, providerID properties.UUID, typeID properties.UUID) ([]*domain.ServiceOption, error) {
	ret := _mock.Called(ctx, providerID, typeID)

	if len(ret) == 0 {
		panic("no return value specified for ListEnabledByProviderAndType")
	}

	var r0 []*domain.ServiceOption
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, properties.UUID) ([]*domain.ServiceOption, error)); ok {
		return returnFunc(ctx, providerID, typeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, properties.UUID) []*domain.ServiceOption); ok {
		r0 = returnFunc(ctx, providerID, typeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServiceOption)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID, properties.UUID) error); ok {
		r1 = returnFunc(ctx, providerID, typeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionRepository_ListEnabledByProviderAndType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEnabledByProviderAndType'
type MockServiceOptionRepository_ListEnabledByProviderAndType_Call struct {
	*mock.Call
}

// ListEnabledByProviderAndType is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID properties.UUID
//   - typeID properties.UUID
func (_e *MockServiceOptionRepository_Expecter) ListEnabledByProviderAndType(ctx interface{}, providerID interface{}, typeID interface{}) *MockServiceOptionRepository_ListEnabledByProviderAndType_Call {
	return &MockServiceOptionRepository_ListEnabledByProviderAndType_Call{Call: _e.mock.On("ListEnabledByProviderAndType", ctx, providerID, typeID)}
}

func (_c *MockServiceOptionRepository_ListEnabledByProviderAndType_Call) Run(run func(ctx context.Context, providerID properties.UUID, typeID properties.UUID)) *MockServiceOptionRepository_ListEnabledByProviderAndType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		var arg2 properties.UUID
		if args[2] != nil {
			arg2 = args[2].(properties.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_ListEnabledByProviderAndType_Call) Return(serviceOptions []*domain.ServiceOption, err error) *MockServiceOptionRepository_ListEnabledByProviderAndType_Call {
	_c.Call.Return(serviceOptions, err)
	return _c
}

func (_c *MockServiceOptionRepository_ListEnabledByProviderAndType_Call) RunAndReturn(run func(ctx context.Context, providerID properties.UUID, typeID properties.UUID) ([]*domain.ServiceOption, error)) *MockServiceOptionRepository_ListEnabledByProviderAndType_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockServiceOptionRepository
func (_mock *MockServiceOptionRepository) Save(ctx context.Context, entity *domain.ServiceOption) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.ServiceOption) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServiceOptionRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockServiceOptionRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *domain.ServiceOption
func (_e *MockServiceOptionRepository_Expecter) Save(ctx interface{}, entity interface{}) *MockServiceOptionRepository_Save_Call {
	return &MockServiceOptionRepository_Save_Call{Call: _e.mock.On("Save", ctx, entity)}
}

func (_c *MockServiceOptionRepository_Save_Call) Run(run func(ctx context.Context, entity *domain.ServiceOption)) *MockServiceOptionRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.ServiceOption
		if args[1] != nil {
			arg1 = args[1].(*domain.ServiceOption)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionRepository_Save_Call) Return(err error) *MockServiceOptionRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServiceOptionRepository_Save_Call) RunAndReturn(run func(ctx context.Context, entity *domain.ServiceOption) error) *MockServiceOptionRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
