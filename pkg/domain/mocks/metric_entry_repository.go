// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/fulcrumproject/core/pkg/auth"
	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMetricEntryRepository creates a new instance of MockMetricEntryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricEntryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricEntryRepository {
	mock := &MockMetricEntryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricEntryRepository is an autogenerated mock type for the MetricEntryRepository type
type MockMetricEntryRepository struct {
	mock.Mock
}

type MockMetricEntryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricEntryRepository) EXPECT() *MockMetricEntryRepository_Expecter {
	return &MockMetricEntryRepository_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function for the type MockMetricEntryRepository
func (_mock *MockMetricEntryRepository) Aggregate(ctx context.Context, aggregateType domain.AggregateType, serviceID properties.UUID, typeID properties.UUID, start time.Time, end time.Time) (float64, error) {
	ret := _mock.Called(ctx, aggregateType, serviceID, typeID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AggregateType, properties.UUID, properties.UUID, time.Time, time.Time) (float64, error)); ok {
		return returnFunc(ctx, aggregateType, serviceID, typeID, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.AggregateType, properties.UUID, properties.UUID, time.Time, time.Time) float64); ok {
		r0 = returnFunc(ctx, aggregateType, serviceID, typeID, start, end)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.AggregateType, properties.UUID, properties.UUID, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, aggregateType, serviceID, typeID, start, end)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricEntryRepository_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockMetricEntryRepository_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - aggregateType domain.AggregateType
//   - serviceID properties.UUID
//   - typeID properties.UUID
//   - start time.Time
//   - end time.Time
func (_e *MockMetricEntryRepository_Expecter) Aggregate(ctx interface{}, aggregateType interface{}, serviceID interface{}, typeID interface{}, start interface{}, end interface{}) *MockMetricEntryRepository_Aggregate_Call {
	return &MockMetricEntryRepository_Aggregate_Call{Call: _e.mock.On("Aggregate", ctx, aggregateType, serviceID, typeID, start, end)}
}

func (_c *MockMetricEntryRepository_Aggregate_Call) Run(run func(ctx context.Context, aggregateType domain.AggregateType, serviceID properties.UUID, typeID properties.UUID, start time.Time, end time.Time)) *MockMetricEntryRepository_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.AggregateType
		if args[1] != nil {
			arg1 = args[1].(domain.AggregateType)
		}
		var arg2 properties.UUID
		if args[2] != nil {
			arg2 = args[2].(properties.UUID)
		}
		var arg3 properties.UUID
		if args[3] != nil {
			arg3 = args[3].(properties.UUID)
		}
		var arg4 time.Time
		if args[4] != nil {
			arg4 = args[4].(time.Time)
		}
		var arg5 time.Time
		if args[5] != nil {
			arg5 = args[5].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockMetricEntryRepository_Aggregate_Call) Return(f float64, err error) *MockMetricEntryRepository_Aggregate_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockMetricEntryRepository_Aggregate_Call) RunAndReturn(run func(ctx context.Context, aggregateType domain.AggregateType, serviceID properties.UUID, typeID properties.UUID, start time.Time, end time.Time) (float64, error)) *MockMetricEntryRepository_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// AuthScope provides a mock function for the type MockMetricEntryRepository
func (_mock *MockMetricEntryRepository) AuthScope(ctx context.Context, id properties.UUID) (auth.ObjectScope, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for AuthScope")
	}

	var r0 auth.ObjectScope
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (auth.ObjectScope, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) auth.ObjectScope); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.ObjectScope)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricEntryRepository_AuthScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthScope'
type MockMetricEntryRepository_AuthScope_Call struct {
	*mock.Call
}

// AuthScope is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockMetricEntryRepository_Expecter) AuthScope(ctx interface{}, id interface{}) *MockMetricEntryRepository_AuthScope_Call {
	return &MockMetricEntryRepository_AuthScope_Call{Call: _e.mock.On("AuthScope", ctx, id)}
}

func (_c *MockMetricEntryRepository_AuthScope_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockMetricEntryRepository_AuthScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricEntryRepository_AuthScope_Call) Return(objectScope auth.ObjectScope, err error) *MockMetricEntryRepository_AuthScope_Call {
	_c.Call.Return(objectScope, err)
	return _c
}

func (_c *MockMetricEntryRepository_AuthScope_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (auth.ObjectScope, error)) *MockMetricEntryRepository_AuthScope_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function for the type MockMetricEntryRepository
func (_mock *MockMetricEntryRepository) Count(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricEntryRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockMetricEntryRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricEntryRepository_Expecter) Count(ctx interface{}) *MockMetricEntryRepository_Count_Call {
	return &MockMetricEntryRepository_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockMetricEntryRepository_Count_Call) Run(run func(ctx context.Context)) *MockMetricEntryRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricEntryRepository_Count_Call) Return(n int64, err error) *MockMetricEntryRepository_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockMetricEntryRepository_Count_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockMetricEntryRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// CountByMetricType provides a mock function for the type MockMetricEntryRepository
func (_mock *MockMetricEntryRepository) CountByMetricType(ctx context.Context, typeID properties.UUID) (int64, error) {
	ret := _mock.Called(ctx, typeID)

	if len(ret) == 0 {
		panic("no return value specified for CountByMetricType")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (int64, error)); ok {
		return returnFunc(ctx, typeID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) int64); ok {
		r0 = returnFunc(ctx, typeID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, typeID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricEntryRepository_CountByMetricType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByMetricType'
type MockMetricEntryRepository_CountByMetricType_Call struct {
	*mock.Call
}

// CountByMetricType is a helper method to define mock.On call
//   - ctx context.Context
//   - typeID properties.UUID
func (_e *MockMetricEntryRepository_Expecter) CountByMetricType(ctx interface{}, typeID interface{}) *MockMetricEntryRepository_CountByMetricType_Call {
	return &MockMetricEntryRepository_CountByMetricType_Call{Call: _e.mock.On("CountByMetricType", ctx, typeID)}
}

func (_c *MockMetricEntryRepository_CountByMetricType_Call) Run(run func(ctx context.Context, typeID properties.UUID)) *MockMetricEntryRepository_CountByMetricType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricEntryRepository_CountByMetricType_Call) Return(n int64, err error) *MockMetricEntryRepository_CountByMetricType_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockMetricEntryRepository_CountByMetricType_Call) RunAndReturn(run func(ctx context.Context, typeID properties.UUID) (int64, error)) *MockMetricEntryRepository_CountByMetricType_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockMetricEntryRepository
func (_mock *MockMetricEntryRepository) Create(ctx context.Context, entity *domain.MetricEntry) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.MetricEntry) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMetricEntryRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMetricEntryRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *domain.MetricEntry
func (_e *MockMetricEntryRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockMetricEntryRepository_Create_Call {
	return &MockMetricEntryRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockMetricEntryRepository_Create_Call) Run(run func(ctx context.Context, entity *domain.MetricEntry)) *MockMetricEntryRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.MetricEntry
		if args[1] != nil {
			arg1 = args[1].(*domain.MetricEntry)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricEntryRepository_Create_Call) Return(err error) *MockMetricEntryRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMetricEntryRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entity *domain.MetricEntry) error) *MockMetricEntryRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockMetricEntryRepository
func (_mock *MockMetricEntryRepository) Delete(ctx context.Context, id properties.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMetricEntryRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMetricEntryRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockMetricEntryRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockMetricEntryRepository_Delete_Call {
	return &MockMetricEntryRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockMetricEntryRepository_Delete_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockMetricEntryRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricEntryRepository_Delete_Call) Return(err error) *MockMetricEntryRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMetricEntryRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) error) *MockMetricEntryRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockMetricEntryRepository
func (_mock *MockMetricEntryRepository) Exists(ctx context.Context, id properties.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricEntryRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockMetricEntryRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockMetricEntryRepository_Expecter) Exists(ctx interface{}, id interface{}) *MockMetricEntryRepository_Exists_Call {
	return &MockMetricEntryRepository_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockMetricEntryRepository_Exists_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockMetricEntryRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricEntryRepository_Exists_Call) Return(b bool, err error) *MockMetricEntryRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockMetricEntryRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (bool, error)) *MockMetricEntryRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockMetricEntryRepository
func (_mock *MockMetricEntryRepository) Get(ctx context.Context, id properties.UUID) (*domain.MetricEntry, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.MetricEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.MetricEntry, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.MetricEntry); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MetricEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricEntryRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockMetricEntryRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockMetricEntryRepository_Expecter) Get(ctx interface{}, id interface{}) *MockMetricEntryRepository_Get_Call {
	return &MockMetricEntryRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockMetricEntryRepository_Get_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockMetricEntryRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricEntryRepository_Get_Call) Return(metricEntry *domain.MetricEntry, err error) *MockMetricEntryRepository_Get_Call {
	_c.Call.Return(metricEntry, err)
	return _c
}

func (_c *MockMetricEntryRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (*domain.MetricEntry, error)) *MockMetricEntryRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockMetricEntryRepository
func (_mock *MockMetricEntryRepository) List(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.MetricEntry], error) {
	ret := _mock.Called(ctx, scope, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *domain.PageRes[domain.MetricEntry]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) (*domain.PageRes[domain.MetricEntry], error)); ok {
		return returnFunc(ctx, scope, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) *domain.PageRes[domain.MetricEntry]); ok {
		r0 = returnFunc(ctx, scope, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PageRes[domain.MetricEntry])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *auth.IdentityScope, *domain.PageReq) error); ok {
		r1 = returnFunc(ctx, scope, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricEntryRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockMetricEntryRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - scope *auth.IdentityScope
//   - req *domain.PageReq
func (_e *MockMetricEntryRepository_Expecter) List(ctx interface{}, scope interface{}, req interface{}) *MockMetricEntryRepository_List_Call {
	return &MockMetricEntryRepository_List_Call{Call: _e.mock.On("List", ctx, scope, req)}
}

func (_c *MockMetricEntryRepository_List_Call) Run(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq)) *MockMetricEntryRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *auth.IdentityScope
		if args[1] != nil {
			arg1 = args[1].(*auth.IdentityScope)
		}
		var arg2 *domain.PageReq
		if args[2] != nil {
			arg2 = args[2].(*domain.PageReq)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMetricEntryRepository_List_Call) Return(pageRes *domain.PageRes[domain.MetricEntry], err error) *MockMetricEntryRepository_List_Call {
	_c.Call.Return(pageRes, err)
	return _c
}

func (_c *MockMetricEntryRepository_List_Call) RunAndReturn(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.MetricEntry], error)) *MockMetricEntryRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockMetricEntryRepository
func (_mock *MockMetricEntryRepository) Save(ctx context.Context, entity *domain.MetricEntry) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.MetricEntry) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMetricEntryRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockMetricEntryRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *domain.MetricEntry
func (_e *MockMetricEntryRepository_Expecter) Save(ctx interface{}, entity interface{}) *MockMetricEntryRepository_Save_Call {
	return &MockMetricEntryRepository_Save_Call{Call: _e.mock.On("Save", ctx, entity)}
}

func (_c *MockMetricEntryRepository_Save_Call) Run(run func(ctx context.Context, entity *domain.MetricEntry)) *MockMetricEntryRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.MetricEntry
		if args[1] != nil {
			arg1 = args[1].(*domain.MetricEntry)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricEntryRepository_Save_Call) Return(err error) *MockMetricEntryRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMetricEntryRepository_Save_Call) RunAndReturn(run func(ctx context.Context, entity *domain.MetricEntry) error) *MockMetricEntryRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}
