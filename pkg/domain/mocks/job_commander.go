// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockJobCommander creates a new instance of MockJobCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJobCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJobCommander {
	mock := &MockJobCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockJobCommander is an autogenerated mock type for the JobCommander type
type MockJobCommander struct {
	mock.Mock
}

type MockJobCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJobCommander) EXPECT() *MockJobCommander_Expecter {
	return &MockJobCommander_Expecter{mock: &_m.Mock}
}

// Claim provides a mock function for the type MockJobCommander
func (_mock *MockJobCommander) Claim(ctx context.Context, jobID properties.UUID) error {
	ret := _mock.Called(ctx, jobID)

	if len(ret) == 0 {
		panic("no return value specified for Claim")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) error); ok {
		r0 = returnFunc(ctx, jobID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJobCommander_Claim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Claim'
type MockJobCommander_Claim_Call struct {
	*mock.Call
}

// Claim is a helper method to define mock.On call
//   - ctx context.Context
//   - jobID properties.UUID
func (_e *MockJobCommander_Expecter) Claim(ctx interface{}, jobID interface{}) *MockJobCommander_Claim_Call {
	return &MockJobCommander_Claim_Call{Call: _e.mock.On("Claim", ctx, jobID)}
}

func (_c *MockJobCommander_Claim_Call) Run(run func(ctx context.Context, jobID properties.UUID)) *MockJobCommander_Claim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobCommander_Claim_Call) Return(err error) *MockJobCommander_Claim_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJobCommander_Claim_Call) RunAndReturn(run func(ctx context.Context, jobID properties.UUID) error) *MockJobCommander_Claim_Call {
	_c.Call.Return(run)
	return _c
}

// Complete provides a mock function for the type MockJobCommander
func (_mock *MockJobCommander) Complete(ctx context.Context, params domain.CompleteJobParams) error {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Complete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CompleteJobParams) error); ok {
		r0 = returnFunc(ctx, params)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJobCommander_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type MockJobCommander_Complete_Call struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CompleteJobParams
func (_e *MockJobCommander_Expecter) Complete(ctx interface{}, params interface{}) *MockJobCommander_Complete_Call {
	return &MockJobCommander_Complete_Call{Call: _e.mock.On("Complete", ctx, params)}
}

func (_c *MockJobCommander_Complete_Call) Run(run func(ctx context.Context, params domain.CompleteJobParams)) *MockJobCommander_Complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CompleteJobParams
		if args[1] != nil {
			arg1 = args[1].(domain.CompleteJobParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobCommander_Complete_Call) Return(err error) *MockJobCommander_Complete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJobCommander_Complete_Call) RunAndReturn(run func(ctx context.Context, params domain.CompleteJobParams) error) *MockJobCommander_Complete_Call {
	_c.Call.Return(run)
	return _c
}

// Fail provides a mock function for the type MockJobCommander
func (_mock *MockJobCommander) Fail(ctx context.Context, params domain.FailJobParams) error {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Fail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.FailJobParams) error); ok {
		r0 = returnFunc(ctx, params)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockJobCommander_Fail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fail'
type MockJobCommander_Fail_Call struct {
	*mock.Call
}

// Fail is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.FailJobParams
func (_e *MockJobCommander_Expecter) Fail(ctx interface{}, params interface{}) *MockJobCommander_Fail_Call {
	return &MockJobCommander_Fail_Call{Call: _e.mock.On("Fail", ctx, params)}
}

func (_c *MockJobCommander_Fail_Call) Run(run func(ctx context.Context, params domain.FailJobParams)) *MockJobCommander_Fail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.FailJobParams
		if args[1] != nil {
			arg1 = args[1].(domain.FailJobParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockJobCommander_Fail_Call) Return(err error) *MockJobCommander_Fail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockJobCommander_Fail_Call) RunAndReturn(run func(ctx context.Context, params domain.FailJobParams) error) *MockJobCommander_Fail_Call {
	_c.Call.Return(run)
	return _c
}
