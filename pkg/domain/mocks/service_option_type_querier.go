// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/auth"
	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceOptionTypeQuerier creates a new instance of MockServiceOptionTypeQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceOptionTypeQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceOptionTypeQuerier {
	mock := &MockServiceOptionTypeQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceOptionTypeQuerier is an autogenerated mock type for the ServiceOptionTypeQuerier type
type MockServiceOptionTypeQuerier struct {
	mock.Mock
}

type MockServiceOptionTypeQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceOptionTypeQuerier) EXPECT() *MockServiceOptionTypeQuerier_Expecter {
	return &MockServiceOptionTypeQuerier_Expecter{mock: &_m.Mock}
}

// AuthScope provides a mock function for the type MockServiceOptionTypeQuerier
func (_mock *MockServiceOptionTypeQuerier) AuthScope(ctx context.Context, id properties.UUID) (auth.ObjectScope, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for AuthScope")
	}

	var r0 auth.ObjectScope
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (auth.ObjectScope, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) auth.ObjectScope); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.ObjectScope)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionTypeQuerier_AuthScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthScope'
type MockServiceOptionTypeQuerier_AuthScope_Call struct {
	*mock.Call
}

// AuthScope is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceOptionTypeQuerier_Expecter) AuthScope(ctx interface{}, id interface{}) *MockServiceOptionTypeQuerier_AuthScope_Call {
	return &MockServiceOptionTypeQuerier_AuthScope_Call{Call: _e.mock.On("AuthScope", ctx, id)}
}

func (_c *MockServiceOptionTypeQuerier_AuthScope_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceOptionTypeQuerier_AuthScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionTypeQuerier_AuthScope_Call) Return(objectScope auth.ObjectScope, err error) *MockServiceOptionTypeQuerier_AuthScope_Call {
	_c.Call.Return(objectScope, err)
	return _c
}

func (_c *MockServiceOptionTypeQuerier_AuthScope_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (auth.ObjectScope, error)) *MockServiceOptionTypeQuerier_AuthScope_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function for the type MockServiceOptionTypeQuerier
func (_mock *MockServiceOptionTypeQuerier) Count(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionTypeQuerier_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockServiceOptionTypeQuerier_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServiceOptionTypeQuerier_Expecter) Count(ctx interface{}) *MockServiceOptionTypeQuerier_Count_Call {
	return &MockServiceOptionTypeQuerier_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockServiceOptionTypeQuerier_Count_Call) Run(run func(ctx context.Context)) *MockServiceOptionTypeQuerier_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceOptionTypeQuerier_Count_Call) Return(n int64, err error) *MockServiceOptionTypeQuerier_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockServiceOptionTypeQuerier_Count_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockServiceOptionTypeQuerier_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockServiceOptionTypeQuerier
func (_mock *MockServiceOptionTypeQuerier) Exists(ctx context.Context, id properties.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionTypeQuerier_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockServiceOptionTypeQuerier_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceOptionTypeQuerier_Expecter) Exists(ctx interface{}, id interface{}) *MockServiceOptionTypeQuerier_Exists_Call {
	return &MockServiceOptionTypeQuerier_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockServiceOptionTypeQuerier_Exists_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceOptionTypeQuerier_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionTypeQuerier_Exists_Call) Return(b bool, err error) *MockServiceOptionTypeQuerier_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockServiceOptionTypeQuerier_Exists_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (bool, error)) *MockServiceOptionTypeQuerier_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindByType provides a mock function for the type MockServiceOptionTypeQuerier
func (_mock *MockServiceOptionTypeQuerier) FindByType(ctx context.Context, typeStr string) (*domain.ServiceOptionType, error) {
	ret := _mock.Called(ctx, typeStr)

	if len(ret) == 0 {
		panic("no return value specified for FindByType")
	}

	var r0 *domain.ServiceOptionType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.ServiceOptionType, error)); ok {
		return returnFunc(ctx, typeStr)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.ServiceOptionType); ok {
		r0 = returnFunc(ctx, typeStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceOptionType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, typeStr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionTypeQuerier_FindByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByType'
type MockServiceOptionTypeQuerier_FindByType_Call struct {
	*mock.Call
}

// FindByType is a helper method to define mock.On call
//   - ctx context.Context
//   - typeStr string
func (_e *MockServiceOptionTypeQuerier_Expecter) FindByType(ctx interface{}, typeStr interface{}) *MockServiceOptionTypeQuerier_FindByType_Call {
	return &MockServiceOptionTypeQuerier_FindByType_Call{Call: _e.mock.On("FindByType", ctx, typeStr)}
}

func (_c *MockServiceOptionTypeQuerier_FindByType_Call) Run(run func(ctx context.Context, typeStr string)) *MockServiceOptionTypeQuerier_FindByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionTypeQuerier_FindByType_Call) Return(serviceOptionType *domain.ServiceOptionType, err error) *MockServiceOptionTypeQuerier_FindByType_Call {
	_c.Call.Return(serviceOptionType, err)
	return _c
}

func (_c *MockServiceOptionTypeQuerier_FindByType_Call) RunAndReturn(run func(ctx context.Context, typeStr string) (*domain.ServiceOptionType, error)) *MockServiceOptionTypeQuerier_FindByType_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockServiceOptionTypeQuerier
func (_mock *MockServiceOptionTypeQuerier) Get(ctx context.Context, id properties.UUID) (*domain.ServiceOptionType, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.ServiceOptionType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.ServiceOptionType, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.ServiceOptionType); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceOptionType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionTypeQuerier_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServiceOptionTypeQuerier_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceOptionTypeQuerier_Expecter) Get(ctx interface{}, id interface{}) *MockServiceOptionTypeQuerier_Get_Call {
	return &MockServiceOptionTypeQuerier_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockServiceOptionTypeQuerier_Get_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceOptionTypeQuerier_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionTypeQuerier_Get_Call) Return(serviceOptionType *domain.ServiceOptionType, err error) *MockServiceOptionTypeQuerier_Get_Call {
	_c.Call.Return(serviceOptionType, err)
	return _c
}

func (_c *MockServiceOptionTypeQuerier_Get_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (*domain.ServiceOptionType, error)) *MockServiceOptionTypeQuerier_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockServiceOptionTypeQuerier
func (_mock *MockServiceOptionTypeQuerier) List(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.ServiceOptionType], error) {
	ret := _mock.Called(ctx, scope, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *domain.PageRes[domain.ServiceOptionType]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) (*domain.PageRes[domain.ServiceOptionType], error)); ok {
		return returnFunc(ctx, scope, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) *domain.PageRes[domain.ServiceOptionType]); ok {
		r0 = returnFunc(ctx, scope, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PageRes[domain.ServiceOptionType])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *auth.IdentityScope, *domain.PageReq) error); ok {
		r1 = returnFunc(ctx, scope, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionTypeQuerier_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServiceOptionTypeQuerier_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - scope *auth.IdentityScope
//   - req *domain.PageReq
func (_e *MockServiceOptionTypeQuerier_Expecter) List(ctx interface{}, scope interface{}, req interface{}) *MockServiceOptionTypeQuerier_List_Call {
	return &MockServiceOptionTypeQuerier_List_Call{Call: _e.mock.On("List", ctx, scope, req)}
}

func (_c *MockServiceOptionTypeQuerier_List_Call) Run(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq)) *MockServiceOptionTypeQuerier_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *auth.IdentityScope
		if args[1] != nil {
			arg1 = args[1].(*auth.IdentityScope)
		}
		var arg2 *domain.PageReq
		if args[2] != nil {
			arg2 = args[2].(*domain.PageReq)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServiceOptionTypeQuerier_List_Call) Return(pageRes *domain.PageRes[domain.ServiceOptionType], err error) *MockServiceOptionTypeQuerier_List_Call {
	_c.Call.Return(pageRes, err)
	return _c
}

func (_c *MockServiceOptionTypeQuerier_List_Call) RunAndReturn(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.ServiceOptionType], error)) *MockServiceOptionTypeQuerier_List_Call {
	_c.Call.Return(run)
	return _c
}
