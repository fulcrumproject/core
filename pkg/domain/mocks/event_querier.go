// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/fulcrumproject/core/pkg/auth"
	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEventQuerier creates a new instance of MockEventQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventQuerier {
	mock := &MockEventQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventQuerier is an autogenerated mock type for the EventQuerier type
type MockEventQuerier struct {
	mock.Mock
}

type MockEventQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventQuerier) EXPECT() *MockEventQuerier_Expecter {
	return &MockEventQuerier_Expecter{mock: &_m.Mock}
}

// AuthScope provides a mock function for the type MockEventQuerier
func (_mock *MockEventQuerier) AuthScope(ctx context.Context, id properties.UUID) (auth.ObjectScope, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for AuthScope")
	}

	var r0 auth.ObjectScope
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (auth.ObjectScope, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) auth.ObjectScope); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(auth.ObjectScope)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventQuerier_AuthScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthScope'
type MockEventQuerier_AuthScope_Call struct {
	*mock.Call
}

// AuthScope is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockEventQuerier_Expecter) AuthScope(ctx interface{}, id interface{}) *MockEventQuerier_AuthScope_Call {
	return &MockEventQuerier_AuthScope_Call{Call: _e.mock.On("AuthScope", ctx, id)}
}

func (_c *MockEventQuerier_AuthScope_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockEventQuerier_AuthScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventQuerier_AuthScope_Call) Return(objectScope auth.ObjectScope, err error) *MockEventQuerier_AuthScope_Call {
	_c.Call.Return(objectScope, err)
	return _c
}

func (_c *MockEventQuerier_AuthScope_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (auth.ObjectScope, error)) *MockEventQuerier_AuthScope_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function for the type MockEventQuerier
func (_mock *MockEventQuerier) Count(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventQuerier_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockEventQuerier_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventQuerier_Expecter) Count(ctx interface{}) *MockEventQuerier_Count_Call {
	return &MockEventQuerier_Count_Call{Call: _e.mock.On("Count", ctx)}
}

func (_c *MockEventQuerier_Count_Call) Run(run func(ctx context.Context)) *MockEventQuerier_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEventQuerier_Count_Call) Return(n int64, err error) *MockEventQuerier_Count_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockEventQuerier_Count_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockEventQuerier_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockEventQuerier
func (_mock *MockEventQuerier) Exists(ctx context.Context, id properties.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventQuerier_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockEventQuerier_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockEventQuerier_Expecter) Exists(ctx interface{}, id interface{}) *MockEventQuerier_Exists_Call {
	return &MockEventQuerier_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockEventQuerier_Exists_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockEventQuerier_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventQuerier_Exists_Call) Return(b bool, err error) *MockEventQuerier_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockEventQuerier_Exists_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (bool, error)) *MockEventQuerier_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockEventQuerier
func (_mock *MockEventQuerier) Get(ctx context.Context, id properties.UUID) (*domain.Event, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Event
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.Event, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.Event); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Event)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventQuerier_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockEventQuerier_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockEventQuerier_Expecter) Get(ctx interface{}, id interface{}) *MockEventQuerier_Get_Call {
	return &MockEventQuerier_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockEventQuerier_Get_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockEventQuerier_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventQuerier_Get_Call) Return(event *domain.Event, err error) *MockEventQuerier_Get_Call {
	_c.Call.Return(event, err)
	return _c
}

func (_c *MockEventQuerier_Get_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (*domain.Event, error)) *MockEventQuerier_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockEventQuerier
func (_mock *MockEventQuerier) List(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.Event], error) {
	ret := _mock.Called(ctx, scope, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *domain.PageRes[domain.Event]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) (*domain.PageRes[domain.Event], error)); ok {
		return returnFunc(ctx, scope, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *auth.IdentityScope, *domain.PageReq) *domain.PageRes[domain.Event]); ok {
		r0 = returnFunc(ctx, scope, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PageRes[domain.Event])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *auth.IdentityScope, *domain.PageReq) error); ok {
		r1 = returnFunc(ctx, scope, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventQuerier_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockEventQuerier_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - scope *auth.IdentityScope
//   - req *domain.PageReq
func (_e *MockEventQuerier_Expecter) List(ctx interface{}, scope interface{}, req interface{}) *MockEventQuerier_List_Call {
	return &MockEventQuerier_List_Call{Call: _e.mock.On("List", ctx, scope, req)}
}

func (_c *MockEventQuerier_List_Call) Run(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq)) *MockEventQuerier_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *auth.IdentityScope
		if args[1] != nil {
			arg1 = args[1].(*auth.IdentityScope)
		}
		var arg2 *domain.PageReq
		if args[2] != nil {
			arg2 = args[2].(*domain.PageReq)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEventQuerier_List_Call) Return(pageRes *domain.PageRes[domain.Event], err error) *MockEventQuerier_List_Call {
	_c.Call.Return(pageRes, err)
	return _c
}

func (_c *MockEventQuerier_List_Call) RunAndReturn(run func(ctx context.Context, scope *auth.IdentityScope, req *domain.PageReq) (*domain.PageRes[domain.Event], error)) *MockEventQuerier_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListFromSequence provides a mock function for the type MockEventQuerier
func (_mock *MockEventQuerier) ListFromSequence(ctx context.Context, fromSequenceNumber int64, limit int) ([]*domain.Event, error) {
	ret := _mock.Called(ctx, fromSequenceNumber, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListFromSequence")
	}

	var r0 []*domain.Event
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int) ([]*domain.Event, error)); ok {
		return returnFunc(ctx, fromSequenceNumber, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int) []*domain.Event); ok {
		r0 = returnFunc(ctx, fromSequenceNumber, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Event)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, int) error); ok {
		r1 = returnFunc(ctx, fromSequenceNumber, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventQuerier_ListFromSequence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFromSequence'
type MockEventQuerier_ListFromSequence_Call struct {
	*mock.Call
}

// ListFromSequence is a helper method to define mock.On call
//   - ctx context.Context
//   - fromSequenceNumber int64
//   - limit int
func (_e *MockEventQuerier_Expecter) ListFromSequence(ctx interface{}, fromSequenceNumber interface{}, limit interface{}) *MockEventQuerier_ListFromSequence_Call {
	return &MockEventQuerier_ListFromSequence_Call{Call: _e.mock.On("ListFromSequence", ctx, fromSequenceNumber, limit)}
}

func (_c *MockEventQuerier_ListFromSequence_Call) Run(run func(ctx context.Context, fromSequenceNumber int64, limit int)) *MockEventQuerier_ListFromSequence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockEventQuerier_ListFromSequence_Call) Return(events []*domain.Event, err error) *MockEventQuerier_ListFromSequence_Call {
	_c.Call.Return(events, err)
	return _c
}

func (_c *MockEventQuerier_ListFromSequence_Call) RunAndReturn(run func(ctx context.Context, fromSequenceNumber int64, limit int) ([]*domain.Event, error)) *MockEventQuerier_ListFromSequence_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceUptime provides a mock function for the type MockEventQuerier
func (_mock *MockEventQuerier) ServiceUptime(ctx context.Context, serviceID properties.UUID, start time.Time, end time.Time) (uint64, uint64, error) {
	ret := _mock.Called(ctx, serviceID, start, end)

	if len(ret) == 0 {
		panic("no return value specified for ServiceUptime")
	}

	var r0 uint64
	var r1 uint64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, time.Time, time.Time) (uint64, uint64, error)); ok {
		return returnFunc(ctx, serviceID, start, end)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, time.Time, time.Time) uint64); ok {
		r0 = returnFunc(ctx, serviceID, start, end)
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID, time.Time, time.Time) uint64); ok {
		r1 = returnFunc(ctx, serviceID, start, end)
	} else {
		r1 = ret.Get(1).(uint64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, properties.UUID, time.Time, time.Time) error); ok {
		r2 = returnFunc(ctx, serviceID, start, end)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockEventQuerier_ServiceUptime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceUptime'
type MockEventQuerier_ServiceUptime_Call struct {
	*mock.Call
}

// ServiceUptime is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID properties.UUID
//   - start time.Time
//   - end time.Time
func (_e *MockEventQuerier_Expecter) ServiceUptime(ctx interface{}, serviceID interface{}, start interface{}, end interface{}) *MockEventQuerier_ServiceUptime_Call {
	return &MockEventQuerier_ServiceUptime_Call{Call: _e.mock.On("ServiceUptime", ctx, serviceID, start, end)}
}

func (_c *MockEventQuerier_ServiceUptime_Call) Run(run func(ctx context.Context, serviceID properties.UUID, start time.Time, end time.Time)) *MockEventQuerier_ServiceUptime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockEventQuerier_ServiceUptime_Call) Return(uptimeSeconds uint64, downtimeSeconds uint64, err error) *MockEventQuerier_ServiceUptime_Call {
	_c.Call.Return(uptimeSeconds, downtimeSeconds, err)
	return _c
}

func (_c *MockEventQuerier_ServiceUptime_Call) RunAndReturn(run func(ctx context.Context, serviceID properties.UUID, start time.Time, end time.Time) (uint64, uint64, error)) *MockEventQuerier_ServiceUptime_Call {
	_c.Call.Return(run)
	return _c
}
