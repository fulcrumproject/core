// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServicePoolSetCommander creates a new instance of MockServicePoolSetCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicePoolSetCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicePoolSetCommander {
	mock := &MockServicePoolSetCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServicePoolSetCommander is an autogenerated mock type for the ServicePoolSetCommander type
type MockServicePoolSetCommander struct {
	mock.Mock
}

type MockServicePoolSetCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicePoolSetCommander) EXPECT() *MockServicePoolSetCommander_Expecter {
	return &MockServicePoolSetCommander_Expecter{mock: &_m.Mock}
}

// CreateServicePoolSet provides a mock function for the type MockServicePoolSetCommander
func (_mock *MockServicePoolSetCommander) CreateServicePoolSet(ctx context.Context, params domain.CreateServicePoolSetParams) (*domain.ServicePoolSet, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateServicePoolSet")
	}

	var r0 *domain.ServicePoolSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServicePoolSetParams) (*domain.ServicePoolSet, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServicePoolSetParams) *domain.ServicePoolSet); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePoolSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CreateServicePoolSetParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolSetCommander_CreateServicePoolSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServicePoolSet'
type MockServicePoolSetCommander_CreateServicePoolSet_Call struct {
	*mock.Call
}

// CreateServicePoolSet is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CreateServicePoolSetParams
func (_e *MockServicePoolSetCommander_Expecter) CreateServicePoolSet(ctx interface{}, params interface{}) *MockServicePoolSetCommander_CreateServicePoolSet_Call {
	return &MockServicePoolSetCommander_CreateServicePoolSet_Call{Call: _e.mock.On("CreateServicePoolSet", ctx, params)}
}

func (_c *MockServicePoolSetCommander_CreateServicePoolSet_Call) Run(run func(ctx context.Context, params domain.CreateServicePoolSetParams)) *MockServicePoolSetCommander_CreateServicePoolSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateServicePoolSetParams
		if args[1] != nil {
			arg1 = args[1].(domain.CreateServicePoolSetParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolSetCommander_CreateServicePoolSet_Call) Return(servicePoolSet *domain.ServicePoolSet, err error) *MockServicePoolSetCommander_CreateServicePoolSet_Call {
	_c.Call.Return(servicePoolSet, err)
	return _c
}

func (_c *MockServicePoolSetCommander_CreateServicePoolSet_Call) RunAndReturn(run func(ctx context.Context, params domain.CreateServicePoolSetParams) (*domain.ServicePoolSet, error)) *MockServicePoolSetCommander_CreateServicePoolSet_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServicePoolSet provides a mock function for the type MockServicePoolSetCommander
func (_mock *MockServicePoolSetCommander) DeleteServicePoolSet(ctx context.Context, id properties.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServicePoolSet")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServicePoolSetCommander_DeleteServicePoolSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServicePoolSet'
type MockServicePoolSetCommander_DeleteServicePoolSet_Call struct {
	*mock.Call
}

// DeleteServicePoolSet is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolSetCommander_Expecter) DeleteServicePoolSet(ctx interface{}, id interface{}) *MockServicePoolSetCommander_DeleteServicePoolSet_Call {
	return &MockServicePoolSetCommander_DeleteServicePoolSet_Call{Call: _e.mock.On("DeleteServicePoolSet", ctx, id)}
}

func (_c *MockServicePoolSetCommander_DeleteServicePoolSet_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolSetCommander_DeleteServicePoolSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolSetCommander_DeleteServicePoolSet_Call) Return(err error) *MockServicePoolSetCommander_DeleteServicePoolSet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServicePoolSetCommander_DeleteServicePoolSet_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) error) *MockServicePoolSetCommander_DeleteServicePoolSet_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServicePoolSet provides a mock function for the type MockServicePoolSetCommander
func (_mock *MockServicePoolSetCommander) UpdateServicePoolSet(ctx context.Context, id properties.UUID, params domain.UpdateServicePoolSetParams) (*domain.ServicePoolSet, error) {
	ret := _mock.Called(ctx, id, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServicePoolSet")
	}

	var r0 *domain.ServicePoolSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, domain.UpdateServicePoolSetParams) (*domain.ServicePoolSet, error)); ok {
		return returnFunc(ctx, id, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, domain.UpdateServicePoolSetParams) *domain.ServicePoolSet); ok {
		r0 = returnFunc(ctx, id, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePoolSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID, domain.UpdateServicePoolSetParams) error); ok {
		r1 = returnFunc(ctx, id, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolSetCommander_UpdateServicePoolSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServicePoolSet'
type MockServicePoolSetCommander_UpdateServicePoolSet_Call struct {
	*mock.Call
}

// UpdateServicePoolSet is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
//   - params domain.UpdateServicePoolSetParams
func (_e *MockServicePoolSetCommander_Expecter) UpdateServicePoolSet(ctx interface{}, id interface{}, params interface{}) *MockServicePoolSetCommander_UpdateServicePoolSet_Call {
	return &MockServicePoolSetCommander_UpdateServicePoolSet_Call{Call: _e.mock.On("UpdateServicePoolSet", ctx, id, params)}
}

func (_c *MockServicePoolSetCommander_UpdateServicePoolSet_Call) Run(run func(ctx context.Context, id properties.UUID, params domain.UpdateServicePoolSetParams)) *MockServicePoolSetCommander_UpdateServicePoolSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		var arg2 domain.UpdateServicePoolSetParams
		if args[2] != nil {
			arg2 = args[2].(domain.UpdateServicePoolSetParams)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServicePoolSetCommander_UpdateServicePoolSet_Call) Return(servicePoolSet *domain.ServicePoolSet, err error) *MockServicePoolSetCommander_UpdateServicePoolSet_Call {
	_c.Call.Return(servicePoolSet, err)
	return _c
}

func (_c *MockServicePoolSetCommander_UpdateServicePoolSet_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID, params domain.UpdateServicePoolSetParams) (*domain.ServicePoolSet, error)) *MockServicePoolSetCommander_UpdateServicePoolSet_Call {
	_c.Call.Return(run)
	return _c
}
