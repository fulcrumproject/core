// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServicePoolRepository creates a new instance of MockServicePoolRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicePoolRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicePoolRepository {
	mock := &MockServicePoolRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServicePoolRepository is an autogenerated mock type for the ServicePoolRepository type
type MockServicePoolRepository struct {
	mock.Mock
}

type MockServicePoolRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicePoolRepository) EXPECT() *MockServicePoolRepository_Expecter {
	return &MockServicePoolRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockServicePoolRepository
func (_mock *MockServicePoolRepository) Create(ctx context.Context, pool *domain.ServicePool) error {
	ret := _mock.Called(ctx, pool)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.ServicePool) error); ok {
		r0 = returnFunc(ctx, pool)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServicePoolRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServicePoolRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - pool *domain.ServicePool
func (_e *MockServicePoolRepository_Expecter) Create(ctx interface{}, pool interface{}) *MockServicePoolRepository_Create_Call {
	return &MockServicePoolRepository_Create_Call{Call: _e.mock.On("Create", ctx, pool)}
}

func (_c *MockServicePoolRepository_Create_Call) Run(run func(ctx context.Context, pool *domain.ServicePool)) *MockServicePoolRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.ServicePool
		if args[1] != nil {
			arg1 = args[1].(*domain.ServicePool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolRepository_Create_Call) Return(err error) *MockServicePoolRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServicePoolRepository_Create_Call) RunAndReturn(run func(ctx context.Context, pool *domain.ServicePool) error) *MockServicePoolRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockServicePoolRepository
func (_mock *MockServicePoolRepository) Delete(ctx context.Context, id properties.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServicePoolRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockServicePoolRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockServicePoolRepository_Delete_Call {
	return &MockServicePoolRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockServicePoolRepository_Delete_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolRepository_Delete_Call) Return(err error) *MockServicePoolRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServicePoolRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) error) *MockServicePoolRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockServicePoolRepository
func (_mock *MockServicePoolRepository) Exists(ctx context.Context, id properties.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockServicePoolRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolRepository_Expecter) Exists(ctx interface{}, id interface{}) *MockServicePoolRepository_Exists_Call {
	return &MockServicePoolRepository_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockServicePoolRepository_Exists_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolRepository_Exists_Call) Return(b bool, err error) *MockServicePoolRepository_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockServicePoolRepository_Exists_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (bool, error)) *MockServicePoolRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// FindByPoolSetAndType provides a mock function for the type MockServicePoolRepository
func (_mock *MockServicePoolRepository) FindByPoolSetAndType(ctx context.Context, poolSetID properties.UUID, poolType string) (*domain.ServicePool, error) {
	ret := _mock.Called(ctx, poolSetID, poolType)

	if len(ret) == 0 {
		panic("no return value specified for FindByPoolSetAndType")
	}

	var r0 *domain.ServicePool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, string) (*domain.ServicePool, error)); ok {
		return returnFunc(ctx, poolSetID, poolType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID, string) *domain.ServicePool); ok {
		r0 = returnFunc(ctx, poolSetID, poolType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID, string) error); ok {
		r1 = returnFunc(ctx, poolSetID, poolType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolRepository_FindByPoolSetAndType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByPoolSetAndType'
type MockServicePoolRepository_FindByPoolSetAndType_Call struct {
	*mock.Call
}

// FindByPoolSetAndType is a helper method to define mock.On call
//   - ctx context.Context
//   - poolSetID properties.UUID
//   - poolType string
func (_e *MockServicePoolRepository_Expecter) FindByPoolSetAndType(ctx interface{}, poolSetID interface{}, poolType interface{}) *MockServicePoolRepository_FindByPoolSetAndType_Call {
	return &MockServicePoolRepository_FindByPoolSetAndType_Call{Call: _e.mock.On("FindByPoolSetAndType", ctx, poolSetID, poolType)}
}

func (_c *MockServicePoolRepository_FindByPoolSetAndType_Call) Run(run func(ctx context.Context, poolSetID properties.UUID, poolType string)) *MockServicePoolRepository_FindByPoolSetAndType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockServicePoolRepository_FindByPoolSetAndType_Call) Return(servicePool *domain.ServicePool, err error) *MockServicePoolRepository_FindByPoolSetAndType_Call {
	_c.Call.Return(servicePool, err)
	return _c
}

func (_c *MockServicePoolRepository_FindByPoolSetAndType_Call) RunAndReturn(run func(ctx context.Context, poolSetID properties.UUID, poolType string) (*domain.ServicePool, error)) *MockServicePoolRepository_FindByPoolSetAndType_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockServicePoolRepository
func (_mock *MockServicePoolRepository) Get(ctx context.Context, id properties.UUID) (*domain.ServicePool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.ServicePool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.ServicePool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.ServicePool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServicePoolRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolRepository_Expecter) Get(ctx interface{}, id interface{}) *MockServicePoolRepository_Get_Call {
	return &MockServicePoolRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockServicePoolRepository_Get_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolRepository_Get_Call) Return(servicePool *domain.ServicePool, err error) *MockServicePoolRepository_Get_Call {
	_c.Call.Return(servicePool, err)
	return _c
}

func (_c *MockServicePoolRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (*domain.ServicePool, error)) *MockServicePoolRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockServicePoolRepository
func (_mock *MockServicePoolRepository) List(ctx context.Context) ([]*domain.ServicePool, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.ServicePool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*domain.ServicePool, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*domain.ServicePool); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServicePool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServicePoolRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServicePoolRepository_Expecter) List(ctx interface{}) *MockServicePoolRepository_List_Call {
	return &MockServicePoolRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockServicePoolRepository_List_Call) Run(run func(ctx context.Context)) *MockServicePoolRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServicePoolRepository_List_Call) Return(servicePools []*domain.ServicePool, err error) *MockServicePoolRepository_List_Call {
	_c.Call.Return(servicePools, err)
	return _c
}

func (_c *MockServicePoolRepository_List_Call) RunAndReturn(run func(ctx context.Context) ([]*domain.ServicePool, error)) *MockServicePoolRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByPoolSet provides a mock function for the type MockServicePoolRepository
func (_mock *MockServicePoolRepository) ListByPoolSet(ctx context.Context, poolSetID properties.UUID) ([]*domain.ServicePool, error) {
	ret := _mock.Called(ctx, poolSetID)

	if len(ret) == 0 {
		panic("no return value specified for ListByPoolSet")
	}

	var r0 []*domain.ServicePool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) ([]*domain.ServicePool, error)); ok {
		return returnFunc(ctx, poolSetID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) []*domain.ServicePool); ok {
		r0 = returnFunc(ctx, poolSetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServicePool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, poolSetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolRepository_ListByPoolSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByPoolSet'
type MockServicePoolRepository_ListByPoolSet_Call struct {
	*mock.Call
}

// ListByPoolSet is a helper method to define mock.On call
//   - ctx context.Context
//   - poolSetID properties.UUID
func (_e *MockServicePoolRepository_Expecter) ListByPoolSet(ctx interface{}, poolSetID interface{}) *MockServicePoolRepository_ListByPoolSet_Call {
	return &MockServicePoolRepository_ListByPoolSet_Call{Call: _e.mock.On("ListByPoolSet", ctx, poolSetID)}
}

func (_c *MockServicePoolRepository_ListByPoolSet_Call) Run(run func(ctx context.Context, poolSetID properties.UUID)) *MockServicePoolRepository_ListByPoolSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolRepository_ListByPoolSet_Call) Return(servicePools []*domain.ServicePool, err error) *MockServicePoolRepository_ListByPoolSet_Call {
	_c.Call.Return(servicePools, err)
	return _c
}

func (_c *MockServicePoolRepository_ListByPoolSet_Call) RunAndReturn(run func(ctx context.Context, poolSetID properties.UUID) ([]*domain.ServicePool, error)) *MockServicePoolRepository_ListByPoolSet_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockServicePoolRepository
func (_mock *MockServicePoolRepository) Update(ctx context.Context, pool *domain.ServicePool) error {
	ret := _mock.Called(ctx, pool)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.ServicePool) error); ok {
		r0 = returnFunc(ctx, pool)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServicePoolRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockServicePoolRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - pool *domain.ServicePool
func (_e *MockServicePoolRepository_Expecter) Update(ctx interface{}, pool interface{}) *MockServicePoolRepository_Update_Call {
	return &MockServicePoolRepository_Update_Call{Call: _e.mock.On("Update", ctx, pool)}
}

func (_c *MockServicePoolRepository_Update_Call) Run(run func(ctx context.Context, pool *domain.ServicePool)) *MockServicePoolRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.ServicePool
		if args[1] != nil {
			arg1 = args[1].(*domain.ServicePool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolRepository_Update_Call) Return(err error) *MockServicePoolRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServicePoolRepository_Update_Call) RunAndReturn(run func(ctx context.Context, pool *domain.ServicePool) error) *MockServicePoolRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
