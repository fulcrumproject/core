// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockParticipantCommander creates a new instance of MockParticipantCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParticipantCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParticipantCommander {
	mock := &MockParticipantCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockParticipantCommander is an autogenerated mock type for the ParticipantCommander type
type MockParticipantCommander struct {
	mock.Mock
}

type MockParticipantCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParticipantCommander) EXPECT() *MockParticipantCommander_Expecter {
	return &MockParticipantCommander_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockParticipantCommander
func (_mock *MockParticipantCommander) Create(ctx context.Context, params domain.CreateParticipantParams) (*domain.Participant, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Participant
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateParticipantParams) (*domain.Participant, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateParticipantParams) *domain.Participant); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Participant)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CreateParticipantParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockParticipantCommander_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockParticipantCommander_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CreateParticipantParams
func (_e *MockParticipantCommander_Expecter) Create(ctx interface{}, params interface{}) *MockParticipantCommander_Create_Call {
	return &MockParticipantCommander_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockParticipantCommander_Create_Call) Run(run func(ctx context.Context, params domain.CreateParticipantParams)) *MockParticipantCommander_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateParticipantParams
		if args[1] != nil {
			arg1 = args[1].(domain.CreateParticipantParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockParticipantCommander_Create_Call) Return(participant *domain.Participant, err error) *MockParticipantCommander_Create_Call {
	_c.Call.Return(participant, err)
	return _c
}

func (_c *MockParticipantCommander_Create_Call) RunAndReturn(run func(ctx context.Context, params domain.CreateParticipantParams) (*domain.Participant, error)) *MockParticipantCommander_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockParticipantCommander
func (_mock *MockParticipantCommander) Delete(ctx context.Context, id properties.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockParticipantCommander_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockParticipantCommander_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockParticipantCommander_Expecter) Delete(ctx interface{}, id interface{}) *MockParticipantCommander_Delete_Call {
	return &MockParticipantCommander_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockParticipantCommander_Delete_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockParticipantCommander_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockParticipantCommander_Delete_Call) Return(err error) *MockParticipantCommander_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockParticipantCommander_Delete_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) error) *MockParticipantCommander_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockParticipantCommander
func (_mock *MockParticipantCommander) Update(ctx context.Context, params domain.UpdateParticipantParams) (*domain.Participant, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Participant
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateParticipantParams) (*domain.Participant, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateParticipantParams) *domain.Participant); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Participant)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UpdateParticipantParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockParticipantCommander_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockParticipantCommander_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.UpdateParticipantParams
func (_e *MockParticipantCommander_Expecter) Update(ctx interface{}, params interface{}) *MockParticipantCommander_Update_Call {
	return &MockParticipantCommander_Update_Call{Call: _e.mock.On("Update", ctx, params)}
}

func (_c *MockParticipantCommander_Update_Call) Run(run func(ctx context.Context, params domain.UpdateParticipantParams)) *MockParticipantCommander_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UpdateParticipantParams
		if args[1] != nil {
			arg1 = args[1].(domain.UpdateParticipantParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockParticipantCommander_Update_Call) Return(participant *domain.Participant, err error) *MockParticipantCommander_Update_Call {
	_c.Call.Return(participant, err)
	return _c
}

func (_c *MockParticipantCommander_Update_Call) RunAndReturn(run func(ctx context.Context, params domain.UpdateParticipantParams) (*domain.Participant, error)) *MockParticipantCommander_Update_Call {
	_c.Call.Return(run)
	return _c
}
