// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAgentTypeCommander creates a new instance of MockAgentTypeCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAgentTypeCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAgentTypeCommander {
	mock := &MockAgentTypeCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAgentTypeCommander is an autogenerated mock type for the AgentTypeCommander type
type MockAgentTypeCommander struct {
	mock.Mock
}

type MockAgentTypeCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAgentTypeCommander) EXPECT() *MockAgentTypeCommander_Expecter {
	return &MockAgentTypeCommander_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockAgentTypeCommander
func (_mock *MockAgentTypeCommander) Create(ctx context.Context, params domain.CreateAgentTypeParams) (*domain.AgentType, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.AgentType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateAgentTypeParams) (*domain.AgentType, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateAgentTypeParams) *domain.AgentType); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AgentType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CreateAgentTypeParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAgentTypeCommander_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAgentTypeCommander_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CreateAgentTypeParams
func (_e *MockAgentTypeCommander_Expecter) Create(ctx interface{}, params interface{}) *MockAgentTypeCommander_Create_Call {
	return &MockAgentTypeCommander_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockAgentTypeCommander_Create_Call) Run(run func(ctx context.Context, params domain.CreateAgentTypeParams)) *MockAgentTypeCommander_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateAgentTypeParams
		if args[1] != nil {
			arg1 = args[1].(domain.CreateAgentTypeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAgentTypeCommander_Create_Call) Return(agentType *domain.AgentType, err error) *MockAgentTypeCommander_Create_Call {
	_c.Call.Return(agentType, err)
	return _c
}

func (_c *MockAgentTypeCommander_Create_Call) RunAndReturn(run func(ctx context.Context, params domain.CreateAgentTypeParams) (*domain.AgentType, error)) *MockAgentTypeCommander_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockAgentTypeCommander
func (_mock *MockAgentTypeCommander) Delete(ctx context.Context, id properties.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAgentTypeCommander_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAgentTypeCommander_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockAgentTypeCommander_Expecter) Delete(ctx interface{}, id interface{}) *MockAgentTypeCommander_Delete_Call {
	return &MockAgentTypeCommander_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockAgentTypeCommander_Delete_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockAgentTypeCommander_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAgentTypeCommander_Delete_Call) Return(err error) *MockAgentTypeCommander_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAgentTypeCommander_Delete_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) error) *MockAgentTypeCommander_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockAgentTypeCommander
func (_mock *MockAgentTypeCommander) Update(ctx context.Context, params domain.UpdateAgentTypeParams) (*domain.AgentType, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.AgentType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateAgentTypeParams) (*domain.AgentType, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateAgentTypeParams) *domain.AgentType); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AgentType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UpdateAgentTypeParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAgentTypeCommander_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAgentTypeCommander_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.UpdateAgentTypeParams
func (_e *MockAgentTypeCommander_Expecter) Update(ctx interface{}, params interface{}) *MockAgentTypeCommander_Update_Call {
	return &MockAgentTypeCommander_Update_Call{Call: _e.mock.On("Update", ctx, params)}
}

func (_c *MockAgentTypeCommander_Update_Call) Run(run func(ctx context.Context, params domain.UpdateAgentTypeParams)) *MockAgentTypeCommander_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UpdateAgentTypeParams
		if args[1] != nil {
			arg1 = args[1].(domain.UpdateAgentTypeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAgentTypeCommander_Update_Call) Return(agentType *domain.AgentType, err error) *MockAgentTypeCommander_Update_Call {
	_c.Call.Return(agentType, err)
	return _c
}

func (_c *MockAgentTypeCommander_Update_Call) RunAndReturn(run func(ctx context.Context, params domain.UpdateAgentTypeParams) (*domain.AgentType, error)) *MockAgentTypeCommander_Update_Call {
	_c.Call.Return(run)
	return _c
}
