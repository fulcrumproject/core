// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// AgentRepo provides a mock function for the type MockStore
func (_mock *MockStore) AgentRepo() domain.AgentRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AgentRepo")
	}

	var r0 domain.AgentRepository
	if returnFunc, ok := ret.Get(0).(func() domain.AgentRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.AgentRepository)
		}
	}
	return r0
}

// MockStore_AgentRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AgentRepo'
type MockStore_AgentRepo_Call struct {
	*mock.Call
}

// AgentRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) AgentRepo() *MockStore_AgentRepo_Call {
	return &MockStore_AgentRepo_Call{Call: _e.mock.On("AgentRepo")}
}

func (_c *MockStore_AgentRepo_Call) Run(run func()) *MockStore_AgentRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_AgentRepo_Call) Return(agentRepository domain.AgentRepository) *MockStore_AgentRepo_Call {
	_c.Call.Return(agentRepository)
	return _c
}

func (_c *MockStore_AgentRepo_Call) RunAndReturn(run func() domain.AgentRepository) *MockStore_AgentRepo_Call {
	_c.Call.Return(run)
	return _c
}

// AgentTypeRepo provides a mock function for the type MockStore
func (_mock *MockStore) AgentTypeRepo() domain.AgentTypeRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AgentTypeRepo")
	}

	var r0 domain.AgentTypeRepository
	if returnFunc, ok := ret.Get(0).(func() domain.AgentTypeRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.AgentTypeRepository)
		}
	}
	return r0
}

// MockStore_AgentTypeRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AgentTypeRepo'
type MockStore_AgentTypeRepo_Call struct {
	*mock.Call
}

// AgentTypeRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) AgentTypeRepo() *MockStore_AgentTypeRepo_Call {
	return &MockStore_AgentTypeRepo_Call{Call: _e.mock.On("AgentTypeRepo")}
}

func (_c *MockStore_AgentTypeRepo_Call) Run(run func()) *MockStore_AgentTypeRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_AgentTypeRepo_Call) Return(agentTypeRepository domain.AgentTypeRepository) *MockStore_AgentTypeRepo_Call {
	_c.Call.Return(agentTypeRepository)
	return _c
}

func (_c *MockStore_AgentTypeRepo_Call) RunAndReturn(run func() domain.AgentTypeRepository) *MockStore_AgentTypeRepo_Call {
	_c.Call.Return(run)
	return _c
}

// Atomic provides a mock function for the type MockStore
func (_mock *MockStore) Atomic(context1 context.Context, fn func(domain.Store) error) error {
	ret := _mock.Called(context1, fn)

	if len(ret) == 0 {
		panic("no return value specified for Atomic")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(domain.Store) error) error); ok {
		r0 = returnFunc(context1, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_Atomic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Atomic'
type MockStore_Atomic_Call struct {
	*mock.Call
}

// Atomic is a helper method to define mock.On call
//   - context1 context.Context
//   - fn func(domain.Store) error
func (_e *MockStore_Expecter) Atomic(context1 interface{}, fn interface{}) *MockStore_Atomic_Call {
	return &MockStore_Atomic_Call{Call: _e.mock.On("Atomic", context1, fn)}
}

func (_c *MockStore_Atomic_Call) Run(run func(context1 context.Context, fn func(domain.Store) error)) *MockStore_Atomic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(domain.Store) error
		if args[1] != nil {
			arg1 = args[1].(func(domain.Store) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStore_Atomic_Call) Return(err error) *MockStore_Atomic_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_Atomic_Call) RunAndReturn(run func(context1 context.Context, fn func(domain.Store) error) error) *MockStore_Atomic_Call {
	_c.Call.Return(run)
	return _c
}

// EventRepo provides a mock function for the type MockStore
func (_mock *MockStore) EventRepo() domain.EventRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventRepo")
	}

	var r0 domain.EventRepository
	if returnFunc, ok := ret.Get(0).(func() domain.EventRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.EventRepository)
		}
	}
	return r0
}

// MockStore_EventRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventRepo'
type MockStore_EventRepo_Call struct {
	*mock.Call
}

// EventRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) EventRepo() *MockStore_EventRepo_Call {
	return &MockStore_EventRepo_Call{Call: _e.mock.On("EventRepo")}
}

func (_c *MockStore_EventRepo_Call) Run(run func()) *MockStore_EventRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_EventRepo_Call) Return(eventRepository domain.EventRepository) *MockStore_EventRepo_Call {
	_c.Call.Return(eventRepository)
	return _c
}

func (_c *MockStore_EventRepo_Call) RunAndReturn(run func() domain.EventRepository) *MockStore_EventRepo_Call {
	_c.Call.Return(run)
	return _c
}

// EventSubscriptionRepo provides a mock function for the type MockStore
func (_mock *MockStore) EventSubscriptionRepo() domain.EventSubscriptionRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventSubscriptionRepo")
	}

	var r0 domain.EventSubscriptionRepository
	if returnFunc, ok := ret.Get(0).(func() domain.EventSubscriptionRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.EventSubscriptionRepository)
		}
	}
	return r0
}

// MockStore_EventSubscriptionRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventSubscriptionRepo'
type MockStore_EventSubscriptionRepo_Call struct {
	*mock.Call
}

// EventSubscriptionRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) EventSubscriptionRepo() *MockStore_EventSubscriptionRepo_Call {
	return &MockStore_EventSubscriptionRepo_Call{Call: _e.mock.On("EventSubscriptionRepo")}
}

func (_c *MockStore_EventSubscriptionRepo_Call) Run(run func()) *MockStore_EventSubscriptionRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_EventSubscriptionRepo_Call) Return(eventSubscriptionRepository domain.EventSubscriptionRepository) *MockStore_EventSubscriptionRepo_Call {
	_c.Call.Return(eventSubscriptionRepository)
	return _c
}

func (_c *MockStore_EventSubscriptionRepo_Call) RunAndReturn(run func() domain.EventSubscriptionRepository) *MockStore_EventSubscriptionRepo_Call {
	_c.Call.Return(run)
	return _c
}

// JobRepo provides a mock function for the type MockStore
func (_mock *MockStore) JobRepo() domain.JobRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for JobRepo")
	}

	var r0 domain.JobRepository
	if returnFunc, ok := ret.Get(0).(func() domain.JobRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.JobRepository)
		}
	}
	return r0
}

// MockStore_JobRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JobRepo'
type MockStore_JobRepo_Call struct {
	*mock.Call
}

// JobRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) JobRepo() *MockStore_JobRepo_Call {
	return &MockStore_JobRepo_Call{Call: _e.mock.On("JobRepo")}
}

func (_c *MockStore_JobRepo_Call) Run(run func()) *MockStore_JobRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_JobRepo_Call) Return(jobRepository domain.JobRepository) *MockStore_JobRepo_Call {
	_c.Call.Return(jobRepository)
	return _c
}

func (_c *MockStore_JobRepo_Call) RunAndReturn(run func() domain.JobRepository) *MockStore_JobRepo_Call {
	_c.Call.Return(run)
	return _c
}

// MetricTypeRepo provides a mock function for the type MockStore
func (_mock *MockStore) MetricTypeRepo() domain.MetricTypeRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MetricTypeRepo")
	}

	var r0 domain.MetricTypeRepository
	if returnFunc, ok := ret.Get(0).(func() domain.MetricTypeRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MetricTypeRepository)
		}
	}
	return r0
}

// MockStore_MetricTypeRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MetricTypeRepo'
type MockStore_MetricTypeRepo_Call struct {
	*mock.Call
}

// MetricTypeRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) MetricTypeRepo() *MockStore_MetricTypeRepo_Call {
	return &MockStore_MetricTypeRepo_Call{Call: _e.mock.On("MetricTypeRepo")}
}

func (_c *MockStore_MetricTypeRepo_Call) Run(run func()) *MockStore_MetricTypeRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_MetricTypeRepo_Call) Return(metricTypeRepository domain.MetricTypeRepository) *MockStore_MetricTypeRepo_Call {
	_c.Call.Return(metricTypeRepository)
	return _c
}

func (_c *MockStore_MetricTypeRepo_Call) RunAndReturn(run func() domain.MetricTypeRepository) *MockStore_MetricTypeRepo_Call {
	_c.Call.Return(run)
	return _c
}

// ParticipantRepo provides a mock function for the type MockStore
func (_mock *MockStore) ParticipantRepo() domain.ParticipantRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParticipantRepo")
	}

	var r0 domain.ParticipantRepository
	if returnFunc, ok := ret.Get(0).(func() domain.ParticipantRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ParticipantRepository)
		}
	}
	return r0
}

// MockStore_ParticipantRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParticipantRepo'
type MockStore_ParticipantRepo_Call struct {
	*mock.Call
}

// ParticipantRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) ParticipantRepo() *MockStore_ParticipantRepo_Call {
	return &MockStore_ParticipantRepo_Call{Call: _e.mock.On("ParticipantRepo")}
}

func (_c *MockStore_ParticipantRepo_Call) Run(run func()) *MockStore_ParticipantRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_ParticipantRepo_Call) Return(participantRepository domain.ParticipantRepository) *MockStore_ParticipantRepo_Call {
	_c.Call.Return(participantRepository)
	return _c
}

func (_c *MockStore_ParticipantRepo_Call) RunAndReturn(run func() domain.ParticipantRepository) *MockStore_ParticipantRepo_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceGroupRepo provides a mock function for the type MockStore
func (_mock *MockStore) ServiceGroupRepo() domain.ServiceGroupRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceGroupRepo")
	}

	var r0 domain.ServiceGroupRepository
	if returnFunc, ok := ret.Get(0).(func() domain.ServiceGroupRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ServiceGroupRepository)
		}
	}
	return r0
}

// MockStore_ServiceGroupRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceGroupRepo'
type MockStore_ServiceGroupRepo_Call struct {
	*mock.Call
}

// ServiceGroupRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) ServiceGroupRepo() *MockStore_ServiceGroupRepo_Call {
	return &MockStore_ServiceGroupRepo_Call{Call: _e.mock.On("ServiceGroupRepo")}
}

func (_c *MockStore_ServiceGroupRepo_Call) Run(run func()) *MockStore_ServiceGroupRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_ServiceGroupRepo_Call) Return(serviceGroupRepository domain.ServiceGroupRepository) *MockStore_ServiceGroupRepo_Call {
	_c.Call.Return(serviceGroupRepository)
	return _c
}

func (_c *MockStore_ServiceGroupRepo_Call) RunAndReturn(run func() domain.ServiceGroupRepository) *MockStore_ServiceGroupRepo_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceOptionRepo provides a mock function for the type MockStore
func (_mock *MockStore) ServiceOptionRepo() domain.ServiceOptionRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceOptionRepo")
	}

	var r0 domain.ServiceOptionRepository
	if returnFunc, ok := ret.Get(0).(func() domain.ServiceOptionRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ServiceOptionRepository)
		}
	}
	return r0
}

// MockStore_ServiceOptionRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceOptionRepo'
type MockStore_ServiceOptionRepo_Call struct {
	*mock.Call
}

// ServiceOptionRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) ServiceOptionRepo() *MockStore_ServiceOptionRepo_Call {
	return &MockStore_ServiceOptionRepo_Call{Call: _e.mock.On("ServiceOptionRepo")}
}

func (_c *MockStore_ServiceOptionRepo_Call) Run(run func()) *MockStore_ServiceOptionRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_ServiceOptionRepo_Call) Return(serviceOptionRepository domain.ServiceOptionRepository) *MockStore_ServiceOptionRepo_Call {
	_c.Call.Return(serviceOptionRepository)
	return _c
}

func (_c *MockStore_ServiceOptionRepo_Call) RunAndReturn(run func() domain.ServiceOptionRepository) *MockStore_ServiceOptionRepo_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceOptionTypeRepo provides a mock function for the type MockStore
func (_mock *MockStore) ServiceOptionTypeRepo() domain.ServiceOptionTypeRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceOptionTypeRepo")
	}

	var r0 domain.ServiceOptionTypeRepository
	if returnFunc, ok := ret.Get(0).(func() domain.ServiceOptionTypeRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ServiceOptionTypeRepository)
		}
	}
	return r0
}

// MockStore_ServiceOptionTypeRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceOptionTypeRepo'
type MockStore_ServiceOptionTypeRepo_Call struct {
	*mock.Call
}

// ServiceOptionTypeRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) ServiceOptionTypeRepo() *MockStore_ServiceOptionTypeRepo_Call {
	return &MockStore_ServiceOptionTypeRepo_Call{Call: _e.mock.On("ServiceOptionTypeRepo")}
}

func (_c *MockStore_ServiceOptionTypeRepo_Call) Run(run func()) *MockStore_ServiceOptionTypeRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_ServiceOptionTypeRepo_Call) Return(serviceOptionTypeRepository domain.ServiceOptionTypeRepository) *MockStore_ServiceOptionTypeRepo_Call {
	_c.Call.Return(serviceOptionTypeRepository)
	return _c
}

func (_c *MockStore_ServiceOptionTypeRepo_Call) RunAndReturn(run func() domain.ServiceOptionTypeRepository) *MockStore_ServiceOptionTypeRepo_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceRepo provides a mock function for the type MockStore
func (_mock *MockStore) ServiceRepo() domain.ServiceRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceRepo")
	}

	var r0 domain.ServiceRepository
	if returnFunc, ok := ret.Get(0).(func() domain.ServiceRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ServiceRepository)
		}
	}
	return r0
}

// MockStore_ServiceRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceRepo'
type MockStore_ServiceRepo_Call struct {
	*mock.Call
}

// ServiceRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) ServiceRepo() *MockStore_ServiceRepo_Call {
	return &MockStore_ServiceRepo_Call{Call: _e.mock.On("ServiceRepo")}
}

func (_c *MockStore_ServiceRepo_Call) Run(run func()) *MockStore_ServiceRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_ServiceRepo_Call) Return(serviceRepository domain.ServiceRepository) *MockStore_ServiceRepo_Call {
	_c.Call.Return(serviceRepository)
	return _c
}

func (_c *MockStore_ServiceRepo_Call) RunAndReturn(run func() domain.ServiceRepository) *MockStore_ServiceRepo_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceTypeRepo provides a mock function for the type MockStore
func (_mock *MockStore) ServiceTypeRepo() domain.ServiceTypeRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceTypeRepo")
	}

	var r0 domain.ServiceTypeRepository
	if returnFunc, ok := ret.Get(0).(func() domain.ServiceTypeRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ServiceTypeRepository)
		}
	}
	return r0
}

// MockStore_ServiceTypeRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceTypeRepo'
type MockStore_ServiceTypeRepo_Call struct {
	*mock.Call
}

// ServiceTypeRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) ServiceTypeRepo() *MockStore_ServiceTypeRepo_Call {
	return &MockStore_ServiceTypeRepo_Call{Call: _e.mock.On("ServiceTypeRepo")}
}

func (_c *MockStore_ServiceTypeRepo_Call) Run(run func()) *MockStore_ServiceTypeRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_ServiceTypeRepo_Call) Return(serviceTypeRepository domain.ServiceTypeRepository) *MockStore_ServiceTypeRepo_Call {
	_c.Call.Return(serviceTypeRepository)
	return _c
}

func (_c *MockStore_ServiceTypeRepo_Call) RunAndReturn(run func() domain.ServiceTypeRepository) *MockStore_ServiceTypeRepo_Call {
	_c.Call.Return(run)
	return _c
}

// TokenRepo provides a mock function for the type MockStore
func (_mock *MockStore) TokenRepo() domain.TokenRepository {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TokenRepo")
	}

	var r0 domain.TokenRepository
	if returnFunc, ok := ret.Get(0).(func() domain.TokenRepository); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.TokenRepository)
		}
	}
	return r0
}

// MockStore_TokenRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TokenRepo'
type MockStore_TokenRepo_Call struct {
	*mock.Call
}

// TokenRepo is a helper method to define mock.On call
func (_e *MockStore_Expecter) TokenRepo() *MockStore_TokenRepo_Call {
	return &MockStore_TokenRepo_Call{Call: _e.mock.On("TokenRepo")}
}

func (_c *MockStore_TokenRepo_Call) Run(run func()) *MockStore_TokenRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_TokenRepo_Call) Return(tokenRepository domain.TokenRepository) *MockStore_TokenRepo_Call {
	_c.Call.Return(tokenRepository)
	return _c
}

func (_c *MockStore_TokenRepo_Call) RunAndReturn(run func() domain.TokenRepository) *MockStore_TokenRepo_Call {
	_c.Call.Return(run)
	return _c
}
