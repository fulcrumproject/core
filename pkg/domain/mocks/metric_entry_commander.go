// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMetricEntryCommander creates a new instance of MockMetricEntryCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricEntryCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricEntryCommander {
	mock := &MockMetricEntryCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricEntryCommander is an autogenerated mock type for the MetricEntryCommander type
type MockMetricEntryCommander struct {
	mock.Mock
}

type MockMetricEntryCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricEntryCommander) EXPECT() *MockMetricEntryCommander_Expecter {
	return &MockMetricEntryCommander_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockMetricEntryCommander
func (_mock *MockMetricEntryCommander) Create(ctx context.Context, params domain.CreateMetricEntryParams) (*domain.MetricEntry, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.MetricEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateMetricEntryParams) (*domain.MetricEntry, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateMetricEntryParams) *domain.MetricEntry); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MetricEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CreateMetricEntryParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricEntryCommander_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMetricEntryCommander_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CreateMetricEntryParams
func (_e *MockMetricEntryCommander_Expecter) Create(ctx interface{}, params interface{}) *MockMetricEntryCommander_Create_Call {
	return &MockMetricEntryCommander_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockMetricEntryCommander_Create_Call) Run(run func(ctx context.Context, params domain.CreateMetricEntryParams)) *MockMetricEntryCommander_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateMetricEntryParams
		if args[1] != nil {
			arg1 = args[1].(domain.CreateMetricEntryParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricEntryCommander_Create_Call) Return(metricEntry *domain.MetricEntry, err error) *MockMetricEntryCommander_Create_Call {
	_c.Call.Return(metricEntry, err)
	return _c
}

func (_c *MockMetricEntryCommander_Create_Call) RunAndReturn(run func(ctx context.Context, params domain.CreateMetricEntryParams) (*domain.MetricEntry, error)) *MockMetricEntryCommander_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithAgentInstanceID provides a mock function for the type MockMetricEntryCommander
func (_mock *MockMetricEntryCommander) CreateWithAgentInstanceID(ctx context.Context, params domain.CreateMetricEntryWithAgentInstanceIDParams) (*domain.MetricEntry, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithAgentInstanceID")
	}

	var r0 *domain.MetricEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateMetricEntryWithAgentInstanceIDParams) (*domain.MetricEntry, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateMetricEntryWithAgentInstanceIDParams) *domain.MetricEntry); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.MetricEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CreateMetricEntryWithAgentInstanceIDParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricEntryCommander_CreateWithAgentInstanceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithAgentInstanceID'
type MockMetricEntryCommander_CreateWithAgentInstanceID_Call struct {
	*mock.Call
}

// CreateWithAgentInstanceID is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CreateMetricEntryWithAgentInstanceIDParams
func (_e *MockMetricEntryCommander_Expecter) CreateWithAgentInstanceID(ctx interface{}, params interface{}) *MockMetricEntryCommander_CreateWithAgentInstanceID_Call {
	return &MockMetricEntryCommander_CreateWithAgentInstanceID_Call{Call: _e.mock.On("CreateWithAgentInstanceID", ctx, params)}
}

func (_c *MockMetricEntryCommander_CreateWithAgentInstanceID_Call) Run(run func(ctx context.Context, params domain.CreateMetricEntryWithAgentInstanceIDParams)) *MockMetricEntryCommander_CreateWithAgentInstanceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateMetricEntryWithAgentInstanceIDParams
		if args[1] != nil {
			arg1 = args[1].(domain.CreateMetricEntryWithAgentInstanceIDParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricEntryCommander_CreateWithAgentInstanceID_Call) Return(metricEntry *domain.MetricEntry, err error) *MockMetricEntryCommander_CreateWithAgentInstanceID_Call {
	_c.Call.Return(metricEntry, err)
	return _c
}

func (_c *MockMetricEntryCommander_CreateWithAgentInstanceID_Call) RunAndReturn(run func(ctx context.Context, params domain.CreateMetricEntryWithAgentInstanceIDParams) (*domain.MetricEntry, error)) *MockMetricEntryCommander_CreateWithAgentInstanceID_Call {
	_c.Call.Return(run)
	return _c
}
