// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServiceOptionTypeCommander creates a new instance of MockServiceOptionTypeCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceOptionTypeCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceOptionTypeCommander {
	mock := &MockServiceOptionTypeCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceOptionTypeCommander is an autogenerated mock type for the ServiceOptionTypeCommander type
type MockServiceOptionTypeCommander struct {
	mock.Mock
}

type MockServiceOptionTypeCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceOptionTypeCommander) EXPECT() *MockServiceOptionTypeCommander_Expecter {
	return &MockServiceOptionTypeCommander_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockServiceOptionTypeCommander
func (_mock *MockServiceOptionTypeCommander) Create(ctx context.Context, params domain.CreateServiceOptionTypeParams) (*domain.ServiceOptionType, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.ServiceOptionType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServiceOptionTypeParams) (*domain.ServiceOptionType, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.CreateServiceOptionTypeParams) *domain.ServiceOptionType); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceOptionType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.CreateServiceOptionTypeParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionTypeCommander_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockServiceOptionTypeCommander_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.CreateServiceOptionTypeParams
func (_e *MockServiceOptionTypeCommander_Expecter) Create(ctx interface{}, params interface{}) *MockServiceOptionTypeCommander_Create_Call {
	return &MockServiceOptionTypeCommander_Create_Call{Call: _e.mock.On("Create", ctx, params)}
}

func (_c *MockServiceOptionTypeCommander_Create_Call) Run(run func(ctx context.Context, params domain.CreateServiceOptionTypeParams)) *MockServiceOptionTypeCommander_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.CreateServiceOptionTypeParams
		if args[1] != nil {
			arg1 = args[1].(domain.CreateServiceOptionTypeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionTypeCommander_Create_Call) Return(serviceOptionType *domain.ServiceOptionType, err error) *MockServiceOptionTypeCommander_Create_Call {
	_c.Call.Return(serviceOptionType, err)
	return _c
}

func (_c *MockServiceOptionTypeCommander_Create_Call) RunAndReturn(run func(ctx context.Context, params domain.CreateServiceOptionTypeParams) (*domain.ServiceOptionType, error)) *MockServiceOptionTypeCommander_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockServiceOptionTypeCommander
func (_mock *MockServiceOptionTypeCommander) Delete(ctx context.Context, id properties.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockServiceOptionTypeCommander_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockServiceOptionTypeCommander_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServiceOptionTypeCommander_Expecter) Delete(ctx interface{}, id interface{}) *MockServiceOptionTypeCommander_Delete_Call {
	return &MockServiceOptionTypeCommander_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockServiceOptionTypeCommander_Delete_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServiceOptionTypeCommander_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionTypeCommander_Delete_Call) Return(err error) *MockServiceOptionTypeCommander_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockServiceOptionTypeCommander_Delete_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) error) *MockServiceOptionTypeCommander_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockServiceOptionTypeCommander
func (_mock *MockServiceOptionTypeCommander) Update(ctx context.Context, params domain.UpdateServiceOptionTypeParams) (*domain.ServiceOptionType, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.ServiceOptionType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateServiceOptionTypeParams) (*domain.ServiceOptionType, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UpdateServiceOptionTypeParams) *domain.ServiceOptionType); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServiceOptionType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UpdateServiceOptionTypeParams) error); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceOptionTypeCommander_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockServiceOptionTypeCommander_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.UpdateServiceOptionTypeParams
func (_e *MockServiceOptionTypeCommander_Expecter) Update(ctx interface{}, params interface{}) *MockServiceOptionTypeCommander_Update_Call {
	return &MockServiceOptionTypeCommander_Update_Call{Call: _e.mock.On("Update", ctx, params)}
}

func (_c *MockServiceOptionTypeCommander_Update_Call) Run(run func(ctx context.Context, params domain.UpdateServiceOptionTypeParams)) *MockServiceOptionTypeCommander_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UpdateServiceOptionTypeParams
		if args[1] != nil {
			arg1 = args[1].(domain.UpdateServiceOptionTypeParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceOptionTypeCommander_Update_Call) Return(serviceOptionType *domain.ServiceOptionType, err error) *MockServiceOptionTypeCommander_Update_Call {
	_c.Call.Return(serviceOptionType, err)
	return _c
}

func (_c *MockServiceOptionTypeCommander_Update_Call) RunAndReturn(run func(ctx context.Context, params domain.UpdateServiceOptionTypeParams) (*domain.ServiceOptionType, error)) *MockServiceOptionTypeCommander_Update_Call {
	_c.Call.Return(run)
	return _c
}
