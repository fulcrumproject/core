// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/domain"
	"github.com/fulcrumproject/core/pkg/properties"
	mock "github.com/stretchr/testify/mock"
)

// NewMockServicePoolSetQuerier creates a new instance of MockServicePoolSetQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServicePoolSetQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServicePoolSetQuerier {
	mock := &MockServicePoolSetQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServicePoolSetQuerier is an autogenerated mock type for the ServicePoolSetQuerier type
type MockServicePoolSetQuerier struct {
	mock.Mock
}

type MockServicePoolSetQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServicePoolSetQuerier) EXPECT() *MockServicePoolSetQuerier_Expecter {
	return &MockServicePoolSetQuerier_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function for the type MockServicePoolSetQuerier
func (_mock *MockServicePoolSetQuerier) Exists(ctx context.Context, id properties.UUID) (bool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (bool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) bool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolSetQuerier_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockServicePoolSetQuerier_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolSetQuerier_Expecter) Exists(ctx interface{}, id interface{}) *MockServicePoolSetQuerier_Exists_Call {
	return &MockServicePoolSetQuerier_Exists_Call{Call: _e.mock.On("Exists", ctx, id)}
}

func (_c *MockServicePoolSetQuerier_Exists_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolSetQuerier_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolSetQuerier_Exists_Call) Return(b bool, err error) *MockServicePoolSetQuerier_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockServicePoolSetQuerier_Exists_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (bool, error)) *MockServicePoolSetQuerier_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockServicePoolSetQuerier
func (_mock *MockServicePoolSetQuerier) Get(ctx context.Context, id properties.UUID) (*domain.ServicePoolSet, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.ServicePoolSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) (*domain.ServicePoolSet, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) *domain.ServicePoolSet); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ServicePoolSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolSetQuerier_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockServicePoolSetQuerier_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id properties.UUID
func (_e *MockServicePoolSetQuerier_Expecter) Get(ctx interface{}, id interface{}) *MockServicePoolSetQuerier_Get_Call {
	return &MockServicePoolSetQuerier_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockServicePoolSetQuerier_Get_Call) Run(run func(ctx context.Context, id properties.UUID)) *MockServicePoolSetQuerier_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolSetQuerier_Get_Call) Return(servicePoolSet *domain.ServicePoolSet, err error) *MockServicePoolSetQuerier_Get_Call {
	_c.Call.Return(servicePoolSet, err)
	return _c
}

func (_c *MockServicePoolSetQuerier_Get_Call) RunAndReturn(run func(ctx context.Context, id properties.UUID) (*domain.ServicePoolSet, error)) *MockServicePoolSetQuerier_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockServicePoolSetQuerier
func (_mock *MockServicePoolSetQuerier) List(ctx context.Context) ([]*domain.ServicePoolSet, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.ServicePoolSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*domain.ServicePoolSet, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*domain.ServicePoolSet); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServicePoolSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolSetQuerier_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockServicePoolSetQuerier_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServicePoolSetQuerier_Expecter) List(ctx interface{}) *MockServicePoolSetQuerier_List_Call {
	return &MockServicePoolSetQuerier_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockServicePoolSetQuerier_List_Call) Run(run func(ctx context.Context)) *MockServicePoolSetQuerier_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServicePoolSetQuerier_List_Call) Return(servicePoolSets []*domain.ServicePoolSet, err error) *MockServicePoolSetQuerier_List_Call {
	_c.Call.Return(servicePoolSets, err)
	return _c
}

func (_c *MockServicePoolSetQuerier_List_Call) RunAndReturn(run func(ctx context.Context) ([]*domain.ServicePoolSet, error)) *MockServicePoolSetQuerier_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProvider provides a mock function for the type MockServicePoolSetQuerier
func (_mock *MockServicePoolSetQuerier) ListByProvider(ctx context.Context, providerID properties.UUID) ([]*domain.ServicePoolSet, error) {
	ret := _mock.Called(ctx, providerID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProvider")
	}

	var r0 []*domain.ServicePoolSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) ([]*domain.ServicePoolSet, error)); ok {
		return returnFunc(ctx, providerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, properties.UUID) []*domain.ServicePoolSet); ok {
		r0 = returnFunc(ctx, providerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ServicePoolSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, properties.UUID) error); ok {
		r1 = returnFunc(ctx, providerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServicePoolSetQuerier_ListByProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProvider'
type MockServicePoolSetQuerier_ListByProvider_Call struct {
	*mock.Call
}

// ListByProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - providerID properties.UUID
func (_e *MockServicePoolSetQuerier_Expecter) ListByProvider(ctx interface{}, providerID interface{}) *MockServicePoolSetQuerier_ListByProvider_Call {
	return &MockServicePoolSetQuerier_ListByProvider_Call{Call: _e.mock.On("ListByProvider", ctx, providerID)}
}

func (_c *MockServicePoolSetQuerier_ListByProvider_Call) Run(run func(ctx context.Context, providerID properties.UUID)) *MockServicePoolSetQuerier_ListByProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 properties.UUID
		if args[1] != nil {
			arg1 = args[1].(properties.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServicePoolSetQuerier_ListByProvider_Call) Return(servicePoolSets []*domain.ServicePoolSet, err error) *MockServicePoolSetQuerier_ListByProvider_Call {
	_c.Call.Return(servicePoolSets, err)
	return _c
}

func (_c *MockServicePoolSetQuerier_ListByProvider_Call) RunAndReturn(run func(ctx context.Context, providerID properties.UUID) ([]*domain.ServicePoolSet, error)) *MockServicePoolSetQuerier_ListByProvider_Call {
	_c.Call.Return(run)
	return _c
}
