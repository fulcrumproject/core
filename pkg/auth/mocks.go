// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockObjectScope creates a new instance of MockObjectScope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectScope(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectScope {
	mock := &MockObjectScope{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockObjectScope is an autogenerated mock type for the ObjectScope type
type MockObjectScope struct {
	mock.Mock
}

type MockObjectScope_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectScope) EXPECT() *MockObjectScope_Expecter {
	return &MockObjectScope_Expecter{mock: &_m.Mock}
}

// Matches provides a mock function for the type MockObjectScope
func (_mock *MockObjectScope) Matches(identity *Identity) bool {
	ret := _mock.Called(identity)

	if len(ret) == 0 {
		panic("no return value specified for Matches")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(*Identity) bool); ok {
		r0 = returnFunc(identity)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockObjectScope_Matches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Matches'
type MockObjectScope_Matches_Call struct {
	*mock.Call
}

// Matches is a helper method to define mock.On call
//   - identity *Identity
func (_e *MockObjectScope_Expecter) Matches(identity interface{}) *MockObjectScope_Matches_Call {
	return &MockObjectScope_Matches_Call{Call: _e.mock.On("Matches", identity)}
}

func (_c *MockObjectScope_Matches_Call) Run(run func(identity *Identity)) *MockObjectScope_Matches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Identity
		if args[0] != nil {
			arg0 = args[0].(*Identity)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObjectScope_Matches_Call) Return(b bool) *MockObjectScope_Matches_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockObjectScope_Matches_Call) RunAndReturn(run func(identity *Identity) bool) *MockObjectScope_Matches_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthenticator creates a new instance of MockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticator {
	mock := &MockAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthenticator is an autogenerated mock type for the Authenticator type
type MockAuthenticator struct {
	mock.Mock
}

type MockAuthenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticator) EXPECT() *MockAuthenticator_Expecter {
	return &MockAuthenticator_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockAuthenticator
func (_mock *MockAuthenticator) Authenticate(ctx context.Context, token string) (*Identity, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *Identity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*Identity, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *Identity); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Identity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthenticator_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthenticator_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockAuthenticator_Expecter) Authenticate(ctx interface{}, token interface{}) *MockAuthenticator_Authenticate_Call {
	return &MockAuthenticator_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, token)}
}

func (_c *MockAuthenticator_Authenticate_Call) Run(run func(ctx context.Context, token string)) *MockAuthenticator_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthenticator_Authenticate_Call) Return(identity *Identity, err error) *MockAuthenticator_Authenticate_Call {
	_c.Call.Return(identity, err)
	return _c
}

func (_c *MockAuthenticator_Authenticate_Call) RunAndReturn(run func(ctx context.Context, token string) (*Identity, error)) *MockAuthenticator_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Health provides a mock function for the type MockAuthenticator
func (_mock *MockAuthenticator) Health(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthenticator_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type MockAuthenticator_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthenticator_Expecter) Health(ctx interface{}) *MockAuthenticator_Health_Call {
	return &MockAuthenticator_Health_Call{Call: _e.mock.On("Health", ctx)}
}

func (_c *MockAuthenticator_Health_Call) Run(run func(ctx context.Context)) *MockAuthenticator_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthenticator_Health_Call) Return(err error) *MockAuthenticator_Health_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthenticator_Health_Call) RunAndReturn(run func(ctx context.Context) error) *MockAuthenticator_Health_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthorizer creates a new instance of MockAuthorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorizer {
	mock := &MockAuthorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthorizer is an autogenerated mock type for the Authorizer type
type MockAuthorizer struct {
	mock.Mock
}

type MockAuthorizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorizer) EXPECT() *MockAuthorizer_Expecter {
	return &MockAuthorizer_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function for the type MockAuthorizer
func (_mock *MockAuthorizer) Authorize(identity *Identity, action Action, oject ObjectType, objectScope ObjectScope) error {
	ret := _mock.Called(identity, action, oject, objectScope)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*Identity, Action, ObjectType, ObjectScope) error); ok {
		r0 = returnFunc(identity, action, oject, objectScope)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthorizer_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockAuthorizer_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - identity *Identity
//   - action Action
//   - oject ObjectType
//   - objectScope ObjectScope
func (_e *MockAuthorizer_Expecter) Authorize(identity interface{}, action interface{}, oject interface{}, objectScope interface{}) *MockAuthorizer_Authorize_Call {
	return &MockAuthorizer_Authorize_Call{Call: _e.mock.On("Authorize", identity, action, oject, objectScope)}
}

func (_c *MockAuthorizer_Authorize_Call) Run(run func(identity *Identity, action Action, oject ObjectType, objectScope ObjectScope)) *MockAuthorizer_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *Identity
		if args[0] != nil {
			arg0 = args[0].(*Identity)
		}
		var arg1 Action
		if args[1] != nil {
			arg1 = args[1].(Action)
		}
		var arg2 ObjectType
		if args[2] != nil {
			arg2 = args[2].(ObjectType)
		}
		var arg3 ObjectScope
		if args[3] != nil {
			arg3 = args[3].(ObjectScope)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAuthorizer_Authorize_Call) Return(err error) *MockAuthorizer_Authorize_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthorizer_Authorize_Call) RunAndReturn(run func(identity *Identity, action Action, oject ObjectType, objectScope ObjectScope) error) *MockAuthorizer_Authorize_Call {
	_c.Call.Return(run)
	return _c
}
