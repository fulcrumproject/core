// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/fulcrumproject/core/pkg/auth"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthenticator creates a new instance of MockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticator {
	mock := &MockAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthenticator is an autogenerated mock type for the Authenticator type
type MockAuthenticator struct {
	mock.Mock
}

type MockAuthenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticator) EXPECT() *MockAuthenticator_Expecter {
	return &MockAuthenticator_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type MockAuthenticator
func (_mock *MockAuthenticator) Authenticate(ctx context.Context, token string) (*auth.Identity, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *auth.Identity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*auth.Identity, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *auth.Identity); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Identity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthenticator_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthenticator_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockAuthenticator_Expecter) Authenticate(ctx interface{}, token interface{}) *MockAuthenticator_Authenticate_Call {
	return &MockAuthenticator_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, token)}
}

func (_c *MockAuthenticator_Authenticate_Call) Run(run func(ctx context.Context, token string)) *MockAuthenticator_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAuthenticator_Authenticate_Call) Return(identity *auth.Identity, err error) *MockAuthenticator_Authenticate_Call {
	_c.Call.Return(identity, err)
	return _c
}

func (_c *MockAuthenticator_Authenticate_Call) RunAndReturn(run func(ctx context.Context, token string) (*auth.Identity, error)) *MockAuthenticator_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Health provides a mock function for the type MockAuthenticator
func (_mock *MockAuthenticator) Health(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAuthenticator_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type MockAuthenticator_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthenticator_Expecter) Health(ctx interface{}) *MockAuthenticator_Health_Call {
	return &MockAuthenticator_Health_Call{Call: _e.mock.On("Health", ctx)}
}

func (_c *MockAuthenticator_Health_Call) Run(run func(ctx context.Context)) *MockAuthenticator_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAuthenticator_Health_Call) Return(err error) *MockAuthenticator_Health_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAuthenticator_Health_Call) RunAndReturn(run func(ctx context.Context) error) *MockAuthenticator_Health_Call {
	_c.Call.Return(run)
	return _c
}
