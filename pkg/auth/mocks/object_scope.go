// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/fulcrumproject/core/pkg/auth"
	mock "github.com/stretchr/testify/mock"
)

// NewMockObjectScope creates a new instance of MockObjectScope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectScope(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectScope {
	mock := &MockObjectScope{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockObjectScope is an autogenerated mock type for the ObjectScope type
type MockObjectScope struct {
	mock.Mock
}

type MockObjectScope_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectScope) EXPECT() *MockObjectScope_Expecter {
	return &MockObjectScope_Expecter{mock: &_m.Mock}
}

// Matches provides a mock function for the type MockObjectScope
func (_mock *MockObjectScope) Matches(identity *auth.Identity) bool {
	ret := _mock.Called(identity)

	if len(ret) == 0 {
		panic("no return value specified for Matches")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(*auth.Identity) bool); ok {
		r0 = returnFunc(identity)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockObjectScope_Matches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Matches'
type MockObjectScope_Matches_Call struct {
	*mock.Call
}

// Matches is a helper method to define mock.On call
//   - identity *auth.Identity
func (_e *MockObjectScope_Expecter) Matches(identity interface{}) *MockObjectScope_Matches_Call {
	return &MockObjectScope_Matches_Call{Call: _e.mock.On("Matches", identity)}
}

func (_c *MockObjectScope_Matches_Call) Run(run func(identity *auth.Identity)) *MockObjectScope_Matches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *auth.Identity
		if args[0] != nil {
			arg0 = args[0].(*auth.Identity)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObjectScope_Matches_Call) Return(b bool) *MockObjectScope_Matches_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockObjectScope_Matches_Call) RunAndReturn(run func(identity *auth.Identity) bool) *MockObjectScope_Matches_Call {
	_c.Call.Return(run)
	return _c
}
