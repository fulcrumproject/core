// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package schema

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockVault creates a new instance of MockVault. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVault(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVault {
	mock := &MockVault{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVault is an autogenerated mock type for the Vault type
type MockVault struct {
	mock.Mock
}

type MockVault_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVault) EXPECT() *MockVault_Expecter {
	return &MockVault_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockVault
func (_mock *MockVault) Delete(ctx context.Context, reference string) error {
	ret := _mock.Called(ctx, reference)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, reference)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVault_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockVault_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - reference string
func (_e *MockVault_Expecter) Delete(ctx interface{}, reference interface{}) *MockVault_Delete_Call {
	return &MockVault_Delete_Call{Call: _e.mock.On("Delete", ctx, reference)}
}

func (_c *MockVault_Delete_Call) Run(run func(ctx context.Context, reference string)) *MockVault_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVault_Delete_Call) Return(err error) *MockVault_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVault_Delete_Call) RunAndReturn(run func(ctx context.Context, reference string) error) *MockVault_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockVault
func (_mock *MockVault) Get(ctx context.Context, reference string) (any, error) {
	ret := _mock.Called(ctx, reference)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (any, error)); ok {
		return returnFunc(ctx, reference)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) any); ok {
		r0 = returnFunc(ctx, reference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, reference)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVault_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockVault_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - reference string
func (_e *MockVault_Expecter) Get(ctx interface{}, reference interface{}) *MockVault_Get_Call {
	return &MockVault_Get_Call{Call: _e.mock.On("Get", ctx, reference)}
}

func (_c *MockVault_Get_Call) Run(run func(ctx context.Context, reference string)) *MockVault_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVault_Get_Call) Return(v any, err error) *MockVault_Get_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockVault_Get_Call) RunAndReturn(run func(ctx context.Context, reference string) (any, error)) *MockVault_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockVault
func (_mock *MockVault) Save(ctx context.Context, reference string, value any, metadata map[string]any) error {
	ret := _mock.Called(ctx, reference, value, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any, map[string]any) error); ok {
		r0 = returnFunc(ctx, reference, value, metadata)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVault_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockVault_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - reference string
//   - value any
//   - metadata map[string]any
func (_e *MockVault_Expecter) Save(ctx interface{}, reference interface{}, value interface{}, metadata interface{}) *MockVault_Save_Call {
	return &MockVault_Save_Call{Call: _e.mock.On("Save", ctx, reference, value, metadata)}
}

func (_c *MockVault_Save_Call) Run(run func(ctx context.Context, reference string, value any, metadata map[string]any)) *MockVault_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 map[string]any
		if args[3] != nil {
			arg3 = args[3].(map[string]any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockVault_Save_Call) Return(err error) *MockVault_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVault_Save_Call) RunAndReturn(run func(ctx context.Context, reference string, value any, metadata map[string]any) error) *MockVault_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPropertyValidator creates a new instance of MockPropertyValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPropertyValidator[C any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPropertyValidator[C] {
	mock := &MockPropertyValidator[C]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPropertyValidator is an autogenerated mock type for the PropertyValidator type
type MockPropertyValidator[C any] struct {
	mock.Mock
}

type MockPropertyValidator_Expecter[C any] struct {
	mock *mock.Mock
}

func (_m *MockPropertyValidator[C]) EXPECT() *MockPropertyValidator_Expecter[C] {
	return &MockPropertyValidator_Expecter[C]{mock: &_m.Mock}
}

// Validate provides a mock function for the type MockPropertyValidator
func (_mock *MockPropertyValidator[C]) Validate(ctx context.Context, schemaCtx C, operation Operation, propPath string, oldValue any, newValue any, config map[string]any) error {
	ret := _mock.Called(ctx, schemaCtx, operation, propPath, oldValue, newValue, config)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, C, Operation, string, any, any, map[string]any) error); ok {
		r0 = returnFunc(ctx, schemaCtx, operation, propPath, oldValue, newValue, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPropertyValidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockPropertyValidator_Validate_Call[C any] struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - schemaCtx C
//   - operation Operation
//   - propPath string
//   - oldValue any
//   - newValue any
//   - config map[string]any
func (_e *MockPropertyValidator_Expecter[C]) Validate(ctx interface{}, schemaCtx interface{}, operation interface{}, propPath interface{}, oldValue interface{}, newValue interface{}, config interface{}) *MockPropertyValidator_Validate_Call[C] {
	return &MockPropertyValidator_Validate_Call[C]{Call: _e.mock.On("Validate", ctx, schemaCtx, operation, propPath, oldValue, newValue, config)}
}

func (_c *MockPropertyValidator_Validate_Call[C]) Run(run func(ctx context.Context, schemaCtx C, operation Operation, propPath string, oldValue any, newValue any, config map[string]any)) *MockPropertyValidator_Validate_Call[C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 C
		if args[1] != nil {
			arg1 = args[1].(C)
		}
		var arg2 Operation
		if args[2] != nil {
			arg2 = args[2].(Operation)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 any
		if args[4] != nil {
			arg4 = args[4].(any)
		}
		var arg5 any
		if args[5] != nil {
			arg5 = args[5].(any)
		}
		var arg6 map[string]any
		if args[6] != nil {
			arg6 = args[6].(map[string]any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockPropertyValidator_Validate_Call[C]) Return(err error) *MockPropertyValidator_Validate_Call[C] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPropertyValidator_Validate_Call[C]) RunAndReturn(run func(ctx context.Context, schemaCtx C, operation Operation, propPath string, oldValue any, newValue any, config map[string]any) error) *MockPropertyValidator_Validate_Call[C] {
	_c.Call.Return(run)
	return _c
}

// ValidateConfig provides a mock function for the type MockPropertyValidator
func (_mock *MockPropertyValidator[C]) ValidateConfig(propPath string, config map[string]any) error {
	ret := _mock.Called(propPath, config)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any) error); ok {
		r0 = returnFunc(propPath, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPropertyValidator_ValidateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateConfig'
type MockPropertyValidator_ValidateConfig_Call[C any] struct {
	*mock.Call
}

// ValidateConfig is a helper method to define mock.On call
//   - propPath string
//   - config map[string]any
func (_e *MockPropertyValidator_Expecter[C]) ValidateConfig(propPath interface{}, config interface{}) *MockPropertyValidator_ValidateConfig_Call[C] {
	return &MockPropertyValidator_ValidateConfig_Call[C]{Call: _e.mock.On("ValidateConfig", propPath, config)}
}

func (_c *MockPropertyValidator_ValidateConfig_Call[C]) Run(run func(propPath string, config map[string]any)) *MockPropertyValidator_ValidateConfig_Call[C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPropertyValidator_ValidateConfig_Call[C]) Return(err error) *MockPropertyValidator_ValidateConfig_Call[C] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPropertyValidator_ValidateConfig_Call[C]) RunAndReturn(run func(propPath string, config map[string]any) error) *MockPropertyValidator_ValidateConfig_Call[C] {
	_c.Call.Return(run)
	return _c
}

// NewMockSchemaValidator creates a new instance of MockSchemaValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSchemaValidator[C any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSchemaValidator[C] {
	mock := &MockSchemaValidator[C]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSchemaValidator is an autogenerated mock type for the SchemaValidator type
type MockSchemaValidator[C any] struct {
	mock.Mock
}

type MockSchemaValidator_Expecter[C any] struct {
	mock *mock.Mock
}

func (_m *MockSchemaValidator[C]) EXPECT() *MockSchemaValidator_Expecter[C] {
	return &MockSchemaValidator_Expecter[C]{mock: &_m.Mock}
}

// Validate provides a mock function for the type MockSchemaValidator
func (_mock *MockSchemaValidator[C]) Validate(ctx context.Context, schemaCtx C, operation Operation, oldProperties map[string]any, newProperties map[string]any, config map[string]any) error {
	ret := _mock.Called(ctx, schemaCtx, operation, oldProperties, newProperties, config)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, C, Operation, map[string]any, map[string]any, map[string]any) error); ok {
		r0 = returnFunc(ctx, schemaCtx, operation, oldProperties, newProperties, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSchemaValidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockSchemaValidator_Validate_Call[C any] struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - schemaCtx C
//   - operation Operation
//   - oldProperties map[string]any
//   - newProperties map[string]any
//   - config map[string]any
func (_e *MockSchemaValidator_Expecter[C]) Validate(ctx interface{}, schemaCtx interface{}, operation interface{}, oldProperties interface{}, newProperties interface{}, config interface{}) *MockSchemaValidator_Validate_Call[C] {
	return &MockSchemaValidator_Validate_Call[C]{Call: _e.mock.On("Validate", ctx, schemaCtx, operation, oldProperties, newProperties, config)}
}

func (_c *MockSchemaValidator_Validate_Call[C]) Run(run func(ctx context.Context, schemaCtx C, operation Operation, oldProperties map[string]any, newProperties map[string]any, config map[string]any)) *MockSchemaValidator_Validate_Call[C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 C
		if args[1] != nil {
			arg1 = args[1].(C)
		}
		var arg2 Operation
		if args[2] != nil {
			arg2 = args[2].(Operation)
		}
		var arg3 map[string]any
		if args[3] != nil {
			arg3 = args[3].(map[string]any)
		}
		var arg4 map[string]any
		if args[4] != nil {
			arg4 = args[4].(map[string]any)
		}
		var arg5 map[string]any
		if args[5] != nil {
			arg5 = args[5].(map[string]any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockSchemaValidator_Validate_Call[C]) Return(err error) *MockSchemaValidator_Validate_Call[C] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSchemaValidator_Validate_Call[C]) RunAndReturn(run func(ctx context.Context, schemaCtx C, operation Operation, oldProperties map[string]any, newProperties map[string]any, config map[string]any) error) *MockSchemaValidator_Validate_Call[C] {
	_c.Call.Return(run)
	return _c
}

// ValidateConfig provides a mock function for the type MockSchemaValidator
func (_mock *MockSchemaValidator[C]) ValidateConfig(config map[string]any) error {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(map[string]any) error); ok {
		r0 = returnFunc(config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSchemaValidator_ValidateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateConfig'
type MockSchemaValidator_ValidateConfig_Call[C any] struct {
	*mock.Call
}

// ValidateConfig is a helper method to define mock.On call
//   - config map[string]any
func (_e *MockSchemaValidator_Expecter[C]) ValidateConfig(config interface{}) *MockSchemaValidator_ValidateConfig_Call[C] {
	return &MockSchemaValidator_ValidateConfig_Call[C]{Call: _e.mock.On("ValidateConfig", config)}
}

func (_c *MockSchemaValidator_ValidateConfig_Call[C]) Run(run func(config map[string]any)) *MockSchemaValidator_ValidateConfig_Call[C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]any
		if args[0] != nil {
			arg0 = args[0].(map[string]any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSchemaValidator_ValidateConfig_Call[C]) Return(err error) *MockSchemaValidator_ValidateConfig_Call[C] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSchemaValidator_ValidateConfig_Call[C]) RunAndReturn(run func(config map[string]any) error) *MockSchemaValidator_ValidateConfig_Call[C] {
	_c.Call.Return(run)
	return _c
}

// NewMockGenerator creates a new instance of MockGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenerator[C any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenerator[C] {
	mock := &MockGenerator[C]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGenerator is an autogenerated mock type for the Generator type
type MockGenerator[C any] struct {
	mock.Mock
}

type MockGenerator_Expecter[C any] struct {
	mock *mock.Mock
}

func (_m *MockGenerator[C]) EXPECT() *MockGenerator_Expecter[C] {
	return &MockGenerator_Expecter[C]{mock: &_m.Mock}
}

// Generate provides a mock function for the type MockGenerator
func (_mock *MockGenerator[C]) Generate(ctx context.Context, schemaCtx C, propPath string, currentValue any, config map[string]any) (any, bool, error) {
	ret := _mock.Called(ctx, schemaCtx, propPath, currentValue, config)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 any
	var r1 bool
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, C, string, any, map[string]any) (any, bool, error)); ok {
		return returnFunc(ctx, schemaCtx, propPath, currentValue, config)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, C, string, any, map[string]any) any); ok {
		r0 = returnFunc(ctx, schemaCtx, propPath, currentValue, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, C, string, any, map[string]any) bool); ok {
		r1 = returnFunc(ctx, schemaCtx, propPath, currentValue, config)
	} else {
		r1 = ret.Get(1).(bool)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, C, string, any, map[string]any) error); ok {
		r2 = returnFunc(ctx, schemaCtx, propPath, currentValue, config)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockGenerator_Generate_Call[C any] struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - schemaCtx C
//   - propPath string
//   - currentValue any
//   - config map[string]any
func (_e *MockGenerator_Expecter[C]) Generate(ctx interface{}, schemaCtx interface{}, propPath interface{}, currentValue interface{}, config interface{}) *MockGenerator_Generate_Call[C] {
	return &MockGenerator_Generate_Call[C]{Call: _e.mock.On("Generate", ctx, schemaCtx, propPath, currentValue, config)}
}

func (_c *MockGenerator_Generate_Call[C]) Run(run func(ctx context.Context, schemaCtx C, propPath string, currentValue any, config map[string]any)) *MockGenerator_Generate_Call[C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 C
		if args[1] != nil {
			arg1 = args[1].(C)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		var arg4 map[string]any
		if args[4] != nil {
			arg4 = args[4].(map[string]any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockGenerator_Generate_Call[C]) Return(v any, b bool, err error) *MockGenerator_Generate_Call[C] {
	_c.Call.Return(v, b, err)
	return _c
}

func (_c *MockGenerator_Generate_Call[C]) RunAndReturn(run func(ctx context.Context, schemaCtx C, propPath string, currentValue any, config map[string]any) (any, bool, error)) *MockGenerator_Generate_Call[C] {
	_c.Call.Return(run)
	return _c
}

// ValidateConfig provides a mock function for the type MockGenerator
func (_mock *MockGenerator[C]) ValidateConfig(propPath string, config map[string]any) error {
	ret := _mock.Called(propPath, config)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]any) error); ok {
		r0 = returnFunc(propPath, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGenerator_ValidateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateConfig'
type MockGenerator_ValidateConfig_Call[C any] struct {
	*mock.Call
}

// ValidateConfig is a helper method to define mock.On call
//   - propPath string
//   - config map[string]any
func (_e *MockGenerator_Expecter[C]) ValidateConfig(propPath interface{}, config interface{}) *MockGenerator_ValidateConfig_Call[C] {
	return &MockGenerator_ValidateConfig_Call[C]{Call: _e.mock.On("ValidateConfig", propPath, config)}
}

func (_c *MockGenerator_ValidateConfig_Call[C]) Run(run func(propPath string, config map[string]any)) *MockGenerator_ValidateConfig_Call[C] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockGenerator_ValidateConfig_Call[C]) Return(err error) *MockGenerator_ValidateConfig_Call[C] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGenerator_ValidateConfig_Call[C]) RunAndReturn(run func(propPath string, config map[string]any) error) *MockGenerator_ValidateConfig_Call[C] {
	_c.Call.Return(run)
	return _c
}
