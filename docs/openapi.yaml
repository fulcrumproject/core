openapi: 3.1.0
info:
  title: Fulcrum Core API
  description: A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
  version: 1.0.0
  contact:
    name: Fulcrum Project
    url: https://fulcrumproject.org
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

tags:
  - name: Participants
    description: Cloud service participant management
  - name: Agents
    description: Agent and agent type management
  - name: Services
    description: Service, service type, and service group management
  - name: Jobs
    description: Job queue and processing
  - name: Metrics
    description: Metrics collection and management
  - name: Event
    description: Event logging
  - name: Tokens
    description: Authentication token management

servers:
  - url: https://api.fulcrum.testudosrl.dev/api/v1
    description: Development server

# Default security for all operations
security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: oauth2
      description: Role-based authentication using bearer tokens
      flows:
        implicit:
          authorizationUrl: https://api.fulcrum.testudosrl.dev/oauth/authorize
          scopes:
            admin: System administrator with unrestricted access
            participant: Participant administrator that can act as both provider and consumer
            agent: Agent role with access to specific operations

  x-auth-roles:
    admin:
      description: System administrator with unrestricted access
    participant:
      description: Participant administrator that can act as both provider and consumer
    agent:
      description: Agent role with access to specific operations

  schemas:
    PaginationParams:
      type: object
      properties:
        page:
          type: integer
          description: The page number (1-based)
          default: 1
        pageSize:
          type: integer
          description: The number of items per page
          default: 20

    ErrorRes:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Error message
          example: "Invalid request parameters"
        details:
          type: string
          description: Additional error details
          example: "The field 'name' is required"

    properties.UUID:
      type: string
      format: uuid
      example: "123e4567-e89b-12d3-a456-426614174000"

    JSONObject:
      type: object
      additionalProperties: true
      description: A generic properties.JSON object

    # Participant schemas
    ParticipantReq:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          example: "Test Participant"
        status:
          $ref: "#/components/schemas/ParticipantStatus"

    ParticipantRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: "Test Participant"
        status:
          $ref: "#/components/schemas/ParticipantStatus"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ParticipantStatus:
      type: string
      enum: [Enabled, Disabled]

    # Token schemas
    AuthRole:
      type: string
      enum: [admin, participant, agent]
      description: Access role for the token

    TokenReq:
      type: object
      required:
        - name
        - role
        - expireAt
      properties:
        name:
          type: string
          example: "API Access Token"
        role:
          $ref: "#/components/schemas/AuthRole"
        expireAt:
          type: string
          format: date-time
          example: "2025-12-31T23:59:59Z"
        scopeId:
          $ref: "#/components/schemas/properties.UUID"
          description: "Required for participant and agent roles. For participant role - the participant ID; for agent role - the agent ID"

    TokenRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: "API Access Token"
        role:
          $ref: "#/components/schemas/AuthRole"
        expireAt:
          type: string
          format: date-time
        scopeId:
          $ref: "#/components/schemas/properties.UUID"
          description: "For participant role - the participant ID; for agent role - the agent ID"
        agentId:
          $ref: "#/components/schemas/properties.UUID"
          description: "For agent role tokens only - the agent ID"
        participantId:
          $ref: "#/components/schemas/properties.UUID"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        value:
          type: string
          description: "Plain token value. Only returned during token creation or regeneration"
          example: "eyJhbGciOiJIUzI1NiIsInR5c..."

    # Agent schemas
    AgentStatus:
      type: string
      enum: [New, Connected, Disconnected, Error, Disabled]

    CreateAgentReq:
      type: object
      required:
        - name
        - providerId
        - agentTypeId
      properties:
        name:
          type: string
          example: "aws-agent-01"
        providerId:
          $ref: "#/components/schemas/properties.UUID"
          description: "The participant ID that owns this agent"
        agentTypeId:
          $ref: "#/components/schemas/properties.UUID"
          description: "The agent type ID"
        tags:
          type: array
          items:
            type: string
          example: ["gpu", "high-memory", "ssd"]
          description: "Tags representing capabilities or certifications of this agent"
        configuration:
          $ref: "#/components/schemas/JSONObject"
          description: "Agent-specific configuration parameters"
          example:
            timeout: 30
            retries: 3
            environment: "production"

    UpdateAgentReq:
      type: object
      properties:
        name:
          type: string
          example: "aws-agent-01"
        status:
          $ref: "#/components/schemas/AgentStatus"
        tags:
          type: array
          items:
            type: string
          example: ["gpu", "high-memory", "ssd"]
          description: "Tags representing capabilities or certifications of this agent"
        configuration:
          $ref: "#/components/schemas/JSONObject"
          description: "Agent-specific configuration parameters"
          example:
            timeout: 60
            retries: 5
            environment: "staging"

    AgentRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: "aws-agent-01"
        status:
          $ref: "#/components/schemas/AgentStatus"
        providerId:
          $ref: "#/components/schemas/properties.UUID"
        agentTypeId:
          $ref: "#/components/schemas/properties.UUID"
        tags:
          type: array
          items:
            type: string
          example: ["gpu", "high-memory", "ssd"]
        configuration:
          $ref: "#/components/schemas/JSONObject"
          description: "Agent-specific configuration parameters"
          example:
            timeout: 30
            retries: 3
            environment: "production"
        participant:
          $ref: "#/components/schemas/ParticipantRes"
        agentType:
          $ref: "#/components/schemas/AgentTypeRes"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AgentCreateRes:
      allOf:
        - $ref: "#/components/schemas/AgentRes"
        - type: object
          properties:
            token:
              $ref: "#/components/schemas/TokenRes"
              description: "The agent authentication token"

    # Agent Type schemas
    AgentTypeReq:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Participant VM Agent"

    AgentTypeRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: "Participant VM Agent"
        serviceTypes:
          type: array
          items:
            $ref: "#/components/schemas/ServiceTypeRes"
          description: "Service types that this agent type can provide"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Service schemas
    ServiceStatus:
      type: string
      enum: [New, Started, Stopped, Deleted]

    ServiceReq:
      type: object
      required:
        - name
        - serviceTypeId
        - groupId
      properties:
        name:
          type: string
          example: "web-server-01"
        properties:
          $ref: "#/components/schemas/JSONObject"
        agentTags:
          type: array
          items:
            type: string
          example: ["gpu", "high-memory"]
          description: "Tags used for agent discovery when agentId is not specified"
        agentId:
          $ref: "#/components/schemas/properties.UUID"
          description: "Specific agent ID (optional - if not provided, agent discovery will use agentTags)"
        serviceTypeId:
          $ref: "#/components/schemas/properties.UUID"
        groupId:
          $ref: "#/components/schemas/properties.UUID"

    ServiceRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: "web-server-01"
        status:
          $ref: "#/components/schemas/ServiceStatus"
        properties:
          $ref: "#/components/schemas/JSONObject"
        resources:
          $ref: "#/components/schemas/JSONObject"
        externalId:
          type: string
          nullable: true
        providerId:
          $ref: "#/components/schemas/properties.UUID"
        consumerId:
          $ref: "#/components/schemas/properties.UUID"
        agentId:
          $ref: "#/components/schemas/properties.UUID"
        serviceTypeId:
          $ref: "#/components/schemas/properties.UUID"
        groupId:
          $ref: "#/components/schemas/properties.UUID"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Service Type schemas
    ServiceTypeReq:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "VM"
        resourceDefinitions:
          $ref: "#/components/schemas/JSONObject"

    ServiceTypeRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: "VM"
        propertySchema:
          $ref: "#/components/schemas/PropertySchema"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Service Group schemas
    ServiceGroupReq:
      type: object
      required:
        - name
        - consumerId
      properties:
        name:
          type: string
          example: "Web Servers"
        consumerId:
          $ref: "#/components/schemas/properties.UUID"
          description: "ID of the consumer participant that owns this service group"

    ServiceGroupRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: "Web Servers"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    # Action types
    ServiceAction:
      type: string
      enum: [Create, Start, Stop, Update, Delete]

    # Job schemas
    # Using the same ServiceAction enum for job actions

    JobStatus:
      type: string
      enum: [Pending, Processing, Completed, Failed, Unsupported]

    JobRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        providerId:
          $ref: "#/components/schemas/properties.UUID"
          description: "ID of the participant that provides the service"
        consumerId:
          $ref: "#/components/schemas/properties.UUID"
          description: "ID of the participant that consumes the service"
        agentId:
          $ref: "#/components/schemas/properties.UUID"
        serviceId:
          $ref: "#/components/schemas/properties.UUID"
        action:
          $ref: "#/components/schemas/ServiceAction" # Use the common ServiceAction enum
        params:
          $ref: "#/components/schemas/JSONObject"
          description: "Parameters for the job action"
        status:
          $ref: "#/components/schemas/JobStatus"
        priority:
          type: integer
          example: 1
        errorMessage:
          type: string
          example: "Failed to create VM: insufficient resources"
        claimedAt:
          type: string
          format: date-time
          nullable: true
        completedAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        service:
          $ref: "#/components/schemas/ServiceRes"
          description: "Associated service details (optional)"

    CompleteJobReq:
      type: object
      properties:
        externalId:
          type: string
        resources:
          $ref: "#/components/schemas/JSONObject"

    FailJobReq:
      type: object
      required:
        - errorMessage
      properties:
        errorMessage:
          type: string
          example: "Failed to create VM: insufficient resources"

    UnsupportedJobReq:
      type: object
      required:
        - errorMessage
      properties:
        errorMessage:
          type: string
          description: Error message describing why the operation is not supported
          example: "Hot updates are not supported by this agent version"

    # Metric schemas
    MetricEntityType:
      type: string
      enum: [Agent, Service, Resource]

    MetricTypeReq:
      type: object
      required:
        - name
        - entityType
      properties:
        name:
          type: string
          example: "cpu_usage"
        entityType:
          $ref: "#/components/schemas/MetricEntityType"

    MetricTypeRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        entityType:
          $ref: "#/components/schemas/MetricEntityType"
        name:
          type: string
          example: "cpu_usage"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MetricEntryReq:
      type: object
      required:
        - resourceId
        - typeName
        - value
      oneOf:
        - required: ["serviceId"]
        - required: ["externalId"]
      properties:
        serviceId:
          $ref: "#/components/schemas/properties.UUID"
          description: "ID of the service associated with this metric"
        externalId:
          type: string
          description: "External ID of the service associated with this metric"
          example: "vm-i-12345"
        resourceId:
          type: string
          example: "cpu-1"
        value:
          type: number
          format: float
          example: 78.5
        typeName:
          type: string
          description: "Name of the metric type"
          example: "cpu.usage"

    MetricEntryRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        agentId:
          $ref: "#/components/schemas/properties.UUID"
        serviceId:
          $ref: "#/components/schemas/properties.UUID"
        resourceId:
          type: string
          example: "cpu-1"
        value:
          type: number
          format: float
          example: 78.5
        createdAt:
          type: string
          format: date-time

    # Event schemas
    EventRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        initiatorType:
          type: string
          example: "user"
        initiatorId:
          type: string
          example: "admin"
        type:
          type: string
          example: "service.created"
        properties:
          $ref: "#/components/schemas/JSONObject"
        createdAt:
          type: string
          format: date-time

    EventLeaseReq:
      type: object
      required:
        - subscriberId
        - instanceId
      properties:
        subscriberId:
          type: string
          description: Unique identifier for the subscriber system
          example: "external-system"
        instanceId:
          type: string
          description: Unique identifier for the consuming instance
          example: "instance-1"
        leaseDurationSeconds:
          type: integer
          description: Lease duration in seconds (default 300, max 3600, min 30)
          minimum: 30
          maximum: 3600
          default: 300
          example: 300
        limit:
          type: integer
          description: Maximum number of events to fetch (default 100, max 1000, min 1)
          minimum: 1
          maximum: 1000
          default: 100
          example: 100

    EventLeaseRes:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/EventRes"
          description: Array of events fetched in chronological order
        leaseExpiresAt:
          type: string
          format: date-time
          description: When the current lease expires
        lastEventSequenceProcessed:
          type: integer
          format: int64
          description: Last event sequence number processed by this subscriber
          example: 150

    EventAckReq:
      type: object
      required:
        - subscriberId
        - instanceId
        - lastEventSequenceProcessed
      properties:
        subscriberId:
          type: string
          description: Unique identifier for the subscriber system
          example: "external-system"
        instanceId:
          type: string
          description: Unique identifier for the consuming instance
          example: "instance-1"
        lastEventSequenceProcessed:
          type: integer
          format: int64
          description: Sequence number of the last event successfully processed
          minimum: 1
          example: 150

    EventAckRes:
      type: object
      properties:
        lastEventSequenceProcessed:
          type: integer
          format: int64
          description: Updated last event sequence processed
          example: 150

    PageRes:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        totalItems:
          type: integer
        totalPages:
          type: integer
        pageSize:
          type: integer
        page:
          type: integer

    PropertySchema:
      type: object
      description: properties.JSON schema defining validation rules for service properties
      additionalProperties:
        $ref: "#/components/schemas/PropertyDefinition"

    PropertyDefinition:
      type: object
      properties:
        type:
          type: string
          enum: [string, integer, number, boolean, object, array]
          description: The data type of the property
        label:
          type: string
          description: Human-readable label for the property
        required:
          type: boolean
          description: Whether the property is required
          default: false
        default:
          description: Default value for the property
        validators:
          type: array
          items:
            $ref: "#/components/schemas/ValidatorDefinition"
          description: Array of validation rules
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDefinition"
          description: Nested properties for object types
        items:
          $ref: "#/components/schemas/PropertyDefinition"
          description: Schema for array items

    ValidatorDefinition:
      type: object
      required:
        - type
        - value
      properties:
        type:
          type: string
          enum:
            [
              minLength,
              maxLength,
              pattern,
              enum,
              min,
              max,
              minItems,
              maxItems,
              uniqueItems,
            ]
          description: Type of validator
        value:
          description: Value for the validator (type depends on validator type)

    ValidatePropertiesReq:
      type: object
      required:
        - properties
      properties:
        properties:
          type: object
          description: Properties to validate against the schema
          additionalProperties: true

    ValidatePropertiesRes:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the properties are valid
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
          description: Array of validation errors (empty if valid)

    ValidationError:
      type: object
      properties:
        path:
          type: string
          description: Path to the property that failed validation
        message:
          type: string
          description: Error message describing the validation failure

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"

paths:
  #
  # Participant endpoints
  #
  /participants:
    get:
      summary: List participants
      tags:
        - Participants
      description: Retrieves a paginated list of participants
      x-auth-permissions:
        - role: admin
          permission: all participants
        - role: participant
          permission: only its own participant
        - role: agent
          permission: only its associated participant
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of participants
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ParticipantRes"
    post:
      summary: Create a participant
      tags:
        - Participants
      description: Creates a new participant
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantReq"
      responses:
        "201":
          description: Participant created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /participants/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      summary: Get a participant
      tags:
        - Participants
      description: Retrieves a specific participant by ID
      x-auth-permissions:
        - role: admin
          permission: all participants
        - role: participant
          permission: its own participant
        - role: agent
          permission: its associated participant
      responses:
        "200":
          description: The participant details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantRes"
        "404":
          description: Participant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      summary: Update a participant
      tags:
        - Participants
      description: Updates an existing participant
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: its own participant
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantReq"
      responses:
        "200":
          description: Participant updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantRes"
        "404":
          description: Participant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      summary: Delete a participant
      tags:
        - Participants
      description: Deletes a participant by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Participant deleted successfully
        "404":
          description: Participant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  #
  # Token endpoints
  #
  /tokens:
    get:
      summary: List tokens
      tags:
        - Tokens
      description: Retrieves a paginated list of tokens
      x-auth-permissions:
        - role: admin
          permission: all tokens
        - role: participant
          permission: tokens for its participant and associated agents
        - role: agent
          permission: not authorized
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of tokens
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/TokenRes"
    post:
      summary: Create a token
      tags:
        - Tokens
      description: Creates a new authentication token. The plain token value is only returned in this response and cannot be retrieved later.
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for itself and for its agents
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenReq"
      responses:
        "201":
          description: Token created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /tokens/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      summary: Get a token
      tags:
        - Tokens
      description: Retrieves a specific token by ID. Note that the plain token value is not returned in this endpoint.
      x-auth-permissions:
        - role: admin
          permission: all tokens
        - role: participant
          permission: its own tokens and those of its agents
        - role: agent
          permission: not authorized
      responses:
        "200":
          description: The token details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRes"
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      summary: Update a token
      tags:
        - Tokens
      description: Updates an existing token
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: its own tokens and those of its agents
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Token Name"
                role:
                  $ref: "#/components/schemas/AuthRole"
                expireAt:
                  type: string
                  format: date-time
                scopeId:
                  $ref: "#/components/schemas/properties.UUID"
      responses:
        "200":
          description: Token updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRes"
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      summary: Delete a token
      tags:
        - Tokens
      description: Deletes a token by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: its own tokens and those of its agents
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Token deleted successfully
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /tokens/{id}/regenerate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      summary: Regenerate token value
      tags:
        - Tokens
      description: Regenerates the value for an existing token. The new plain token value is returned in the response and cannot be retrieved later.
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: its own tokens and those of its agents
        - role: agent
          permission: not authorized
      responses:
        "200":
          description: Token value regenerated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRes"
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  #
  # Agent endpoints
  #
  /agents:
    get:
      summary: List agents
      tags:
        - Agents
      description: Retrieves a paginated list of agents
      x-auth-permissions:
        - role: admin
          permission: all agents
        - role: participant
          permission: agents belonging to its participant
        - role: agent
          permission: itself only
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of agents
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/AgentRes"
    post:
      summary: Create an agent
      tags:
        - Agents
      description: Creates a new agent and returns the agent data with an authentication token
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for its participant (when acting as provider)
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAgentReq"
      responses:
        "201":
          description: Agent created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentCreateRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /agents/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      summary: Get an agent
      tags:
        - Agents
      description: Retrieves a specific agent by ID
      x-auth-permissions:
        - role: admin
          permission: all agents
        - role: participant
          permission: agents belonging to its participant
        - role: agent
          permission: itself only
      responses:
        "200":
          description: The agent details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentRes"
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      summary: Update an agent
      tags:
        - Agents
      description: Updates an existing agent
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: agents belonging to its participant
        - role: agent
          permission: update its own status only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAgentReq"
      responses:
        "200":
          description: Agent updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentRes"
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      summary: Delete an agent
      tags:
        - Agents
      description: Deletes an agent by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: agents belonging to its participant
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Agent deleted successfully
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /agents/me/status:
    put:
      summary: Update agent status
      tags:
        - Agents
      description: Updates the status of the authenticated agent
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  $ref: "#/components/schemas/AgentStatus"
      responses:
        "200":
          description: Agent status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /agents/me:
    get:
      summary: Get current agent
      tags:
        - Agents
      description: Retrieves information about the currently authenticated agent
      security:
        - BearerAuth: []
      responses:
        "200":
          description: The agent details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentRes"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  #
  # Agent Type endpoints
  #
  /agent-types:
    get:
      summary: List agent types
      tags:
        - Agents
      description: Retrieves a paginated list of agent types
      x-auth-permissions:
        - role: admin
          permission: all agent types
        - role: participant
          permission: all agent types
        - role: agent
          permission: all agent types
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of agent types
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/AgentTypeRes"

  /agent-types/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      summary: Get an agent type
      tags:
        - Agents
      description: Retrieves a specific agent type by ID
      x-auth-permissions:
        - role: admin
          permission: all agent types
        - role: participant
          permission: all agent types
        - role: agent
          permission: all agent types
      responses:
        "200":
          description: The agent type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentTypeRes"
        "404":
          description: Agent type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  #
  # Service endpoints
  #
  /services:
    get:
      summary: List services
      tags:
        - Services
      description: Retrieves a paginated list of services
      x-auth-permissions:
        - role: admin
          permission: all services
        - role: participant
          permission: services associated with its participant (as provider or consumer)
        - role: agent
          permission: services assigned to the agent
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of services
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ServiceRes"
    post:
      summary: Create a service
      tags:
        - Services
      description: Creates a new service
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: when acting as consumer
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceReq"
      responses:
        "201":
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceRes"
        "400":
          description: Invalid request or validation failed
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ErrorRes"
                  - $ref: "#/components/schemas/ValidatePropertiesRes"

  /services/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      summary: Get a service
      tags:
        - Services
      description: Retrieves a specific service by ID
      x-auth-permissions:
        - role: admin
          permission: all services
        - role: participant
          permission: services associated with its participant (as provider or consumer)
        - role: agent
          permission: services assigned to the agent
      responses:
        "200":
          description: The service details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceRes"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      summary: Update a service
      tags:
        - Services
      description: Updates an existing service
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: services where it is the consumer participant
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "web-server-01"
                status:
                  $ref: "#/components/schemas/ServiceStatus"
                properties:
                  $ref: "#/components/schemas/JSONObject"
                resources:
                  $ref: "#/components/schemas/JSONObject"
                agentId:
                  $ref: "#/components/schemas/properties.UUID"
                serviceTypeId:
                  $ref: "#/components/schemas/properties.UUID"
                groupId:
                  $ref: "#/components/schemas/properties.UUID"
      responses:
        "200":
          description: Service updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceRes"
        "400":
          description: Invalid request or validation failed
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ErrorRes"
                  - $ref: "#/components/schemas/ValidatePropertiesRes"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      summary: Delete a service
      tags:
        - Services
      description: Deletes a service by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: services where it is the consumer participant
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Service deleted successfully
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /services/{id}/start:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      summary: Start a service
      tags:
        - Services
      description: Starts a service by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: services where it is the consumer participant
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Service start operation initiated successfully
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /services/{id}/stop:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      summary: Stop a service
      tags:
        - Services
      description: Stops a service by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: services where it is the consumer participant
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Service stop operation initiated successfully
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /services/{id}/retry:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      summary: Retry a failed service operation
      tags:
        - Services
      description: Retries the last failed operation on a service
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: services where it is the consumer participant
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Service retry operation initiated successfully
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  #
  # Service Type endpoints
  #
  /service-types:
    get:
      summary: List service types
      tags:
        - Services
      description: Retrieves a paginated list of service types
      x-auth-permissions:
        - role: admin
          permission: all service types
        - role: participant
          permission: all service types
        - role: agent
          permission: all service types
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of service types
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ServiceTypeRes"

  /service-types/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      summary: Get a service type
      tags:
        - Services
      description: Retrieves a specific service type by ID
      x-auth-permissions:
        - role: admin
          permission: all service types
        - role: participant
          permission: all service types
        - role: agent
          permission: all service types
      responses:
        "200":
          description: The service type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceTypeRes"
        "404":
          description: Service type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /service-types/{id}/validate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      summary: Validate service properties
      tags:
        - Services
      description: Validates service properties against the service type's property schema
      x-auth-permissions:
        - role: admin
          permission: all service types
        - role: participant
          permission: all service types
        - role: agent
          permission: all service types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidatePropertiesReq"
      responses:
        "200":
          description: Validation results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidatePropertiesRes"
        "400":
          description: Bad request (e.g., service type has no property schema)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Service type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  #
  # Service Group endpoints
  #
  /service-groups:
    get:
      summary: List service groups
      tags:
        - Services
      description: Retrieves a paginated list of service groups
      x-auth-permissions:
        - role: admin
          permission: all service groups
        - role: participant
          permission: service groups belonging to its participant
        - role: agent
          permission: not authorized
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of service groups
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ServiceGroupRes"
    post:
      summary: Create a service group
      tags:
        - Services
      description: Creates a new service group
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for its participant
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceGroupReq"
      responses:
        "201":
          description: Service group created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceGroupRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /service-groups/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      summary: Get a service group
      tags:
        - Services
      description: Retrieves a specific service group by ID
      x-auth-permissions:
        - role: admin
          permission: all service groups
        - role: participant
          permission: service groups belonging to its participant
        - role: agent
          permission: not authorized
      responses:
        "200":
          description: The service group details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceGroupRes"
        "404":
          description: Service group not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      summary: Update a service group
      tags:
        - Services
      description: Updates an existing service group
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: service groups belonging to its participant
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceGroupReq"
      responses:
        "200":
          description: Service group updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceGroupRes"
        "404":
          description: Service group not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      summary: Delete a service group
      tags:
        - Services
      description: Deletes a service group by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: service groups belonging to its participant
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Service group deleted successfully
        "404":
          description: Service group not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  # Job endpoints
  #
  /jobs:
    get:
      summary: List jobs
      tags:
        - Jobs
      description: Retrieves a paginated list of jobs (admin route)
      x-auth-permissions:
        - role: admin
          permission: all jobs
        - role: participant
          permission: jobs related to its participant (as provider via agents or as consumer via services)
        - role: agent
          permission: jobs assigned to the agent
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of jobs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/JobRes"

  /jobs/pending:
    get:
      summary: Get pending jobs
      tags:
        - Jobs
      description: Retrieves a list of pending jobs for the authenticated agent
      security:
        - BearerAuth: []
      x-auth-permissions:
        - role: admin
          permission: not authorized
        - role: participant
          permission: not authorized
        - role: agent
          permission: pending jobs assigned to the agent
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of pending jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobRes"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /jobs/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      summary: Get a job
      tags:
        - Jobs
      description: Retrieves a specific job by ID (admin route)
      responses:
        "200":
          description: The job details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobRes"
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /jobs/{id}/claim:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      summary: Claim a job
      tags:
        - Jobs
      description: Claims a job for processing by the authenticated agent
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Job claimed successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /jobs/{id}/complete:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      summary: Complete a job
      tags:
        - Jobs
      description: Marks a job as completed with results
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteJobReq"
      responses:
        "204":
          description: Job completed successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /jobs/{id}/fail:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      summary: Fail a job
      tags:
        - Jobs
      description: Marks a job as failed with an error message
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FailJobReq"
      responses:
        "204":
          description: Job marked as failed successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /jobs/{id}/unsupported:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      summary: Mark a job as unsupported
      tags:
        - Jobs
      description: |
        Marks a job as failed due to an unsupported operation and rolls back the service state.
        Unlike regular failures, this clears the service's target status and properties,
        rolling back to the previous stable state. Unsupported operations are not retried.
      security:
        - BearerAuth: []
      x-auth-roles:
        - agent: Can mark jobs assigned to the agent as unsupported
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnsupportedJobReq"
      responses:
        "204":
          description: Job marked as unsupported successfully and service state rolled back
        "400":
          description: Invalid request (job not in processing state, missing error message, etc.)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "403":
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  #
  # Metric Type endpoints
  #
  /metric-types:
    get:
      summary: List metric types
      tags:
        - Metrics
      description: Retrieves a paginated list of metric types
      x-auth-permissions:
        - role: admin
          permission: all metric types
        - role: participant
          permission: all metric types
        - role: agent
          permission: all metric types
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of metric types
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/MetricTypeRes"
    post:
      summary: Create a metric type
      tags:
        - Metrics
      description: Creates a new metric type
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetricTypeReq"
      responses:
        "201":
          description: Metric type created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricTypeRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  /metric-types/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      summary: Get a metric type
      tags:
        - Metrics
      description: Retrieves a specific metric type by ID
      x-auth-permissions:
        - role: admin
          permission: all metric types
        - role: participant
          permission: all metric types
        - role: agent
          permission: all metric types
      responses:
        "200":
          description: The metric type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricTypeRes"
        "404":
          description: Metric type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      summary: Update a metric type
      tags:
        - Metrics
      description: Updates an existing metric type
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "cpu_usage_updated"
      responses:
        "200":
          description: Metric type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricTypeRes"
        "404":
          description: Metric type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      summary: Delete a metric type
      tags:
        - Metrics
      description: Deletes a metric type by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Metric type deleted successfully
        "404":
          description: Metric type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  #
  # Metric Entry endpoints
  #
  /metric-entries:
    get:
      summary: List metric entries
      tags:
        - Metrics
      description: Retrieves a paginated list of metric entries
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of metric entries
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/MetricEntryRes"
    post:
      summary: Create a metric entry
      tags:
        - Metrics
      security:
        - BearerAuth: []
      description: Creates a new metric entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetricEntryReq"
      responses:
        "201":
          description: Metric entry created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricEntryRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"

  #
  # Event Entry endpoints
  #
  /events:
    get:
      summary: List events
      tags:
        - Event
      description: Retrieves a paginated list of events
      x-auth-permissions:
        - role: admin
          permission: all events
        - role: participant
          permission: events related to its participant
        - role: agent
          permission: not authorized
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of events
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/EventRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /events/lease:
    post:
      summary: Acquire event lease and fetch events
      tags:
        - Event
      description: Acquire or renew a lease for event processing and fetch events in chronological order
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventLeaseReq"
      responses:
        "200":
          description: Lease acquired successfully with events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventLeaseRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          description: Lease conflict - held by another instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /events/ack:
    post:
      summary: Acknowledge processed events
      tags:
        - Event
      description: Acknowledge processed events and update progress (Option B - does not renew lease)
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventAckReq"
      responses:
        "200":
          description: Events acknowledged successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventAckRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          description: Acknowledgement conflict - lease not held or sequence regression
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "500":
          $ref: "#/components/responses/InternalServerError"
