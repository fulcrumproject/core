openapi: 3.1.0
info:
  title: Fulcrum Core API
  description: A comprehensive cloud infrastructure management system designed to orchestrate and monitor distributed cloud resources across multiple providers.
  version: 1.0.0
  contact:
    name: Fulcrum Project
    url: https://fulcrumproject.org
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
servers:
  - url: https://api.fulcrum.testudosrl.dev/api/v1
    description: Development server
security:
  - BearerAuth: []
tags:
  - name: Participants
    description: Cloud service participant management
  - name: Agents
    description: Agent and agent type management
  - name: Services
    description: Service, service type, and service group management
  - name: Jobs
    description: Job queue and processing
  - name: Metrics
    description: Metrics collection and management
  - name: Event
    description: Event logging
  - name: Tokens
    description: Authentication token management
  - name: Vault
    description: Secure secret storage and retrieval
paths:
  /agent-types:
    get:
      operationId: agentTypesList
      summary: List agent types
      tags:
        - Agents
      description: Retrieves a paginated list of agent types
      x-auth-permissions:
        - role: admin
          permission: all agent types
        - role: participant
          permission: all agent types
        - role: agent
          permission: all agent types
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of agent types
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/AgentTypeRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: agentTypesCreate
      summary: Create an agent type
      tags:
        - Agents
      description: Creates a new agent type with optional service types
      x-auth-permissions:
        - role: admin
          permission: all agent types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAgentTypeReq"
      responses:
        "201":
          description: Agent type created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentTypeRes"
        "400":
          description: Invalid request body or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "403":
          description: Administrator access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "409":
          description: Agent type with same name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /agent-types/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      operationId: agentTypesGet
      summary: Get an agent type
      tags:
        - Agents
      description: Retrieves a specific agent type by ID
      x-auth-permissions:
        - role: admin
          permission: all agent types
        - role: participant
          permission: all agent types
        - role: agent
          permission: all agent types
      responses:
        "200":
          description: The agent type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentTypeRes"
        "404":
          description: Agent type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      operationId: agentTypesUpdate
      summary: Update an agent type
      tags:
        - Agents
      description: Partially updates an agent type (PATCH semantics)
      x-auth-permissions:
        - role: admin
          permission: all agent types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAgentTypeReq"
      responses:
        "200":
          description: Agent type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentTypeRes"
        "400":
          description: Invalid request body or validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "403":
          description: Administrator access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Agent type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "409":
          description: Agent type with same name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      operationId: agentTypesDelete
      summary: Delete an agent type
      tags:
        - Agents
      description: Deletes an agent type if no agents depend on it
      x-auth-permissions:
        - role: admin
          permission: all agent types
      responses:
        "204":
          description: Agent type deleted successfully
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "403":
          description: Administrator access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Agent type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "409":
          description: Cannot delete agent type with dependent agents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /agents:
    get:
      operationId: agentsList
      summary: List agents
      tags:
        - Agents
      description: Retrieves a paginated list of agents
      x-auth-permissions:
        - role: admin
          permission: all agents
        - role: participant
          permission: agents belonging to its participant
        - role: agent
          permission: itself only
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of agents
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/AgentRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: agentsCreate
      summary: Create an agent
      tags:
        - Agents
      description: Creates a new agent and returns the agent data with an authentication token
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for its participant (when acting as provider)
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAgentReq"
      responses:
        "201":
          description: Agent created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentCreateRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /agents/me:
    get:
      operationId: agentsGetCurrent
      summary: Get current agent
      tags:
        - Agents
      description: Retrieves information about the currently authenticated agent
      security:
        - BearerAuth: []
      responses:
        "200":
          description: The agent details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentRes"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /agents/me/status:
    put:
      operationId: agentsUpdateStatus
      summary: Update agent status
      tags:
        - Agents
      description: Updates the status of the authenticated agent
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  $ref: "#/components/schemas/AgentStatus"
      responses:
        "200":
          description: Agent status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /agents/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      operationId: agentsGet
      summary: Get an agent
      tags:
        - Agents
      description: Retrieves a specific agent by ID
      x-auth-permissions:
        - role: admin
          permission: all agents
        - role: participant
          permission: agents belonging to its participant
        - role: agent
          permission: itself only
      responses:
        "200":
          description: The agent details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentRes"
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      operationId: agentsUpdate
      summary: Update an agent
      tags:
        - Agents
      description: Updates an existing agent
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: agents belonging to its participant
        - role: agent
          permission: update its own status only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAgentReq"
      responses:
        "200":
          description: Agent updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgentRes"
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      operationId: agentsDelete
      summary: Delete an agent
      tags:
        - Agents
      description: Deletes an agent by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: agents belonging to its participant
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Agent deleted successfully
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /events:
    get:
      operationId: eventsList
      summary: List events
      tags:
        - Event
      description: Retrieves a paginated list of events
      x-auth-permissions:
        - role: admin
          permission: all events
        - role: participant
          permission: events related to its participant
        - role: agent
          permission: not authorized
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of events
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/EventRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /events/ack:
    post:
      operationId: eventsAck
      summary: Acknowledge processed events
      tags:
        - Event
      description: Acknowledge processed events and update progress (Option B - does not renew lease)
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventAckReq"
      responses:
        "200":
          description: Events acknowledged successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventAckRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          description: Acknowledgement conflict - lease not held or sequence regression
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /events/lease:
    post:
      operationId: eventsLease
      summary: Acquire event lease and fetch events
      tags:
        - Event
      description: Acquire or renew a lease for event processing and fetch events in chronological order
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventLeaseReq"
      responses:
        "200":
          description: Lease acquired successfully with events
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventLeaseRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          description: Lease conflict - held by another instance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /jobs:
    get:
      operationId: jobsList
      summary: List jobs
      tags:
        - Jobs
      description: Retrieves a paginated list of jobs (admin route)
      x-auth-permissions:
        - role: admin
          permission: all jobs
        - role: participant
          permission: jobs related to its participant (as provider via agents or as consumer via services)
        - role: agent
          permission: jobs assigned to the agent
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of jobs
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/JobRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /jobs/pending:
    get:
      operationId: jobsPending
      summary: Get pending jobs
      tags:
        - Jobs
      description: Retrieves a list of pending jobs for the authenticated agent
      security:
        - BearerAuth: []
      x-auth-permissions:
        - role: admin
          permission: not authorized
        - role: participant
          permission: not authorized
        - role: agent
          permission: pending jobs assigned to the agent
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        "200":
          description: List of pending jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobRes"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /jobs/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      operationId: jobsGet
      summary: Get a job
      tags:
        - Jobs
      description: Retrieves a specific job by ID (admin route)
      responses:
        "200":
          description: The job details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobRes"
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /jobs/{id}/claim:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      operationId: jobsClaim
      summary: Claim a job
      tags:
        - Jobs
      description: Claims a job for processing by the authenticated agent
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Job claimed successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /jobs/{id}/complete:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      operationId: jobsComplete
      summary: Complete a job
      tags:
        - Jobs
      description: Marks a job as completed with results
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteJobReq"
      responses:
        "204":
          description: Job completed successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /jobs/{id}/fail:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      operationId: jobsFail
      summary: Fail a job
      tags:
        - Jobs
      description: Marks a job as failed with an error message
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FailJobReq"
      responses:
        "204":
          description: Job marked as failed successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /metric-entries:
    get:
      operationId: metricEntriesList
      summary: List metric entries
      tags:
        - Metrics
      description: Retrieves a paginated list of metric entries
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of metric entries
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/MetricEntryRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: metricEntriesCreate
      summary: Create a metric entry
      tags:
        - Metrics
      security:
        - BearerAuth: []
      description: Creates a new metric entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetricEntryReq"
      responses:
        "201":
          description: Metric entry created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricEntryRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /metric-types:
    get:
      operationId: metricTypesList
      summary: List metric types
      tags:
        - Metrics
      description: Retrieves a paginated list of metric types
      x-auth-permissions:
        - role: admin
          permission: all metric types
        - role: participant
          permission: all metric types
        - role: agent
          permission: all metric types
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of metric types
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/MetricTypeRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: metricTypesCreate
      summary: Create a metric type
      tags:
        - Metrics
      description: Creates a new metric type
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetricTypeReq"
      responses:
        "201":
          description: Metric type created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricTypeRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /metric-types/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      operationId: metricTypesGet
      summary: Get a metric type
      tags:
        - Metrics
      description: Retrieves a specific metric type by ID
      x-auth-permissions:
        - role: admin
          permission: all metric types
        - role: participant
          permission: all metric types
        - role: agent
          permission: all metric types
      responses:
        "200":
          description: The metric type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricTypeRes"
        "404":
          description: Metric type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      operationId: metricTypesUpdate
      summary: Update a metric type
      tags:
        - Metrics
      description: Updates an existing metric type
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: cpu_usage_updated
      responses:
        "200":
          description: Metric type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricTypeRes"
        "404":
          description: Metric type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      operationId: metricTypesDelete
      summary: Delete a metric type
      tags:
        - Metrics
      description: Deletes a metric type by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Metric type deleted successfully
        "404":
          description: Metric type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /participants:
    get:
      operationId: participantsList
      summary: List participants
      tags:
        - Participants
      description: Retrieves a paginated list of participants
      x-auth-permissions:
        - role: admin
          permission: all participants
        - role: participant
          permission: only its own participant
        - role: agent
          permission: only its associated participant
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of participants
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ParticipantRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: participantsCreate
      summary: Create a participant
      tags:
        - Participants
      description: Creates a new participant
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantReq"
      responses:
        "201":
          description: Participant created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /participants/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      operationId: participantsGet
      summary: Get a participant
      tags:
        - Participants
      description: Retrieves a specific participant by ID
      x-auth-permissions:
        - role: admin
          permission: all participants
        - role: participant
          permission: its own participant
        - role: agent
          permission: its associated participant
      responses:
        "200":
          description: The participant details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantRes"
        "404":
          description: Participant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      operationId: participantsUpdate
      summary: Update a participant
      tags:
        - Participants
      description: Updates an existing participant
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: its own participant
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipantReq"
      responses:
        "200":
          description: Participant updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantRes"
        "404":
          description: Participant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      operationId: participantsDelete
      summary: Delete a participant
      tags:
        - Participants
      description: Deletes a participant by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: not authorized
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Participant deleted successfully
        "404":
          description: Participant not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /service-groups:
    get:
      operationId: serviceGroupsList
      summary: List service groups
      tags:
        - Services
      description: Retrieves a paginated list of service groups
      x-auth-permissions:
        - role: admin
          permission: all service groups
        - role: participant
          permission: service groups belonging to its participant
        - role: agent
          permission: not authorized
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of service groups
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ServiceGroupRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: serviceGroupsCreate
      summary: Create a service group
      tags:
        - Services
      description: Creates a new service group
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for its participant
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceGroupReq"
      responses:
        "201":
          description: Service group created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceGroupRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /service-groups/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      operationId: serviceGroupsGet
      summary: Get a service group
      tags:
        - Services
      description: Retrieves a specific service group by ID
      x-auth-permissions:
        - role: admin
          permission: all service groups
        - role: participant
          permission: service groups belonging to its participant
        - role: agent
          permission: not authorized
      responses:
        "200":
          description: The service group details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceGroupRes"
        "404":
          description: Service group not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      operationId: serviceGroupsUpdate
      summary: Update a service group
      tags:
        - Services
      description: Updates an existing service group
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: service groups belonging to its participant
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceGroupReq"
      responses:
        "200":
          description: Service group updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceGroupRes"
        "404":
          description: Service group not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      operationId: serviceGroupsDelete
      summary: Delete a service group
      tags:
        - Services
      description: Deletes a service group by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: service groups belonging to its participant
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Service group deleted successfully
        "404":
          description: Service group not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /service-option-types:
    get:
      operationId: serviceOptionTypesList
      summary: List service option types
      tags:
        - Service Options
      description: Retrieves a paginated list of service option types
      x-auth-permissions:
        - role: admin
          permission: all service option types
        - role: participant
          permission: all service option types
        - role: agent
          permission: all service option types
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of service option types
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ServiceOptionTypeRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: serviceOptionTypesCreate
      summary: Create a service option type
      tags:
        - Service Options
      description: Creates a new service option type
      x-auth-permissions:
        - role: admin
          permission: always
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceOptionTypeReq"
      responses:
        "201":
          description: Service option type created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceOptionTypeRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /service-option-types/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      operationId: serviceOptionTypesGet
      summary: Get a service option type
      tags:
        - Service Options
      description: Retrieves a specific service option type by ID
      x-auth-permissions:
        - role: admin
          permission: all service option types
        - role: participant
          permission: all service option types
        - role: agent
          permission: all service option types
      responses:
        "200":
          description: Service option type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceOptionTypeRes"
        "404":
          description: Service option type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      operationId: serviceOptionTypesUpdate
      summary: Update a service option type
      tags:
        - Service Options
      description: Updates an existing service option type
      x-auth-permissions:
        - role: admin
          permission: always
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceOptionTypeReq"
      responses:
        "200":
          description: Service option type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceOptionTypeRes"
        "404":
          description: Service option type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      operationId: serviceOptionTypesDelete
      summary: Delete a service option type
      tags:
        - Service Options
      description: Deletes a service option type by ID
      x-auth-permissions:
        - role: admin
          permission: always
      responses:
        "204":
          description: Service option type deleted successfully
        "404":
          description: Service option type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /service-options:
    get:
      operationId: serviceOptionsList
      summary: List service options
      tags:
        - Service Options
      description: Retrieves a paginated list of service options
      x-auth-permissions:
        - role: admin
          permission: all service options
        - role: participant
          permission: service options for its provider
        - role: agent
          permission: service options for its provider
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: providerId
          in: query
          schema:
            $ref: "#/components/schemas/properties.UUID"
          description: Filter by provider ID
        - name: serviceOptionTypeId
          in: query
          schema:
            $ref: "#/components/schemas/properties.UUID"
          description: Filter by service option type ID
      responses:
        "200":
          description: A paginated list of service options
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ServiceOptionRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: serviceOptionsCreate
      summary: Create a service option
      tags:
        - Service Options
      description: Creates a new service option
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for its participant as provider
        - role: agent
          permission: for its participant as provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceOptionReq"
      responses:
        "201":
          description: Service option created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceOptionRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /service-options/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      operationId: serviceOptionsGet
      summary: Get a service option
      tags:
        - Service Options
      description: Retrieves a specific service option by ID
      x-auth-permissions:
        - role: admin
          permission: all service options
        - role: participant
          permission: service options for its provider
        - role: agent
          permission: service options for its provider
      responses:
        "200":
          description: Service option details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceOptionRes"
        "404":
          description: Service option not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      operationId: serviceOptionsUpdate
      summary: Update a service option
      tags:
        - Service Options
      description: Updates an existing service option
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for its participant as provider
        - role: agent
          permission: for its participant as provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceOptionReq"
      responses:
        "200":
          description: Service option updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceOptionRes"
        "404":
          description: Service option not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      operationId: serviceOptionsDelete
      summary: Delete a service option
      tags:
        - Service Options
      description: Deletes a service option by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for its participant as provider
        - role: agent
          permission: for its participant as provider
      responses:
        "204":
          description: Service option deleted successfully
        "404":
          description: Service option not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /service-pool-sets:
    get:
      operationId: servicePoolSetsList
      summary: List service pool sets
      tags:
        - Service Pools
      description: Retrieves a paginated list of service pool sets
      x-auth-permissions:
        - role: admin
          permission: all service pool sets
        - role: participant
          permission: service pool sets for its provider
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: providerId
          in: query
          schema:
            $ref: "#/components/schemas/properties.UUID"
          description: Filter by provider ID
        - name: name
          in: query
          schema:
            type: string
          description: Filter by name
      responses:
        "200":
          description: A paginated list of service pool sets
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ServicePoolSetRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: servicePoolSetsCreate
      summary: Create a service pool set
      tags:
        - Service Pools
      description: Creates a new service pool set
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for its participant as provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServicePoolSetReq"
      responses:
        "201":
          description: Service pool set created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePoolSetRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /service-pool-sets/{id}:
    get:
      operationId: servicePoolSetsGet
      summary: Get a service pool set by ID
      tags:
        - Service Pools
      description: Retrieves details of a specific service pool set
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: if owned by participant as provider
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/properties.UUID"
      responses:
        "200":
          description: Service pool set retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePoolSetRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Service pool set not found
    patch:
      operationId: servicePoolSetsUpdate
      summary: Update a service pool set
      tags:
        - Service Pools
      description: Updates an existing service pool set
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: if owned by participant as provider
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/properties.UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateServicePoolSetReq"
      responses:
        "200":
          description: Service pool set updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePoolSetRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Service pool set not found
    delete:
      operationId: servicePoolSetsDelete
      summary: Delete a service pool set
      tags:
        - Service Pools
      description: Deletes an existing service pool set
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: if owned by participant as provider
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/properties.UUID"
      responses:
        "204":
          description: Service pool set deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Service pool set not found
  /service-pools:
    get:
      operationId: servicePoolsList
      summary: List service pools
      tags:
        - Service Pools
      description: Retrieves a paginated list of service pools
      x-auth-permissions:
        - role: admin
          permission: all service pools
        - role: participant
          permission: service pools for its provider
        - role: agent
          permission: service pools for its provider (read-only)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: servicePoolSetId
          in: query
          schema:
            $ref: "#/components/schemas/properties.UUID"
          description: Filter by service pool set ID
        - name: type
          in: query
          schema:
            type: string
          description: Filter by pool type
        - name: generatorType
          in: query
          schema:
            type: string
            enum:
              - list
              - subnet
          description: Filter by generator type
      responses:
        "200":
          description: A paginated list of service pools
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ServicePoolRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: servicePoolsCreate
      summary: Create a service pool
      tags:
        - Service Pools
      description: Creates a new service pool
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for its participant as provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServicePoolReq"
      responses:
        "201":
          description: Service pool created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePoolRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /service-pools/{id}:
    get:
      operationId: servicePoolsGet
      summary: Get a service pool by ID
      tags:
        - Service Pools
      description: Retrieves details of a specific service pool
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: if owned by participant as provider
        - role: agent
          permission: if owned by participant as provider (read-only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/properties.UUID"
      responses:
        "200":
          description: Service pool retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePoolRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Service pool not found
    patch:
      operationId: servicePoolsUpdate
      summary: Update a service pool
      tags:
        - Service Pools
      description: Updates an existing service pool
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: if owned by participant as provider
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/properties.UUID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateServicePoolReq"
      responses:
        "200":
          description: Service pool updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePoolRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Service pool not found
    delete:
      operationId: servicePoolsDelete
      summary: Delete a service pool
      tags:
        - Service Pools
      description: Deletes an existing service pool
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: if owned by participant as provider
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/properties.UUID"
      responses:
        "204":
          description: Service pool deleted successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Service pool not found
  /service-pool-values:
    get:
      operationId: servicePoolValuesList
      summary: List service pool values
      tags:
        - Service Pools
      description: Retrieves a paginated list of service pool values with allocation status
      x-auth-permissions:
        - role: admin
          permission: all service pool values
        - role: participant
          permission: service pool values for its provider
        - role: agent
          permission: service pool values for its provider (read-only)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
        - name: servicePoolId
          in: query
          schema:
            $ref: "#/components/schemas/properties.UUID"
          description: Filter by service pool ID
        - name: serviceId
          in: query
          schema:
            $ref: "#/components/schemas/properties.UUID"
          description: Filter by allocated service ID
        - name: propertyName
          in: query
          schema:
            type: string
          description: Filter by property name
      responses:
        "200":
          description: A paginated list of service pool values
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ServicePoolValueRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: servicePoolValuesCreate
      summary: Create a service pool value
      tags:
        - Service Pools
      description: Creates a new service pool value (for list generators only)
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for its participant as provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServicePoolValueReq"
      responses:
        "201":
          description: Service pool value created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePoolValueRes"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
  /service-pool-values/{id}:
    get:
      operationId: servicePoolValuesGet
      summary: Get a service pool value by ID
      tags:
        - Service Pools
      description: Retrieves details of a specific service pool value including allocation status
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: if owned by participant as provider
        - role: agent
          permission: if owned by participant as provider (read-only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/properties.UUID"
      responses:
        "200":
          description: Service pool value retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePoolValueRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Service pool value not found
    delete:
      operationId: servicePoolValuesDelete
      summary: Delete a service pool value
      tags:
        - Service Pools
      description: Deletes an existing service pool value (only if not allocated)
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: if owned by participant as provider
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/properties.UUID"
      responses:
        "204":
          description: Service pool value deleted successfully
        "400":
          description: Cannot delete allocated value
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Service pool value not found
  /service-types:
    get:
      operationId: serviceTypesList
      summary: List service types
      tags:
        - Services
      description: Retrieves a paginated list of service types
      x-auth-permissions:
        - role: admin
          permission: all service types
        - role: participant
          permission: all service types
        - role: agent
          permission: all service types
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of service types
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ServiceTypeRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: serviceTypesCreate
      summary: Create a service type
      tags:
        - Services
      description: Creates a new service type with optional property schema
      x-auth-permissions:
        - role: admin
          permission: all service types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServiceTypeReq"
      responses:
        "201":
          description: Service type created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceTypeRes"
        "400":
          description: Invalid request body or validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "403":
          description: Insufficient permissions (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "409":
          description: Service type with this name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /service-types/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      operationId: serviceTypesGet
      summary: Get a service type
      tags:
        - Services
      description: Retrieves a specific service type by ID
      x-auth-permissions:
        - role: admin
          permission: all service types
        - role: participant
          permission: all service types
        - role: agent
          permission: all service types
      responses:
        "200":
          description: The service type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceTypeRes"
        "404":
          description: Service type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      operationId: serviceTypesUpdate
      summary: Update a service type
      tags:
        - Services
      description: Partially updates a service type (PATCH semantics)
      x-auth-permissions:
        - role: admin
          permission: all service types
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateServiceTypeReq"
      responses:
        "200":
          description: Service type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceTypeRes"
        "400":
          description: Invalid request body or validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "403":
          description: Insufficient permissions (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Service type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "409":
          description: Service type name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      operationId: serviceTypesDelete
      summary: Delete a service type
      tags:
        - Services
      description: Deletes a service type if no services depend on it
      x-auth-permissions:
        - role: admin
          permission: all service types
      responses:
        "204":
          description: Service type deleted successfully
        "403":
          description: Insufficient permissions (admin required)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Service type not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "409":
          description: Cannot delete service type with dependent services
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /services:
    get:
      operationId: servicesList
      summary: List services
      tags:
        - Services
      description: Retrieves a paginated list of services
      x-auth-permissions:
        - role: admin
          permission: all services
        - role: participant
          permission: services associated with its participant (as provider or consumer)
        - role: agent
          permission: services assigned to the agent
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of services
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/ServiceRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: servicesCreate
      summary: Create a service
      tags:
        - Services
      description: Creates a new service
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: when acting as consumer
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceReq"
      responses:
        "201":
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceRes"
        "400":
          description: Invalid request or validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /services/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      operationId: servicesGet
      summary: Get a service
      tags:
        - Services
      description: Retrieves a specific service by ID
      x-auth-permissions:
        - role: admin
          permission: all services
        - role: participant
          permission: services associated with its participant (as provider or consumer)
        - role: agent
          permission: services assigned to the agent
      responses:
        "200":
          description: The service details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceRes"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      operationId: servicesUpdate
      summary: Update a service
      tags:
        - Services
      description: |
        Updates an existing service using PATCH semantics. Only provided fields are updated.
        Properties are merged with existing properties for partial updates.
        **Property Merging Behavior:**
        - Only provided properties are updated
        - Existing properties not included in the request remain unchanged
        - Nested objects are deep merged (existing nested properties are preserved)
        - Properties are validated against the complete merged result
        **Examples:**
        - To update only the service name: `{"name": "new-name"}`
        - To update specific database config: `{"properties": {"database": {"port": 3306}}}`
        - To add new API config: `{"properties": {"api": {"version": "v2"}}}`
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: services where it is the consumer participant
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Service name. Only provided if updating the name.
                  example: web-server-01
                properties:
                  $ref: "#/components/schemas/JSONObject"
                  description: |
                    Service properties. These are merged with existing properties.
                    Only provided properties are updated. Nested objects are deep merged.
      responses:
        "200":
          description: Service updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceRes"
        "400":
          description: Invalid request or validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      operationId: servicesDelete
      summary: Delete a service
      tags:
        - Services
      description: Deletes a service by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: services where it is the consumer participant
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Service deleted successfully
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /services/{id}/{action}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
      - name: action
        in: path
        required: true
        schema:
          type: string
        description: The lifecycle action to perform (e.g., start, stop, restart). Available actions are defined in the service type's lifecycle schema.
        example: start
    post:
      operationId: servicesAction
      summary: Perform a lifecycle action on a service
      tags:
        - Services
      description: |
        Performs a generic lifecycle action on a service. The action name is specified in the URL path
        and must be defined in the service type's lifecycle schema. 
        Common actions include: start, stop, restart, pause, resume, etc.
        Note: Use DELETE /services/{id} for delete actions and PATCH /services/{id} for update actions.
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: services where it is the consumer participant
        - role: agent
          permission: not authorized
      requestBody:
        required: false
        description: Optional properties for actions that require additional parameters (based on lifecycle schema requestSchemaType)
        content:
          application/json:
            schema:
              type: object
              properties:
                properties:
                  type: object
                  additionalProperties: true
                  description: Action-specific properties
      responses:
        "200":
          description: Service action initiated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceRes"
        "400":
          description: Invalid action or service state does not allow this action
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /tokens:
    get:
      operationId: tokensList
      summary: List tokens
      tags:
        - Tokens
      description: Retrieves a paginated list of tokens
      x-auth-permissions:
        - role: admin
          permission: all tokens
        - role: participant
          permission: tokens for its participant and associated agents
        - role: agent
          permission: not authorized
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 20
      responses:
        "200":
          description: A paginated list of tokens
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageRes"
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: "#/components/schemas/TokenRes"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
    post:
      operationId: tokensCreate
      summary: Create a token
      tags:
        - Tokens
      description: Creates a new authentication token. The plain token value is only returned in this response and cannot be retrieved later.
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: for itself and for its agents
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenReq"
      responses:
        "201":
          description: Token created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRes"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /tokens/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    get:
      operationId: tokensGet
      summary: Get a token
      tags:
        - Tokens
      description: Retrieves a specific token by ID. Note that the plain token value is not returned in this endpoint.
      x-auth-permissions:
        - role: admin
          permission: all tokens
        - role: participant
          permission: its own tokens and those of its agents
        - role: agent
          permission: not authorized
      responses:
        "200":
          description: The token details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRes"
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    patch:
      operationId: tokensUpdate
      summary: Update a token
      tags:
        - Tokens
      description: Updates an existing token
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: its own tokens and those of its agents
        - role: agent
          permission: not authorized
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Token Name
                role:
                  $ref: "#/components/schemas/AuthRole"
                expireAt:
                  type: string
                  format: date-time
                scopeId:
                  $ref: "#/components/schemas/properties.UUID"
      responses:
        "200":
          description: Token updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRes"
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
    delete:
      operationId: tokensDelete
      summary: Delete a token
      tags:
        - Tokens
      description: Deletes a token by ID
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: its own tokens and those of its agents
        - role: agent
          permission: not authorized
      responses:
        "204":
          description: Token deleted successfully
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /tokens/{id}/regenerate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/properties.UUID"
    post:
      operationId: tokensRegenerate
      summary: Regenerate token value
      tags:
        - Tokens
      description: Regenerates the value for an existing token. The new plain token value is returned in the response and cannot be retrieved later.
      x-auth-permissions:
        - role: admin
          permission: always
        - role: participant
          permission: its own tokens and those of its agents
        - role: agent
          permission: not authorized
      responses:
        "200":
          description: Token value regenerated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRes"
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
  /vault/secrets/{reference}:
    get:
      tags:
        - Vault
      summary: Get secret value
      description: |
        Retrieves the actual value of a secret from the vault. This endpoint is only accessible to agents and allows them to resolve `vault://` references in service properties to retrieve the actual sensitive values.

        **Authorization**: Only agents can access this endpoint.

        **Use Case**: When an agent receives a service configuration with properties containing `vault://abc123` references, it calls this endpoint to retrieve the actual secret values needed for provisioning or managing the service.
      operationId: getSecret
      parameters:
        - name: reference
          in: path
          required: true
          description: The vault reference identifier (without the `vault://` prefix)
          schema:
            type: string
            example: abc123def456
      responses:
        "200":
          description: Secret value retrieved successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - value
                properties:
                  value:
                    description: The actual secret value (can be any JSON type - string, number, object, array, boolean, null)
                    example: my-secret-password
              examples:
                stringSecret:
                  summary: String secret (API key)
                  value:
                    value: sk_live_abc123xyz789
                objectSecret:
                  summary: Object secret (credentials)
                  value:
                    value:
                      username: admin
                      password: secret123
                numberSecret:
                  summary: Number secret
                  value:
                    value: 12345
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          description: Forbidden - only agents can access vault secrets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
        "404":
          description: Secret not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorRes"
              example:
                status: Not found
                message: Secret with reference 'abc123' not found
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  securitySchemes:
    BearerAuth:
      type: oauth2
      description: Role-based authentication using bearer tokens
      flows:
        implicit:
          authorizationUrl: https://api.fulcrum.testudosrl.dev/oauth/authorize
          scopes:
            admin: System administrator with unrestricted access
            participant: Participant administrator that can act as both provider and consumer
            agent: Agent role with access to specific operations
  schemas:
    AgentCreateRes:
      allOf:
        - $ref: "#/components/schemas/AgentRes"
        - type: object
          properties:
            token:
              $ref: "#/components/schemas/TokenRes"
              description: The agent authentication token
    AgentRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: aws-agent-01
        status:
          $ref: "#/components/schemas/AgentStatus"
        providerId:
          $ref: "#/components/schemas/properties.UUID"
        agentTypeId:
          $ref: "#/components/schemas/properties.UUID"
        tags:
          type: array
          items:
            type: string
          example:
            - gpu
            - high-memory
            - ssd
        configuration:
          $ref: "#/components/schemas/JSONObject"
          description: Agent-specific configuration parameters
          example:
            timeout: 30
            retries: 3
            environment: production
        servicePoolSetId:
          $ref: "#/components/schemas/properties.UUID"
          description: Optional service pool set for automatic resource allocation
        participant:
          $ref: "#/components/schemas/ParticipantRes"
        agentType:
          $ref: "#/components/schemas/AgentTypeRes"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AgentStatus:
      type: string
      enum:
        - New
        - Connected
        - Disconnected
        - Error
        - Disabled
    AgentTypeRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: Participant VM Agent
        serviceTypeIds:
          type: array
          items:
            $ref: "#/components/schemas/properties.UUID"
          description: IDs of service types that this agent type can provide
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AuthRole:
      type: string
      enum:
        - admin
        - participant
        - agent
      description: Access role for the token
    CompleteJobReq:
      type: object
      properties:
        agentInstanceId:
          type: string
          description: Agent's native instance identifier for the provisioned resource
          example: i-1234567890abcdef0
        agentInstanceData:
          $ref: "#/components/schemas/JSONObject"
          description: Agent-owned runtime data about the provisioned service
        properties:
          type: object
          additionalProperties: true
          description: Agent-discovered property values to update on the service (only agent-source properties)
          example:
            ipAddress: 192.168.1.100
            port: 8080
    CreateAgentReq:
      type: object
      required:
        - name
        - providerId
        - agentTypeId
      properties:
        name:
          type: string
          example: aws-agent-01
        providerId:
          $ref: "#/components/schemas/properties.UUID"
          description: The participant ID that owns this agent
        agentTypeId:
          $ref: "#/components/schemas/properties.UUID"
          description: The agent type ID
        tags:
          type: array
          items:
            type: string
          example:
            - gpu
            - high-memory
            - ssd
          description: Tags representing capabilities or certifications of this agent
        configuration:
          $ref: "#/components/schemas/JSONObject"
          description: Agent-specific configuration parameters
          example:
            timeout: 30
            retries: 3
            environment: production
        servicePoolSetId:
          $ref: "#/components/schemas/properties.UUID"
          description: Optional service pool set for automatic resource allocation
    CreateAgentTypeReq:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the agent type
          example: VM Agent
          minLength: 1
        serviceTypeIds:
          type: array
          description: Optional list of service type IDs that this agent type can manage
          items:
            $ref: "#/components/schemas/properties.UUID"
          example:
            - 550e8400-e29b-41d4-a716-446655440000
            - 550e8400-e29b-41d4-a716-446655440001
    CreateServiceTypeReq:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the service type
          example: VM Instance
          minLength: 1
        propertySchema:
          $ref: "#/components/schemas/PropertySchema"
          description: Optional property schema defining the structure and validation rules for service properties
        lifecycleSchema:
          $ref: "#/components/schemas/LifecycleSchema"
          description: Optional lifecycle schema defining states, actions, and transitions for services of this type
    ErrorRes:
      type: object
      properties:
        status:
          type: string
          description: User-level status message
          example: Invalid request
        error:
          type: string
          description: Application-level error message
          example: The field 'name' is required
    EventAckReq:
      type: object
      required:
        - subscriberId
        - instanceId
        - lastEventSequenceProcessed
      properties:
        subscriberId:
          type: string
          description: Unique identifier for the subscriber system
          example: external-system
        instanceId:
          type: string
          description: Unique identifier for the consuming instance
          example: instance-1
        lastEventSequenceProcessed:
          type: integer
          format: int64
          description: Sequence number of the last event successfully processed
          minimum: 1
          example: 150
    EventAckRes:
      type: object
      properties:
        lastEventSequenceProcessed:
          type: integer
          format: int64
          description: Updated last event sequence processed
          example: 150
    EventLeaseReq:
      type: object
      required:
        - subscriberId
        - instanceId
      properties:
        subscriberId:
          type: string
          description: Unique identifier for the subscriber system
          example: external-system
        instanceId:
          type: string
          description: Unique identifier for the consuming instance
          example: instance-1
        leaseDurationSeconds:
          type: integer
          description: Lease duration in seconds (default 300, max 3600, min 30)
          minimum: 30
          maximum: 3600
          default: 300
          example: 300
        limit:
          type: integer
          description: Maximum number of events to fetch (default 100, max 1000, min 1)
          minimum: 1
          maximum: 1000
          default: 100
          example: 100
    EventLeaseRes:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/EventRes"
          description: Array of events fetched in chronological order
        leaseExpiresAt:
          type: string
          format: date-time
          description: When the current lease expires
        lastEventSequenceProcessed:
          type: integer
          format: int64
          description: Last event sequence number processed by this subscriber
          example: 150
    EventRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        sequenceNumber:
          type: integer
          format: int64
          description: Sequence number for strict event ordering
        initiatorType:
          type: string
          example: user
        initiatorId:
          type: string
          example: admin
        type:
          type: string
          example: service.created
        properties:
          $ref: "#/components/schemas/JSONObject"
          description: Event payload data
        providerId:
          $ref: "#/components/schemas/properties.UUID"
        agentId:
          $ref: "#/components/schemas/properties.UUID"
        consumerId:
          $ref: "#/components/schemas/properties.UUID"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    FailJobReq:
      type: object
      required:
        - errorMessage
      properties:
        errorMessage:
          type: string
          description: |
            Error message describing the failure. This message is matched against
            lifecycle transition regexps to determine the next service state.
          example: "Failed to create VM: insufficient resources"
    JSONObject:
      type: object
      additionalProperties: true
      description: A generic properties.JSON object
    JobRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        providerId:
          $ref: "#/components/schemas/properties.UUID"
          description: ID of the participant that provides the service
        consumerId:
          $ref: "#/components/schemas/properties.UUID"
          description: ID of the participant that consumes the service
        agentId:
          $ref: "#/components/schemas/properties.UUID"
        serviceId:
          $ref: "#/components/schemas/properties.UUID"
        action:
          $ref: "#/components/schemas/ServiceAction"
        params:
          $ref: "#/components/schemas/JSONObject"
          description: Parameters for the job action
        status:
          $ref: "#/components/schemas/JobStatus"
        priority:
          type: integer
          example: 1
        errorMessage:
          type: string
          example: "Failed to create VM: insufficient resources"
        claimedAt:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
        completedAt:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        service:
          $ref: "#/components/schemas/ServiceRes"
          description: Associated service details (optional)
    JobStatus:
      type: string
      enum:
        - Pending
        - Processing
        - Completed
        - Failed
      description: |
        Job status transitions:
        - Pending: Job created and waiting for agent to claim
        - Processing: Job claimed by agent and in progress
        - Completed: Job successfully finished
        - Failed: Job encountered an error (error message drives service state transition via regexp)
    LifecycleAction:
      type: object
      required:
        - name
        - transitions
      properties:
        name:
          type: string
          description: Name of the action (e.g., start, stop, restart)
          example: start
        requestSchemaType:
          type: string
          enum:
            - properties
          description: |
            Type of request body expected for this action:
            - properties: Action accepts service properties in request body
            - (none): Action requires no request body
          example: properties
        transitions:
          type: array
          description: State transitions for this action
          items:
            $ref: "#/components/schemas/LifecycleTransition"
    LifecycleSchema:
      type: object
      description: |
        Schema-driven lifecycle definition for service state management. Each ServiceType can define
        its own custom lifecycle with states, actions, and transitions.
      required:
        - states
        - actions
        - initialState
      properties:
        states:
          type: array
          description: List of possible service states
          items:
            $ref: "#/components/schemas/LifecycleState"
          example:
            - name: New
            - name: Stopped
            - name: Started
            - name: Deleted
        actions:
          type: array
          description: List of available actions that can be performed on services
          items:
            $ref: "#/components/schemas/LifecycleAction"
        initialState:
          type: string
          description: Initial state for new services
          example: New
        terminalStates:
          type: array
          description: States where no further actions can be performed
          items:
            type: string
          example:
            - Deleted
        runningStates:
          type: array
          description: States considered "running" for uptime calculation
          items:
            type: string
          example:
            - Started
    LifecycleState:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Unique name for this state
          example: Started
    LifecycleTransition:
      type: object
      required:
        - from
        - to
      properties:
        from:
          type: string
          description: Source state for this transition
          example: Stopped
        to:
          type: string
          description: Destination state for this transition
          example: Started
        onError:
          type: boolean
          description: Whether this transition applies to error cases
          default: false
        onErrorRegexp:
          type: string
          description: |
            Regular expression to match error messages. When a job fails, the error message
            is matched against this regexp to determine which error transition to use.
            If not specified, matches any error.
          example: quota.*exceeded
    MetricEntityType:
      type: string
      enum:
        - Agent
        - Service
        - Resource
    MetricEntryReq:
      type: object
      required:
        - resourceId
        - typeName
        - value
      properties:
        serviceId:
          $ref: "#/components/schemas/properties.UUID"
          description: ID of the service associated with this metric
        agentInstanceId:
          type: string
          description: Agent instance ID of the service associated with this metric
          example: i-12345
        resourceId:
          type: string
          example: cpu-1
        value:
          type: number
          format: float
          example: 78.5
        typeName:
          type: string
          description: Name of the metric type
          example: cpu.usage
    MetricEntryRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        providerId:
          $ref: "#/components/schemas/properties.UUID"
        consumerId:
          $ref: "#/components/schemas/properties.UUID"
        agentId:
          $ref: "#/components/schemas/properties.UUID"
        serviceId:
          $ref: "#/components/schemas/properties.UUID"
        resourceId:
          type: string
          example: cpu-1
        value:
          type: number
          format: float
          example: 78.5
        typeId:
          type: string
          description: Metric type ID as string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    MetricTypeReq:
      type: object
      required:
        - name
        - entityType
      properties:
        name:
          type: string
          example: cpu_usage
        entityType:
          $ref: "#/components/schemas/MetricEntityType"
    MetricTypeRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        entityType:
          $ref: "#/components/schemas/MetricEntityType"
        name:
          type: string
          example: cpu_usage
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PageRes:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        totalItems:
          type: integer
          format: int64
          description: Total number of items across all pages
        totalPages:
          type: integer
          description: Total number of pages
        currentPage:
          type: integer
          description: Current page number
        hasNext:
          type: boolean
          description: Whether there is a next page
        hasPrev:
          type: boolean
          description: Whether there is a previous page
    ParticipantReq:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          example: Test Participant
        status:
          $ref: "#/components/schemas/ParticipantStatus"
    ParticipantRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: Test Participant
        status:
          $ref: "#/components/schemas/ParticipantStatus"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ParticipantStatus:
      type: string
      enum:
        - Enabled
        - Disabled
    PropertyDefinition:
      type: object
      properties:
        type:
          type: string
          enum:
            - string
            - integer
            - number
            - boolean
            - object
            - array
            - serviceReference
            - json
          description: The data type of the property
        label:
          type: string
          description: Human-readable label for the property
        required:
          type: boolean
          description: Whether the property is required
          default: false
        default:
          description: Default value for the property
        validators:
          type: array
          items:
            $ref: "#/components/schemas/ValidatorDefinition"
          description: Array of validation rules
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/PropertyDefinition"
          description: Nested properties for object types
        items:
          $ref: "#/components/schemas/PropertyDefinition"
          description: Schema for array items
        source:
          type: string
          enum:
            - input
            - agent
            - system
          description: Who can set and update this property (input = users, agent = agents, system = automatic allocation)
          default: input
        updatable:
          type: string
          enum:
            - always
            - never
            - statuses
          description: When the property can be updated (always = any time, never = immutable, statuses = only in specific statuses)
          default: always
        updatableIn:
          type: array
          items:
            type: string
          description: List of service statuses when property can be updated (required when updatable=statuses)
          example:
            - Stopped
        servicePoolType:
          type: string
          description: Pool type to allocate from (requires source=system). Must match a ServicePool.type in the agent's ServicePoolSet
          example: public_ip
    PropertySchema:
      type: object
      description: properties.JSON schema defining validation rules for service properties
      additionalProperties:
        $ref: "#/components/schemas/PropertyDefinition"
    ServiceAction:
      type: string
      description: Lifecycle action to perform on the service. Valid values are defined by the service type's lifecycle schema
      example: start
    ServiceGroupReq:
      type: object
      required:
        - name
        - consumerId
      properties:
        name:
          type: string
          example: Web Servers
        consumerId:
          $ref: "#/components/schemas/properties.UUID"
          description: ID of the consumer participant that owns this service group
    ServiceGroupRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: Web Servers
        consumerId:
          $ref: "#/components/schemas/properties.UUID"
          description: ID of the consumer participant that owns this service group
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ServiceOptionReq:
      type: object
      required:
        - providerId
        - serviceOptionTypeId
        - name
        - value
      properties:
        providerId:
          $ref: "#/components/schemas/properties.UUID"
        serviceOptionTypeId:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: Ubuntu 22.04 LTS
        value:
          description: Any JSON value (string, number, object, array)
          example: ubuntu-22.04
        enabled:
          type: boolean
          default: true
        displayOrder:
          type: integer
          default: 0
    ServiceOptionRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        providerId:
          $ref: "#/components/schemas/properties.UUID"
        serviceOptionTypeId:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: Ubuntu 22.04 LTS
        value:
          description: Any JSON value (string, number, object, array)
          example: ubuntu-22.04
        enabled:
          type: boolean
        displayOrder:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ServiceOptionTypeReq:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          example: Operating System
        type:
          type: string
          example: operating_system
          description: Unique identifier (lowercase, underscores)
        description:
          type: string
          example: Available operating systems for VMs
    ServiceOptionTypeRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: Operating System
        type:
          type: string
          example: operating_system
        description:
          type: string
          example: Available operating systems for VMs
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ServicePoolRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: Public IP Pool
        type:
          type: string
          example: public_ip
        propertyType:
          type: string
          enum:
            - string
            - integer
            - number
            - boolean
            - json
          example: string
          description: Property type that this pool provides
        generatorType:
          type: string
          enum:
            - list
            - subnet
          example: list
        generatorConfig:
          type: object
          example:
            cidr: 192.168.1.0/24
        servicePoolSetId:
          $ref: "#/components/schemas/properties.UUID"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ServicePoolSetRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: Production Pools
        providerId:
          $ref: "#/components/schemas/properties.UUID"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ServicePoolValueRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: 192.168.1.10
        value:
          description: Any JSON value (string, number, object, array)
          example: 192.168.1.10
        servicePoolId:
          $ref: "#/components/schemas/properties.UUID"
        serviceId:
          $ref: "#/components/schemas/properties.UUID"
          description: Service this value is allocated to (null if available)
        propertyName:
          type: string
          example: ipAddress
          description: Property name this value is allocated to
        allocatedAt:
          type: string
          format: date-time
          description: When this value was allocated
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateServicePoolReq:
      type: object
      required:
        - name
        - type
        - propertyType
        - generatorType
        - servicePoolSetId
      properties:
        name:
          type: string
          example: Public IP Pool
          description: Name of the pool
        type:
          type: string
          example: public_ip
          description: Type identifier referenced in servicePoolType property field
        propertyType:
          type: string
          enum:
            - string
            - integer
            - number
            - boolean
            - json
          example: string
          description: Property type that this pool provides (must match property definitions)
        generatorType:
          type: string
          enum:
            - list
            - subnet
          example: list
          description: "Allocation strategy: 'list' for pre-configured values, 'subnet' for IP ranges"
        generatorConfig:
          type: object
          description: Generator-specific configuration (required for subnet)
          example:
            cidr: 192.168.1.0/24
            excludeFirst: 1
            excludeLast: 1
        servicePoolSetId:
          $ref: "#/components/schemas/properties.UUID"
    CreateServicePoolSetReq:
      type: object
      required:
        - name
        - providerId
      properties:
        name:
          type: string
          example: Production Pools
          description: Name of the pool set
        providerId:
          $ref: "#/components/schemas/properties.UUID"
    CreateServicePoolValueReq:
      type: object
      required:
        - servicePoolId
        - name
        - value
      properties:
        servicePoolId:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: 192.168.1.10
          description: Display name for the value
        value:
          description: Any JSON value (string, number, object, array)
          example: 192.168.1.10
    UpdateServicePoolReq:
      type: object
      properties:
        name:
          type: string
          example: Public IP Pool - Updated
        generatorConfig:
          type: object
          description: Generator-specific configuration
    UpdateServicePoolSetReq:
      type: object
      properties:
        name:
          type: string
          example: Production Pools - Updated
    ServiceReq:
      type: object
      required:
        - name
        - serviceTypeId
        - groupId
      properties:
        name:
          type: string
          example: web-server-01
        properties:
          $ref: "#/components/schemas/JSONObject"
        agentTags:
          type: array
          items:
            type: string
          example:
            - gpu
            - high-memory
          description: Tags used for agent discovery when agentId is not specified
        agentId:
          $ref: "#/components/schemas/properties.UUID"
          description: Specific agent ID (optional - if not provided, agent discovery will use agentTags)
        serviceTypeId:
          $ref: "#/components/schemas/properties.UUID"
        groupId:
          $ref: "#/components/schemas/properties.UUID"
    ServiceRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: web-server-01
        status:
          type: string
          description: Current lifecycle state. Valid values are defined by the service type's lifecycle schema
          example: Started
        properties:
          $ref: "#/components/schemas/JSONObject"
        agentInstanceData:
          $ref: "#/components/schemas/JSONObject"
        agentInstanceId:
          anyOf:
            - type: string
            - type: "null"
        providerId:
          $ref: "#/components/schemas/properties.UUID"
        consumerId:
          $ref: "#/components/schemas/properties.UUID"
        agentId:
          $ref: "#/components/schemas/properties.UUID"
        serviceTypeId:
          $ref: "#/components/schemas/properties.UUID"
        groupId:
          $ref: "#/components/schemas/properties.UUID"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ServiceTypeRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: VM
        propertySchema:
          $ref: "#/components/schemas/PropertySchema"
        lifecycleSchema:
          $ref: "#/components/schemas/LifecycleSchema"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TokenReq:
      type: object
      required:
        - name
        - role
        - expireAt
      properties:
        name:
          type: string
          example: API Access Token
        role:
          $ref: "#/components/schemas/AuthRole"
        expireAt:
          type: string
          format: date-time
          example: "2025-12-31T23:59:59Z"
        scopeId:
          $ref: "#/components/schemas/properties.UUID"
          description: Required for participant and agent roles. For participant role - the participant ID; for agent role - the agent ID
    TokenRes:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties.UUID"
        name:
          type: string
          example: API Access Token
        role:
          $ref: "#/components/schemas/AuthRole"
        expireAt:
          type: string
          format: date-time
        participantId:
          $ref: "#/components/schemas/properties.UUID"
          description: For participant role tokens - the participant ID
        agentId:
          $ref: "#/components/schemas/properties.UUID"
          description: For agent role tokens - the agent ID
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        value:
          type: string
          description: Plain token value. Only returned during token creation or regeneration
          example: eyJhbGciOiJIUzI1NiIsInR5c...
    UpdateAgentReq:
      type: object
      properties:
        name:
          type: string
          example: aws-agent-01
        status:
          $ref: "#/components/schemas/AgentStatus"
        tags:
          type: array
          items:
            type: string
          example:
            - gpu
            - high-memory
            - ssd
          description: Tags representing capabilities or certifications of this agent
        configuration:
          $ref: "#/components/schemas/JSONObject"
          description: Agent-specific configuration parameters
          example:
            timeout: 60
            retries: 5
            environment: staging
        servicePoolSetId:
          $ref: "#/components/schemas/properties.UUID"
          description: Optional service pool set for automatic resource allocation
    UpdateAgentTypeReq:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the agent type
          example: Updated VM Agent
          minLength: 1
        serviceTypeIds:
          type: array
          description: Updated list of service type IDs that this agent type can manage
          items:
            $ref: "#/components/schemas/properties.UUID"
          example:
            - 550e8400-e29b-41d4-a716-446655440000
            - 550e8400-e29b-41d4-a716-446655440002
    UpdateServiceTypeReq:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the service type
          example: Updated VM Instance
          minLength: 1
        propertySchema:
          $ref: "#/components/schemas/PropertySchema"
          description: Updated property schema defining the structure and validation rules for service properties
        lifecycleSchema:
          $ref: "#/components/schemas/LifecycleSchema"
          description: Updated lifecycle schema defining states, actions, and transitions for services of this type
    ValidationError:
      type: object
      properties:
        path:
          type: string
          description: Path to the property that failed validation
          example: cpu
        message:
          type: string
          description: Error message describing the validation failure
          example: "property 'cpu' cannot be updated in status 'Started' (allowed statuses: [Stopped])"
      examples:
        - path: ipAddress
          message: "property 'ipAddress' cannot be updated by user (source: agent)"
        - path: region
          message: "property 'region' cannot be updated (updatable: never)"
        - path: diskSize
          message: "property 'diskSize' cannot be updated in status 'Started' (allowed statuses: [Stopped])"
    ValidatorDefinition:
      type: object
      required:
        - type
        - value
      properties:
        type:
          type: string
          enum:
            - minLength
            - maxLength
            - pattern
            - enum
            - min
            - max
            - minItems
            - maxItems
            - uniqueItems
            - sameOrigin
          description: Type of validator
        value:
          description: Value for the validator (type depends on validator type)
    properties.UUID:
      type: string
      format: uuid
      example: 123e4567-e89b-12d3-a456-426614174000
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorRes"
