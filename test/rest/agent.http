### Test Agent API

### Variables
@baseUrl = http://localhost:3000/api/v1
@adminToken = change-me

### Create a provider for testing
# @name createProvider
POST {{baseUrl}}/participants
Authorization: Bearer {{adminToken}}

{
    "name": "Test Agent Provider",
    "status": "Enabled"
}

@providerId = {{createProvider.response.body.$.id}}

### Create agent type with configuration schema
# @name createAgentType
POST {{baseUrl}}/agent-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "VM Agent {{$timestamp}}",
    "configurationSchema": {
        "properties": {
            "apiEndpoint": {
                "type": "string",
                "label": "API Endpoint",
                "required": true,
            "validators": [
                {
                    "type": "pattern",
                    "config": {
                        "pattern": "^https?://"
                    }
                }
            ]
            },
            "apiKey": {
                "type": "string",
                "label": "API Key",
                "required": true,
                "secret": {
                    "type": "persistent"
                }
            },
            "maxRetries": {
                "type": "integer",
                "label": "Maximum Retries",
                "default": 3,
            "validators": [
                {
                    "type": "min",
                    "config": {
                        "value": 0
                    }
                },
                {
                    "type": "max",
                    "config": {
                        "value": 10
                    }
                }
            ]
            },
            "pollingInterval": {
                "type": "integer",
                "label": "Polling Interval (seconds)",
                "default": 30,
            "validators": [
                {
                    "type": "min",
                    "config": {
                        "value": 5
                    }
                }
            ]
            },
            "enableMetrics": {
                "type": "boolean",
                "label": "Enable Metrics Collection",
                "default": true
            },
            "logLevel": {
                "type": "string",
                "label": "Log Level",
                "default": "info",
            "validators": [
                {
                    "type": "enum",
                    "config": {
                        "values": ["debug", "info", "warn", "error"]
                    }
                }
            ]
            }
        }
    }
}

@agentTypeId = {{createAgentType.response.body.id}}

### Create a new agent with validated configuration
# @name createAgent
POST {{baseUrl}}/agents
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Agent",
    "providerId": "{{providerId}}",
    "agentTypeId": "{{agentTypeId}}",
    "tags": ["test-agent-{{$timestamp}}", "high-performance", "ssd-storage"],
    "configuration": {
        "apiEndpoint": "https://api.provider.example.com",
        "apiKey": "secret-key-12345",
        "maxRetries": 5,
        "pollingInterval": 60,
        "logLevel": "debug"
    }
}

@agentId = {{createAgent.response.body.$.id}}

### ❌ TEST: Create agent with missing required field (should fail with 400)
POST {{baseUrl}}/agents
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Agent Missing Field",
    "providerId": "{{providerId}}",
    "agentTypeId": "{{agentTypeId}}",
    "tags": ["test"],
    "configuration": {
        "apiEndpoint": "https://api.provider.example.com"
    }
}

### ❌ TEST: Create agent with invalid pattern (should fail with 400)
POST {{baseUrl}}/agents
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Agent Invalid Pattern",
    "providerId": "{{providerId}}",
    "agentTypeId": "{{agentTypeId}}",
    "tags": ["test"],
    "configuration": {
        "apiEndpoint": "not-a-url",
        "apiKey": "secret-key-12345"
    }
}

### ❌ TEST: Create agent with invalid enum value (should fail with 400)
POST {{baseUrl}}/agents
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Agent Invalid Enum",
    "providerId": "{{providerId}}",
    "agentTypeId": "{{agentTypeId}}",
    "tags": ["test"],
    "configuration": {
        "apiEndpoint": "https://api.provider.example.com",
        "apiKey": "secret-key-12345",
        "logLevel": "trace"
    }
}

### ❌ TEST: Create agent with out of range value (should fail with 400)
POST {{baseUrl}}/agents
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Agent Out of Range",
    "providerId": "{{providerId}}",
    "agentTypeId": "{{agentTypeId}}",
    "tags": ["test"],
    "configuration": {
        "apiEndpoint": "https://api.provider.example.com",
        "apiKey": "secret-key-12345",
        "maxRetries": 50
    }
}

### ✅ Create agent with only required fields (defaults applied)
# @name createAgentWithDefaults
POST {{baseUrl}}/agents
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Agent Defaults",
    "providerId": "{{providerId}}",
    "agentTypeId": "{{agentTypeId}}",
    "tags": ["minimal-agent", "test"],
    "configuration": {
        "apiEndpoint": "https://api.provider.example.com",
        "apiKey": "secret-key-67890"
    }
}

@agentIdWithDefaults = {{createAgentWithDefaults.response.body.$.id}}

### Get agent to see defaults applied
GET {{baseUrl}}/agents/{{agentIdWithDefaults}}
Authorization: Bearer {{adminToken}}

### Create a new agent token
# @name createToken
POST {{baseUrl}}/tokens
Authorization: Bearer {{adminToken}}

{
  "name": "Test Agent Token",
  "role": "agent",
  "expireAt": "{{$datetime iso8601 1 y}}",
  "scopeId": "{{agentId}}"
}

@agentToken = {{createToken.response.body.$.value}}

### Get agent's own information via authenticated endpoint
# @name getAgentMe
GET {{baseUrl}}/agents/me
Authorization: Bearer {{agentToken}}

### Update agent status via authenticated endpoint
PUT {{baseUrl}}/agents/me/status
Authorization: Bearer {{agentToken}}

{
    "status": "Connected"
}

### Get an agent by ID
GET {{baseUrl}}/agents/{{agentId}}
Authorization: Bearer {{agentToken}}

### Get an agent by ID
GET {{baseUrl}}/agents/{{agentId}}
Authorization: Bearer {{adminToken}}

### List all agents
GET {{baseUrl}}/agents
Authorization: Bearer {{adminToken}}

### List agents with filters
GET {{baseUrl}}/agents?status=Connected
Authorization: Bearer {{adminToken}}

### List agents for specific provider
GET {{baseUrl}}/agents?providerId={{providerId}}
Authorization: Bearer {{adminToken}}

### Update an agent with validated configuration
PATCH {{baseUrl}}/agents/{{agentId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Agent Updated",
    "status": "Disconnected",
    "tags": ["updated-agent", "high-performance"],
    "configuration": {
        "apiEndpoint": "https://api-v2.provider.example.com",
        "apiKey": "updated-secret-key-99999",
        "maxRetries": 10,
        "pollingInterval": 120,
        "enableMetrics": false,
        "logLevel": "error"
    }
}

### ❌ TEST: Update agent with invalid configuration (should fail with 400)
PATCH {{baseUrl}}/agents/{{agentId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "configuration": {
        "apiEndpoint": "https://api.provider.example.com",
        "apiKey": "secret-key-12345",
        "pollingInterval": 2
    }
}

### Create a new token for the agent
# @name createNewToken
POST {{baseUrl}}/tokens
Authorization: Bearer {{adminToken}}

{
  "name": "New Agent Token",
  "role": "agent",
  "expireAt": "{{$datetime iso8601 1 y}}",
  "scopeId": "{{agentId}}"
}

@newAgentToken = {{createNewToken.response.body.$.value}}

### Test new token by updating status with new token
PUT {{baseUrl}}/agents/me/status
Authorization: Bearer {{newAgentToken}}

{
    "status": "Connected"
}

### Test new token by getting agent information with rotated token
GET {{baseUrl}}/agents/me
Authorization: Bearer {{newAgentToken}}

### Delete an agent
DELETE {{baseUrl}}/agents/{{agentId}}
Authorization: Bearer {{adminToken}}
