### Complete Job Lifecycle with Property Source & Updatability Testing
### This file demonstrates the full service lifecycle including:
### - Service pool setup and automatic resource allocation
### - Agent-set properties during job completion
### - Pool-allocated properties (publicIp from pool)
### - Immutable property validation
### - State-conditional property updates
### - Source-based property access control
### - Service option validation (operating system images)
### - Non-standard state transitions (Maintenance mode)
### - Pool value release on service deletion

### Variables
@baseUrl = http://localhost:3000/api/v1
@adminToken = change-me

###############################################################################
### PART 1: SETUP
###############################################################################

### Create Service Option Type for Operating Systems
# @name createOSOptionType
POST {{baseUrl}}/service-option-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Operating System {{$timestamp}}",
    "type": "operating_system_{{$timestamp}}",
    "description": "Available operating system images for VMs"
}

### Create Provider (moved here to use in service options and pools)
# @name createProvider
POST {{baseUrl}}/participants
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Provider {{$guid}}",
    "status": "Enabled",
    "attributes": {
        "type": ["test"]
    }
}

### Create Service Pool Set
# @name createPoolSet
POST {{baseUrl}}/service-pool-sets
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Pools {{$guid}}",
    "providerId": "{{createProvider.response.body.id}}"
}

### Create IP Pool (list type)
# @name createIPPool
POST {{baseUrl}}/service-pools
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Public IP Pool",
    "type": "public_ip",
    "propertyType": "string",
    "generatorType": "list",
    "servicePoolSetId": "{{createPoolSet.response.body.id}}"
}

### Add public IP value to pool
POST {{baseUrl}}/service-pool-values
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "servicePoolId": "{{createIPPool.response.body.id}}",
    "name": "185.123.45.11",
    "value": "185.123.45.11"
}

### Create Service Option - Ubuntu 20.04
# @name createOSOption1
POST {{baseUrl}}/service-options
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "providerId": "{{createProvider.response.body.id}}",
    "serviceOptionTypeId": "{{createOSOptionType.response.body.id}}",
    "name": "Ubuntu 20.04 LTS",
    "value": "ubuntu:20.04",
    "enabled": true,
    "displayOrder": 1
}

### List service options for provider (verify they were created)
GET {{baseUrl}}/service-options?providerId={{createProvider.response.body.id}}
Authorization: Bearer {{adminToken}}

### Create VM Service Type with serviceOption validator for image
# @name createVMServiceType
POST {{baseUrl}}/service-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "vm {{$guid}}",
    "propertySchema": {
        "cpu": {
            "type": "integer",
            "label": "CPU Cores",
            "source": "input",
            "updatable": "statuses",
            "updatableIn": ["Stopped"],
            "required": true,
            "validators": [
                {
                    "type": "enum",
                    "value": [1, 2, 4, 8, 16, 32]
                }
            ]
        },
        "memory": {
            "type": "integer",
            "label": "Memory (MB)",
            "source": "input",
            "updatable": "statuses",
            "updatableIn": ["Stopped"],
            "required": true,
            "validators": [
                {
                    "type": "enum",
                    "value": [512, 1024, 2048, 4096, 8192, 16384, 32768, 65536]
                }
            ]
        },
        "disk": {
            "type": "integer",
            "label": "Disk (GB)",
            "source": "input",
            "updatable": "statuses",
            "updatableIn": ["Stopped"],
            "required": true,
            "validators": [
                {
                    "type": "enum",
                    "value": [8, 16, 32, 64, 128, 256, 512, 1024]
                }
            ]
        },
        "image": {
            "type": "string",
            "label": "Image",
            "source": "input",
            "updatable": "never",
            "required": true,
            "validators": [
                {
                    "type": "serviceOption",
                    "value": "{{createOSOptionType.response.body.type}}"
                }
            ]
        },
        "internalIp": {
            "type": "string",
            "label": "Internal IP",
            "source": "agent",
            "updatable": "never"
        },
        "publicIp": {
            "type": "string",
            "label": "Public IP",
            "source": "system",
            "updatable": "never",
            "servicePoolType": "public_ip"
        }
    },
    "lifecycleSchema": {
        "states": [
            {"name": "New"},
            {"name": "Stopped"},
            {"name": "Started"},
            {"name": "Maintenance"},
            {"name": "Deleted"}
        ],
        "actions": [
            {
                "name": "create",
                "requestSchemaType": "properties",
                "transitions": [
                    {"from": "New", "to": "Stopped"}
                ]
            },
            {
                "name": "start",
                "transitions": [
                    {"from": "Stopped", "to": "Started"},
                    {"from": "Stopped", "to": "Stopped", "onError": true}
                ]
            },
            {
                "name": "stop",
                "transitions": [
                    {"from": "Started", "to": "Stopped"},
                    {"from": "Started", "to": "Started", "onError": true}
                ]
            },
            {
                "name": "update",
                "requestSchemaType": "properties",
                "transitions": [
                    {"from": "Stopped", "to": "Stopped"},
                    {"from": "Started", "to": "Started"}
                ]
            },
            {
                "name": "enterMaintenance",
                "transitions": [
                    {"from": "Stopped", "to": "Maintenance"},
                    {"from": "Started", "to": "Maintenance"},
                    {"from": "Stopped", "to": "Stopped", "onError": true},
                    {"from": "Started", "to": "Started", "onError": true}
                ]
            },
            {
                "name": "exitMaintenance",
                "transitions": [
                    {"from": "Maintenance", "to": "Stopped"},
                    {"from": "Maintenance", "to": "Maintenance", "onError": true}
                ]
            },
            {
                "name": "delete",
                "transitions": [
                    {"from": "Stopped", "to": "Deleted"},
                    {"from": "Started", "to": "Deleted"}
                ]
            }
        ],
        "initialState": "New",
        "terminalStates": ["Deleted"],
        "runningStates": ["Started"]
    }
}

### Create Agent Type
# @name createAgentType
POST {{baseUrl}}/agent-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "vm-agent {{$guid}}",
    "serviceTypeIds": [
        "{{createVMServiceType.response.body.id}}"
    ]
}

### Create Agent (with pool set reference for automatic pool allocation)
# @name createAgent
POST {{baseUrl}}/agents
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Agent {{$guid}}",
    "agentTypeId": "{{createAgentType.response.body.id}}",
    "providerId": "{{createProvider.response.body.id}}",
    "servicePoolSetId": "{{createPoolSet.response.body.id}}",
    "tags": ["test-agent", "property-testing"]
}

@agentId = {{createAgent.response.body.id}}

### Create Agent Token
# @name createAgentToken
POST {{baseUrl}}/tokens
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Agent Token",
    "role": "agent",
    "expireAt": "{{$datetime iso8601 1 y}}",
    "scopeId": "{{agentId}}"
}

@agentToken = {{createAgentToken.response.body.value}}

### Create Consumer
# @name createConsumer
POST {{baseUrl}}/participants
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Consumer {{$guid}}",
    "status": "Enabled"
}

### Create Service Group
# @name createServiceGroup
POST {{baseUrl}}/service-groups
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test Service Group {{$guid}}",
    "consumerId": "{{createConsumer.response.body.id}}"
}

###############################################################################
### PART 2: SERVICE OPTION VALIDATION TESTING
###############################################################################

### ✅ TEST: Validate properties with valid image (should return valid: true)
POST {{baseUrl}}/service-types/{{createVMServiceType.response.body.id}}/validate
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "groupId": "{{createServiceGroup.response.body.id}}",
    "providerId": "{{createProvider.response.body.id}}",
    "properties": {
        "cpu": 4,
        "memory": 8192,
        "disk": 128,
        "image": "ubuntu:20.04"
    }
}

### ❌ TEST: Validate properties with invalid image (should return valid: false)
POST {{baseUrl}}/service-types/{{createVMServiceType.response.body.id}}/validate
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "groupId": "{{createServiceGroup.response.body.id}}",
    "providerId": "{{createProvider.response.body.id}}",
    "properties": {
        "cpu": 4,
        "memory": 8192,
        "disk": 128,
        "image": "invalid-os:999"
    }
}

### ❌ TEST: Try to create service with invalid image (not in service options - should fail with 400)
POST {{baseUrl}}/services
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Invalid VM {{$guid}}",
    "properties": {
        "cpu": 4,
        "memory": 8192,
        "disk": 128,
        "image": "invalid-os:999"
    },
    "agentId": "{{agentId}}",
    "serviceTypeId": "{{createVMServiceType.response.body.id}}",
    "groupId": "{{createServiceGroup.response.body.id}}"
}

###############################################################################
### PART 3: SERVICE CREATION & INITIAL JOB
###############################################################################

### Create VM Service (user sets input properties, agent will set internalIp)
# @name createService
POST {{baseUrl}}/services
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "Test VM {{$guid}}",
    "properties": {
        "cpu": 4,
        "memory": 8192,
        "disk": 128,
        "image": "ubuntu:20.04"
    },
    "agentId": "{{agentId}}",
    "serviceTypeId": "{{createVMServiceType.response.body.id}}",
    "groupId": "{{createServiceGroup.response.body.id}}"
}

@serviceId = {{createService.response.body.id}}

### Get pending jobs (should have a Create job)
# @name pendingCreateJobs
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@createJobId = {{pendingCreateJobs.response.body.$[0].id}}

### Claim the Create job
POST {{baseUrl}}/jobs/{{createJobId}}/claim
Authorization: Bearer {{agentToken}}

### Complete the Create job - agent sets internalIp property (publicIp auto-allocated from pool)
POST {{baseUrl}}/jobs/{{createJobId}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "properties": {
        "internalIp": "10.{{$randomInt 0 255}}.{{$randomInt 0 255}}.{{$randomInt 0 255}}"
    },
    "agentInstanceId": "vm-{{$guid}}",
    "agentInstanceData": {
        "status": "success",
        "details": {
            "duration": "5s",
            "output": "VM created successfully"
        }
    }
}

### Get service (verify internalIp and publicIp are now set - publicIp auto-allocated from pool)
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

### View pool allocation status (should show one IP allocated to our service)
GET {{baseUrl}}/service-pool-values?servicePoolId={{createIPPool.response.body.id}}
Authorization: Bearer {{adminToken}}

###############################################################################
### PART 4: PROPERTY UPDATE VALIDATION TESTS (Expected Failures)
###############################################################################

### ❌ TEST 1: Try to update immutable property (should fail with 400)
PATCH {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "properties": {
        "image": "ubuntu:22.04"
    }
}

### ❌ TEST 2: Try to update agent-source property as user (should fail with 400)
PATCH {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "properties": {
        "internalIp": "192.168.1.1"
    }
}

###############################################################################
### PART 5: START SERVICE
###############################################################################

### Start service (creates Start job)
POST {{baseUrl}}/services/{{serviceId}}/start
Authorization: Bearer {{adminToken}}

### Get pending jobs (should have a Start job)
# @name pendingStartJobs
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@startJobId = {{pendingStartJobs.response.body.$[0].id}}

### Claim the Start job
POST {{baseUrl}}/jobs/{{startJobId}}/claim
Authorization: Bearer {{agentToken}}

### Complete the Start job
POST {{baseUrl}}/jobs/{{startJobId}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "agentInstanceData": {
        "status": "running",
        "details": {
            "duration": "3s",
            "output": "VM started successfully"
        }
    }
}

### Get service (verify status is Started)
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

###############################################################################
### PART 6: AGENT IMMUTABLE PROPERTY UPDATE TEST
###############################################################################

### ❌ TEST: Try to update immutable agent property during job completion (should fail with 400)
### Stop and restart to create another Start job where agent tries to update internalIp

### Stop service to create a new job
POST {{baseUrl}}/services/{{serviceId}}/stop
Authorization: Bearer {{adminToken}}

### Get pending jobs
# @name pendingStopJobsForImmutableTest
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@stopJobIdForImmutableTest = {{pendingStopJobsForImmutableTest.response.body.$[0].id}}

### Claim the Stop job
POST {{baseUrl}}/jobs/{{stopJobIdForImmutableTest}}/claim
Authorization: Bearer {{agentToken}}

### Complete the Stop job
POST {{baseUrl}}/jobs/{{stopJobIdForImmutableTest}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "agentInstanceData": {
        "status": "stopped"
    }
}

### Start service again
POST {{baseUrl}}/services/{{serviceId}}/start
Authorization: Bearer {{adminToken}}

### Get pending Start job
# @name pendingStartJobsForImmutableTest
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@startJobIdForImmutableTest = {{pendingStartJobsForImmutableTest.response.body.$[0].id}}

### Claim the Start job
POST {{baseUrl}}/jobs/{{startJobIdForImmutableTest}}/claim
Authorization: Bearer {{agentToken}}

### ❌ Try to complete with updated internalIp (should fail - property is immutable)
POST {{baseUrl}}/jobs/{{startJobIdForImmutableTest}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "properties": {
        "internalIp": "192.168.99.99"
    },
    "agentInstanceData": {
        "status": "running"
    }
}

### ✅ Now complete the Start job successfully (without updating internalIp)
POST {{baseUrl}}/jobs/{{startJobIdForImmutableTest}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "agentInstanceData": {
        "status": "running",
        "details": {
            "duration": "3s",
            "output": "VM started successfully"
        }
    }
}

### Get service (verify status is Started)
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

###############################################################################
### PART 7: STATE-CONDITIONAL UPDATE TEST WHILE STARTED
###############################################################################

### ❌ TEST 4: Try to update state-conditional property while Started (should fail with 400)
PATCH {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "properties": {
        "cpu": 8
    }
}

###############################################################################
### PART 8: STOP SERVICE
###############################################################################

### Stop service (creates Stop job)
POST {{baseUrl}}/services/{{serviceId}}/stop
Authorization: Bearer {{adminToken}}

### Get pending jobs (should have a Stop job)
# @name pendingStopJobs
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@stopJobId = {{pendingStopJobs.response.body.$[0].id}}

### Claim the Stop job
POST {{baseUrl}}/jobs/{{stopJobId}}/claim
Authorization: Bearer {{agentToken}}

### Complete the Stop job
POST {{baseUrl}}/jobs/{{stopJobId}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "agentInstanceData": {
        "status": "stopped",
        "details": {
            "duration": "2s",
            "output": "VM stopped successfully"
        }
    }
}

### Get service (verify status is Stopped)
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

###############################################################################
### PART 9: SUCCESSFUL STATE-CONDITIONAL UPDATE WHILE STOPPED
###############################################################################

### ✅ TEST 5: Update state-conditional properties while Stopped (should succeed)
PATCH {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "properties": {
        "cpu": 8,
        "memory": 16384,
        "disk": 256
    }
}

### Get pending jobs (should have a ColdUpdate job)
# @name pendingUpdateJobs
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@updateJobId = {{pendingUpdateJobs.response.body.$[0].id}}

### Claim the ColdUpdate job
POST {{baseUrl}}/jobs/{{updateJobId}}/claim
Authorization: Bearer {{agentToken}}

### Complete the ColdUpdate job
POST {{baseUrl}}/jobs/{{updateJobId}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "agentInstanceData": {
        "status": "stopped",
        "details": {
            "duration": "3s",
            "output": "VM reconfigured with new CPU/memory/disk settings",
            "cpu": 8,
            "memory": 16384,
            "disk": 256
        }
    }
}

### Get service (verify properties were updated after job completion)
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

###############################################################################
### PART 10: RESTART WITH UPDATED PROPERTIES
###############################################################################

### Start service again with updated properties (creates Start job)
POST {{baseUrl}}/services/{{serviceId}}/start
Authorization: Bearer {{adminToken}}

### Get pending jobs (should have a Start job with new properties)
# @name pendingRestartJobs
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@restartJobId = {{pendingRestartJobs.response.body.$[0].id}}

### Claim the Start job
POST {{baseUrl}}/jobs/{{restartJobId}}/claim
Authorization: Bearer {{agentToken}}

### Complete the Start job
POST {{baseUrl}}/jobs/{{restartJobId}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "agentInstanceData": {
        "status": "running",
        "details": {
            "duration": "4s",
            "output": "VM restarted with updated configuration",
            "cpu": 8,
            "memory": 16384,
            "disk": 256
        }
    }
}

### Get service (verify Started with updated properties)
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

###############################################################################
### PART 11: JOB FAILURE TESTING
###############################################################################

### Stop service for failure test
POST {{baseUrl}}/services/{{serviceId}}/stop
Authorization: Bearer {{adminToken}}

### Get pending jobs
# @name pendingFailJobs
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@failJobId = {{pendingFailJobs.response.body.$[0].id}}

### Claim the job
POST {{baseUrl}}/jobs/{{failJobId}}/claim
Authorization: Bearer {{agentToken}}

### Fail the job with error
POST {{baseUrl}}/jobs/{{failJobId}}/fail
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "errorMessage": "Simulated failure: resource unavailable"
}

### Get the failed job status
GET {{baseUrl}}/jobs/{{failJobId}}
Authorization: Bearer {{adminToken}}

### Retry by calling the same action again
POST {{baseUrl}}/services/{{serviceId}}/stop
Authorization: Bearer {{adminToken}}

### Get pending jobs after retry
# @name pendingRetryJobs
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@retryJobId = {{pendingRetryJobs.response.body.$[0].id}}

### Claim the new job
POST {{baseUrl}}/jobs/{{retryJobId}}/claim
Authorization: Bearer {{agentToken}}

### Complete the new job successfully
POST {{baseUrl}}/jobs/{{retryJobId}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "agentInstanceData": {
        "status": "stopped",
        "details": {
            "duration": "2s",
            "output": "VM stopped successfully after retry"
        }
    }
}

### Get service (verify successful retry)
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

###############################################################################
### PART 12: MAINTENANCE MODE TESTING (Non-Standard State)
###############################################################################

### Enter maintenance mode from Stopped state
POST {{baseUrl}}/services/{{serviceId}}/enterMaintenance
Authorization: Bearer {{adminToken}}

### Get pending jobs (should have an enterMaintenance job)
# @name pendingEnterMaintenanceJobs
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@enterMaintenanceJobId = {{pendingEnterMaintenanceJobs.response.body.$[0].id}}

### Claim the enterMaintenance job
POST {{baseUrl}}/jobs/{{enterMaintenanceJobId}}/claim
Authorization: Bearer {{agentToken}}

### Complete the enterMaintenance job
POST {{baseUrl}}/jobs/{{enterMaintenanceJobId}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "agentInstanceData": {
        "status": "maintenance",
        "details": {
            "duration": "1s",
            "output": "VM entered maintenance mode",
            "reason": "Scheduled system maintenance"
        }
    }
}

### Get service (verify status is Maintenance)
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

### Exit maintenance mode (return to Stopped)
POST {{baseUrl}}/services/{{serviceId}}/exitMaintenance
Authorization: Bearer {{adminToken}}

### Get pending jobs (should have an exitMaintenance job)
# @name pendingExitMaintenanceJobs
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@exitMaintenanceJobId = {{pendingExitMaintenanceJobs.response.body.$[0].id}}

### Claim the exitMaintenance job
POST {{baseUrl}}/jobs/{{exitMaintenanceJobId}}/claim
Authorization: Bearer {{agentToken}}

### Complete the exitMaintenance job
POST {{baseUrl}}/jobs/{{exitMaintenanceJobId}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "agentInstanceData": {
        "status": "stopped",
        "details": {
            "duration": "1s",
            "output": "VM exited maintenance mode",
            "maintenanceComplete": true
        }
    }
}

### Get service (verify status is back to Stopped)
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

###############################################################################
### PART 13: SERVICE DELETION & POOL VALUE RELEASE
###############################################################################

### Delete the service (creates Delete job, will release publicIp back to pool after completion)
DELETE {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

### Get pending jobs (should have a Delete job)
# @name pendingDeleteJobs
GET {{baseUrl}}/jobs/pending?serviceId={{serviceId}}
Authorization: Bearer {{agentToken}}

@deleteJobId = {{pendingDeleteJobs.response.body.$[0].id}}

### Claim the Delete job
POST {{baseUrl}}/jobs/{{deleteJobId}}/claim
Authorization: Bearer {{agentToken}}

### Complete the Delete job (this will release the publicIp)
POST {{baseUrl}}/jobs/{{deleteJobId}}/complete
Authorization: Bearer {{agentToken}}
Content-Type: application/json

{
    "agentInstanceData": {
        "status": "deleted",
        "details": {
            "duration": "2s",
            "output": "VM deleted successfully"
        }
    }
}

### Get service (verify status is Deleted)
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

### Verify the publicIp is now available again in the pool (serviceId should be null)
GET {{baseUrl}}/service-pool-values?servicePoolId={{createIPPool.response.body.id}}
Authorization: Bearer {{adminToken}}
