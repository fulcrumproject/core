### Seed Data from Database Seed
### This file creates the same data that is added in the database seed

### Variables
@baseUrl = http://localhost:3000/api/v1
@adminToken = change-me

### 1. Create VM Service Type (with property source and updatability)
# @name createVMServiceType
POST {{baseUrl}}/service-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "vm",
    "propertySchema": {
        "instanceName": {
            "type": "string",
            "label": "Instance Name",
            "source": "input",
            "updatable": "always",
            "required": true,
            "validators": [
                {
                    "type": "minLength",
                    "value": 3
                },
                {
                    "type": "maxLength",
                    "value": 50
                }
            ]
        },
        "region": {
            "type": "string",
            "label": "Cloud Region",
            "source": "input",
            "updatable": "never",
            "required": true,
            "validators": [
                {
                    "type": "enum",
                    "value": ["us-east-1", "us-west-2", "eu-west-1"]
                }
            ]
        },
        "cpu": {
            "type": "integer",
            "label": "CPU Cores",
            "source": "input",
            "updatable": "statuses",
            "updatableIn": ["Stopped"],
            "required": true,
            "validators": [
                {
                    "type": "enum",
                    "value": [1, 2, 4, 8, 16, 32]
                }
            ]
        },
        "memory": {
            "type": "integer",
            "label": "Memory (GB)",
            "source": "input",
            "updatable": "statuses",
            "updatableIn": ["Stopped"],
            "required": true,
            "validators": [
                {
                    "type": "enum",
                    "value": [1, 2, 4, 8, 16, 32, 64]
                }
            ]
        },
        "diskSize": {
            "type": "integer",
            "label": "Disk Size (GB)",
            "source": "input",
            "updatable": "statuses",
            "updatableIn": ["Stopped"],
            "required": true,
            "validators": [
                {
                    "type": "min",
                    "value": 10
                },
                {
                    "type": "max",
                    "value": 1000
                }
            ]
        },
        "imageId": {
            "type": "string",
            "label": "VM Image ID",
            "source": "input",
            "updatable": "never",
            "required": true
        },
        "instanceId": {
            "type": "string",
            "label": "Cloud Instance ID",
            "source": "agent",
            "updatable": "never"
        },
        "ipAddress": {
            "type": "string",
            "label": "IP Address",
            "source": "agent",
            "updatable": "never"
        },
        "privateIpAddress": {
            "type": "string",
            "label": "Private IP Address",
            "source": "agent",
            "updatable": "never"
        },
        "hostname": {
            "type": "string",
            "label": "Hostname",
            "source": "agent",
            "updatable": "never"
        }
    }
}

### Get the created VM service type
GET {{baseUrl}}/service-types/{{createVMServiceType.response.body.id}}
Authorization: Bearer {{adminToken}}

### 2. Create Kubernetes Cluster Service Type
# @name createKubernetesServiceType
POST {{baseUrl}}/service-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "kubernetes-cluster",
    "propertySchema": {
        "nodes": {
            "type": "array",
            "label": "Cluster Nodes",
            "required": true,
            "items": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "label": "Node ID",
                        "required": true,
                        "validators": [
                            {
                                "type": "minLength",
                                "value": 1
                            },
                            {
                                "type": "maxLength",
                                "value": 50
                            }
                        ]
                    },
                    "size": {
                        "type": "string",
                        "label": "Node Size",
                        "required": true,
                        "validators": [
                            {
                                "type": "enum",
                                "value": ["s1", "s2", "s4"]
                            }
                        ]
                    },
                    "status": {
                        "type": "string",
                        "label": "Node Status",
                        "required": true,
                        "validators": [
                            {
                                "type": "enum",
                                "value": ["On", "Off"]
                            }
                        ]
                    }
                }
            },
            "validators": [
                {
                    "type": "minItems",
                    "value": 1
                },
                {
                    "type": "maxItems",
                    "value": 100
                }
            ]
        }
    }
}

### Get the created Kubernetes service type
GET {{baseUrl}}/service-types/{{createKubernetesServiceType.response.body.id}}
Authorization: Bearer {{adminToken}}

### 3. Create Dummy Agent Type
# @name createDummyAgentType
POST {{baseUrl}}/agent-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "dummy",
    "serviceTypeIds": [
        "{{createVMServiceType.response.body.id}}"
    ]
}

### Get the created Dummy agent type
GET {{baseUrl}}/agent-types/{{createDummyAgentType.response.body.id}}
Authorization: Bearer {{adminToken}}

### 4. Create Kubernetes Agent Type
# @name createKubernetesAgentType
POST {{baseUrl}}/agent-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "kubernetes",
    "serviceTypeIds": [
        "{{createKubernetesServiceType.response.body.id}}"
    ]
}

### Get the created Kubernetes agent type
GET {{baseUrl}}/agent-types/{{createKubernetesAgentType.response.body.id}}
Authorization: Bearer {{adminToken}}

### 5. Create VM CPU Usage Metric Type
# @name createVMCpuUsageMetricType
POST {{baseUrl}}/metric-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "vm.cpu.usage",
    "entityType": "Resource"
}

### 6. Create VM Memory Usage Metric Type
# @name createVMMemoryUsageMetricType
POST {{baseUrl}}/metric-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "vm.memory.usage",
    "entityType": "Resource"
}

### 7. Create VM Disk Usage Metric Type
# @name createVMDiskUsageMetricType
POST {{baseUrl}}/metric-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "vm.disk.usage",
    "entityType": "Resource"
}

### 8. Create VM Network Throughput Metric Type
# @name createVMNetworkThroughputMetricType
POST {{baseUrl}}/metric-types
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "name": "vm.network.throughput",
    "entityType": "Resource"
}

### List all created service types
GET {{baseUrl}}/service-types
Authorization: Bearer {{adminToken}}

### List all created agent types
GET {{baseUrl}}/agent-types
Authorization: Bearer {{adminToken}}

### List all created metric types
GET {{baseUrl}}/metric-types
Authorization: Bearer {{adminToken}}

### Test VM service properties validation with valid data
POST {{baseUrl}}/service-types/{{createVMServiceType.response.body.id}}/validate
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "groupId": "550e8400-e29b-41d4-a716-446655440000",
    "properties": {
        "instanceName": "my-vm-01",
        "region": "us-east-1",
        "cpu": 4,
        "memory": 8,
        "diskSize": 100,
        "imageId": "ami-ubuntu-20.04"
    }
}

### Test VM service properties validation with invalid data (should fail - cpu not in enum)
POST {{baseUrl}}/service-types/{{createVMServiceType.response.body.id}}/validate
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "groupId": "550e8400-e29b-41d4-a716-446655440000",
    "properties": {
        "instanceName": "my-vm-01",
        "region": "us-east-1",
        "cpu": 3,
        "memory": 8,
        "diskSize": 100,
        "imageId": "ami-ubuntu-20.04"
    }
}

### Test VM property update validation - should fail (trying to update immutable region)
POST {{baseUrl}}/service-types/{{createVMServiceType.response.body.id}}/validate
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "groupId": "550e8400-e29b-41d4-a716-446655440000",
    "properties": {
        "region": "us-west-2"
    }
}

### Test Kubernetes service properties validation with valid data
POST {{baseUrl}}/service-types/{{createKubernetesServiceType.response.body.id}}/validate
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "groupId": "550e8400-e29b-41d4-a716-446655440000",
    "properties": {
        "nodes": [
            {
                "id": "node-1",
                "size": "s2",
                "status": "On"
            },
            {
                "id": "node-2",
                "size": "s4",
                "status": "On"
            }
        ]
    }
}

### Test Kubernetes service properties validation with invalid data (should fail)
POST {{baseUrl}}/service-types/{{createKubernetesServiceType.response.body.id}}/validate
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
    "groupId": "550e8400-e29b-41d4-a716-446655440000",
    "properties": {
        "nodes": [
            {
                "id": "",
                "size": "invalid-size",
                "status": "Maybe"
            }
        ]
    }
}

### Cleanup - Delete created entities (uncomment if needed)

# ### Delete VM Service Type
# DELETE {{baseUrl}}/service-types/{{createVMServiceType.response.body.id}}
# Authorization: Bearer {{adminToken}}

# ### Delete Kubernetes Service Type  
# DELETE {{baseUrl}}/service-types/{{createKubernetesServiceType.response.body.id}}
# Authorization: Bearer {{adminToken}}

# ### Delete Dummy Agent Type
# DELETE {{baseUrl}}/agent-types/{{createDummyAgentType.response.body.id}}
# Authorization: Bearer {{adminToken}}

# ### Delete Kubernetes Agent Type
# DELETE {{baseUrl}}/agent-types/{{createKubernetesAgentType.response.body.id}}
# Authorization: Bearer {{adminToken}}

# ### Delete VM CPU Usage Metric Type
# DELETE {{baseUrl}}/metric-types/{{createVMCpuUsageMetricType.response.body.id}}
# Authorization: Bearer {{adminToken}}

# ### Delete VM Memory Usage Metric Type
# DELETE {{baseUrl}}/metric-types/{{createVMMemoryUsageMetricType.response.body.id}}
# Authorization: Bearer {{adminToken}}

# ### Delete VM Disk Usage Metric Type
# DELETE {{baseUrl}}/metric-types/{{createVMDiskUsageMetricType.response.body.id}}
# Authorization: Bearer {{adminToken}}

# ### Delete VM Network Throughput Metric Type
# DELETE {{baseUrl}}/metric-types/{{createVMNetworkThroughputMetricType.response.body.id}}
# Authorization: Bearer {{adminToken}}
