### Test Job API

### Variables
@baseUrl = http://localhost:3000/api/v1
@adminToken = change-me

### Create a provider for testing
# @name createProvider
POST {{baseUrl}}/participants
Authorization: Bearer {{adminToken}}

{
    "name": "Test Provider",
    "status": "Enabled",
    "attributes": {
        "type": ["test"]
    }
}

@providerId = {{createProvider.response.body.$.id}}

### Create an agent
# @name createAgent
POST {{baseUrl}}/agents
Authorization: Bearer {{adminToken}}

{
    "name": "Test Job Agent",
    "agentTypeId": "0195c3c6-4c7d-7e3c-b481-f276e17a7bec",
    "providerId": "{{providerId}}",
    "tags": ["job-agent-{{$timestamp}}", "high-performance", "ssd-storage"]
}

@agentId = {{createAgent.response.body.$.id}}
@uniqueTag = {{createAgent.response.body.$.tags.[0]}}

### Create a new agent token
# @name createAgentToken
POST {{baseUrl}}/tokens
Authorization: Bearer {{adminToken}}

{
  "name": "Test Agent Token",
  "role": "agent",
  "expireAt": "{{$datetime iso8601 1 y}}",
  "scopeId": "{{agentId}}"
}

@agentToken = {{createAgentToken.response.body.$.value}}


### Create a new consumer
# @name createConsumer
POST {{baseUrl}}/participants
Authorization: Bearer {{adminToken}}

{
  "name": "Test Consumer",
  "status": "Enabled"
}

@consumerId = {{createConsumer.response.body.$.id}}

### Create a service group
# @name createServiceGroup
POST {{baseUrl}}/service-groups
Authorization: Bearer {{adminToken}}

{
    "name": "Test Job Service Group",
    "consumerId": "{{consumerId}}"
}

@serviceGroupId = {{createServiceGroup.response.body.$.id}}

### Create a service
# @name createService
POST {{baseUrl}}/services
Authorization: Bearer {{adminToken}}

{
    "name": "Test Job Service",
    "properties": {
        "cpu": 4,
        "memory": 512
    },
    "agentId": "{{agentId}}",
    "serviceTypeId": "0195c3c8-69e5-7806-9598-8523c01ea54f",
    "groupId": "{{serviceGroupId}}"
}

@serviceId = {{createService.response.body.$.id}}

### List all jobs
GET {{baseUrl}}/jobs
Authorization: Bearer {{adminToken}}

### List jobs with filters
GET {{baseUrl}}/jobs?status=Pending
Authorization: Bearer {{adminToken}}

### List jobs with pagination
GET {{baseUrl}}/jobs?page=1&pageSize=10
Authorization: Bearer {{adminToken}}

### Get pending jobs for agent
# @name pendingJobs
GET {{baseUrl}}/jobs/pending
Authorization: Bearer {{agentToken}}

### Get a job by ID
@jobId = {{pendingJobs.response.body.$.[0].id}}

### Get a job by ID
GET {{baseUrl}}/jobs/{{jobId}}
Authorization: Bearer {{adminToken}}

### Claim a job
POST {{baseUrl}}/jobs/{{jobId}}/claim
Authorization: Bearer {{agentToken}}

### Complete a job
POST {{baseUrl}}/jobs/{{jobId}}/complete
Authorization: Bearer {{agentToken}}

{
    "resources": {
        "status": "success",
        "details": {
            "duration": "10s",
            "output": "Service started successfully"
        }
    },
    "externalId": "{{$guid}}"
}

### Get Service
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

### Start the created service to trigger job creation
POST {{baseUrl}}/services/{{serviceId}}/start
Authorization: Bearer {{adminToken}}

### Get pending jobs for agent
# @name pendingJobs2
GET {{baseUrl}}/jobs/pending
Authorization: Bearer {{agentToken}}

### Get a job by ID
@failJobId = {{pendingJobs2.response.body.$.[0].id}}

### Claim the job for failure testing
POST {{baseUrl}}/jobs/{{failJobId}}/claim
Authorization: Bearer {{agentToken}}

### Fail a job
POST {{baseUrl}}/jobs/{{failJobId}}/fail
Authorization: Bearer {{agentToken}}

{
    "errorMessage": "Update failed: dependency missing"
}

### Check the failed job status
GET {{baseUrl}}/jobs/{{failJobId}}
Authorization: Bearer {{adminToken}}

### Retry Service Operation
POST {{baseUrl}}/services/{{serviceId}}/retry
Authorization: Bearer {{adminToken}}

### Get pending jobs for agent
# @name pendingJobs
GET {{baseUrl}}/jobs/pending
Authorization: Bearer {{agentToken}}

### Get a job by ID
@jobId = {{pendingJobs.response.body.$.[0].id}}

### Get a job by ID
GET {{baseUrl}}/jobs/{{jobId}}
Authorization: Bearer {{adminToken}}

### Claim a job
POST {{baseUrl}}/jobs/{{jobId}}/claim
Authorization: Bearer {{agentToken}}

### Complete a job
POST {{baseUrl}}/jobs/{{jobId}}/complete
Authorization: Bearer {{agentToken}}

{
    "resources": {
        "status": "success",
        "details": {
            "duration": "10s",
            "output": "Service started successfully after retry"
        }
    },
    "externalId": "{{$guid}}"
}

### Get Service
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}

### Start the created service to trigger job creation
POST {{baseUrl}}/services/{{serviceId}}/stop
Authorization: Bearer {{adminToken}}

### Get pending jobs for agent
# @name pendingJobs2
GET {{baseUrl}}/jobs/pending
Authorization: Bearer {{agentToken}}

### Get a job by ID
@unsupportedJobId = {{pendingJobs2.response.body.$.[0].id}}

### Claim the job for failure testing
POST {{baseUrl}}/jobs/{{unsupportedJobId}}/claim
Authorization: Bearer {{agentToken}}

### Fail a job
POST {{baseUrl}}/jobs/{{unsupportedJobId}}/unsupported
Authorization: Bearer {{agentToken}}

{
    "errorMessage": "Operation not supported"
}

### Check the failed job status
GET {{baseUrl}}/jobs/{{unsupportedJobId}}
Authorization: Bearer {{adminToken}}

### Get Service
GET {{baseUrl}}/services/{{serviceId}}
Authorization: Bearer {{adminToken}}
